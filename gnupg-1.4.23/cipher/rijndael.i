# 1 "rijndael.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 363 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "rijndael.c" 2
# 35 "rijndael.c"
# 1 "../config.h" 1
# 36 "rijndael.c" 2
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdio.h" 1 3




# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 1 3
# 29 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 1 3
# 84 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_header_macro.h" 1 3
# 85 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 2 3



# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_ptrdiff_t.h" 1 3
# 18 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_ptrdiff_t.h" 3
typedef long int ptrdiff_t;
# 89 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 2 3




# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_size_t.h" 1 3
# 18 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_size_t.h" 3
typedef long unsigned int size_t;
# 94 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 2 3
# 103 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_wchar_t.h" 1 3
# 24 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_wchar_t.h" 3
typedef int wchar_t;
# 104 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 2 3




# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_null.h" 1 3
# 109 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 2 3
# 123 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_max_align_t.h" 1 3
# 19 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_max_align_t.h" 3
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 124 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 2 3




# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stddef_offsetof.h" 1 3
# 129 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stddef.h" 2 3
# 30 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 2 3
# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdint.h" 1 3
# 56 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdint.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdint.h" 1 3
# 20 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdint.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 1 3
# 146 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef unsigned long int uintptr_t;
# 161 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef long int intptr_t;
# 177 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef signed char int8_t;




typedef short int16_t;




typedef int int32_t;




typedef long long int int64_t;




typedef long long int intmax_t;




typedef unsigned char uint8_t;




typedef unsigned short uint16_t;




typedef unsigned int uint32_t;




typedef unsigned long long int uint64_t;
# 227 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef unsigned long long int uintmax_t;
# 21 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdint.h" 2 3

typedef int8_t int_fast8_t;
typedef int64_t int_fast64_t;

typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;

typedef uint8_t uint_fast8_t;
typedef uint64_t uint_fast64_t;

typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;
# 95 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdint.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/stdint.h" 1 3
typedef int32_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef uint32_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
# 96 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdint.h" 2 3
# 57 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdint.h" 2 3
# 31 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 2 3





                                                             ;
                                                              ;
                                                              ;
                                                               ;
                                                              ;
                                                               ;
                                                              ;
                                                               ;
                                                            ;







typedef long unsigned int __wasi_size_t;

                                                                  ;
                                                                     ;




typedef uint64_t __wasi_filesize_t;

                                                                      ;
                                                                         ;




typedef uint64_t __wasi_timestamp_t;

                                                                       ;
                                                                          ;




typedef uint32_t __wasi_clockid_t;
# 102 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                     ;
                                                                        ;







typedef uint16_t __wasi_errno_t;
# 498 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                   ;
                                                                      ;




typedef uint64_t __wasi_rights_t;
# 663 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                    ;
                                                                       ;




typedef uint32_t __wasi_fd_t;

                                                                ;
                                                                   ;




typedef struct __wasi_iovec_t {



    uint8_t * buf;




    __wasi_size_t buf_len;

} __wasi_iovec_t;

                                                                   ;
                                                                      ;
                                                                            ;
                                                                                ;




typedef struct __wasi_ciovec_t {



    const uint8_t * buf;




    __wasi_size_t buf_len;

} __wasi_ciovec_t;

                                                                    ;
                                                                       ;
                                                                             ;
                                                                                 ;




typedef int64_t __wasi_filedelta_t;

                                                                       ;
                                                                          ;




typedef uint8_t __wasi_whence_t;
# 744 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                    ;
                                                                       ;






typedef uint64_t __wasi_dircookie_t;

                                                                       ;
                                                                          ;




typedef uint32_t __wasi_dirnamlen_t;

                                                                       ;
                                                                          ;




typedef uint64_t __wasi_inode_t;

                                                                   ;
                                                                      ;




typedef uint8_t __wasi_filetype_t;
# 818 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                      ;
                                                                         ;




typedef struct __wasi_dirent_t {



    __wasi_dircookie_t d_next;




    __wasi_inode_t d_ino;




    __wasi_dirnamlen_t d_namlen;




    __wasi_filetype_t d_type;

} __wasi_dirent_t;

                                                                     ;
                                                                       ;
                                                                                ;
                                                                               ;
                                                                                   ;
                                                                                 ;




typedef uint8_t __wasi_advice_t;
# 889 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                    ;
                                                                       ;




typedef uint16_t __wasi_fdflags_t;
# 924 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                     ;
                                                                        ;




typedef struct __wasi_fdstat_t {



    __wasi_filetype_t fs_filetype;




    __wasi_fdflags_t fs_flags;




    __wasi_rights_t fs_rights_base;





    __wasi_rights_t fs_rights_inheriting;

} __wasi_fdstat_t;

                                                                     ;
                                                                       ;
                                                                                     ;
                                                                                  ;
                                                                                        ;
                                                                                               ;





typedef uint64_t __wasi_device_t;

                                                                    ;
                                                                       ;




typedef uint16_t __wasi_fstflags_t;
# 995 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                      ;
                                                                         ;




typedef uint32_t __wasi_lookupflags_t;






                                                                         ;
                                                                            ;




typedef uint16_t __wasi_oflags_t;
# 1036 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                    ;
                                                                       ;




typedef uint64_t __wasi_linkcount_t;

                                                                       ;
                                                                          ;




typedef struct __wasi_filestat_t {



    __wasi_device_t dev;




    __wasi_inode_t ino;




    __wasi_filetype_t filetype;




    __wasi_linkcount_t nlink;




    __wasi_filesize_t size;




    __wasi_timestamp_t atim;




    __wasi_timestamp_t mtim;




    __wasi_timestamp_t ctim;

} __wasi_filestat_t;

                                                                       ;
                                                                         ;
                                                                               ;
                                                                               ;
                                                                                     ;
                                                                                  ;
                                                                                 ;
                                                                                 ;
                                                                                 ;
                                                                                 ;





typedef uint64_t __wasi_userdata_t;

                                                                      ;
                                                                         ;




typedef uint8_t __wasi_eventtype_t;
# 1136 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                       ;
                                                                          ;





typedef uint16_t __wasi_eventrwflags_t;






                                                                          ;
                                                                             ;





typedef struct __wasi_event_fd_readwrite_t {



    __wasi_filesize_t nbytes;




    __wasi_eventrwflags_t flags;

} __wasi_event_fd_readwrite_t;

                                                                                 ;
                                                                                   ;
                                                                                            ;
                                                                                           ;




typedef union __wasi_event_u_t {



    __wasi_event_fd_readwrite_t fd_readwrite;

} __wasi_event_u_t;

                                                                      ;
                                                                        ;




typedef struct __wasi_event_t {



    __wasi_userdata_t userdata;




    __wasi_errno_t error;




    __wasi_eventtype_t type;




    __wasi_event_u_t u;

} __wasi_event_t;

                                                                    ;
                                                                      ;
                                                                                 ;
                                                                              ;
                                                                              ;
                                                                           ;





typedef uint16_t __wasi_subclockflags_t;
# 1237 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                           ;
                                                                              ;




typedef struct __wasi_subscription_clock_t {



    __wasi_clockid_t id;




    __wasi_timestamp_t timeout;





    __wasi_timestamp_t precision;




    __wasi_subclockflags_t flags;

} __wasi_subscription_clock_t;

                                                                                 ;
                                                                                   ;
                                                                                        ;
                                                                                             ;
                                                                                                ;
                                                                                            ;





typedef struct __wasi_subscription_fd_readwrite_t {



    __wasi_fd_t file_descriptor;

} __wasi_subscription_fd_readwrite_t;

                                                                                       ;
                                                                                          ;
                                                                                                            ;




typedef union __wasi_subscription_u_t {



    __wasi_subscription_clock_t clock;




    __wasi_subscription_fd_readwrite_t fd_readwrite;

} __wasi_subscription_u_t;

                                                                             ;
                                                                               ;




typedef struct __wasi_subscription_t {




    __wasi_userdata_t userdata;




    __wasi_eventtype_t type;




    __wasi_subscription_u_t u;

} __wasi_subscription_t;

                                                                           ;
                                                                             ;
                                                                                        ;
                                                                                    ;
                                                                                  ;




typedef uint32_t __wasi_exitcode_t;

                                                                      ;
                                                                         ;




typedef uint8_t __wasi_signal_t;
# 1536 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                    ;
                                                                       ;




typedef uint16_t __wasi_riflags_t;
# 1554 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                     ;
                                                                        ;




typedef uint16_t __wasi_roflags_t;






                                                                     ;
                                                                        ;





typedef uint16_t __wasi_siflags_t;

                                                                     ;
                                                                        ;




typedef uint8_t __wasi_sdflags_t;
# 1594 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
                                                                     ;
                                                                        ;




typedef uint8_t __wasi_preopentype_t;






                                                                         ;
                                                                            ;




typedef struct __wasi_prestat_dir_t {



    __wasi_size_t pr_name_len;

} __wasi_prestat_dir_t;

                                                                         ;
                                                                            ;
                                                                                          ;




typedef union __wasi_prestat_u_t {



    __wasi_prestat_dir_t dir;

} __wasi_prestat_u_t;

                                                                       ;
                                                                          ;




typedef struct __wasi_prestat_t {



    __wasi_preopentype_t pr_type;




    __wasi_prestat_u_t u;

} __wasi_prestat_t;

                                                                     ;
                                                                        ;
                                                                                  ;
                                                                            ;
# 1669 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
__wasi_errno_t __wasi_args_get(
    uint8_t * * argv,

    uint8_t * argv_buf
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("args_get"),
    __warn_unused_result__
));




__wasi_errno_t __wasi_args_sizes_get(



    __wasi_size_t *argc,



    __wasi_size_t *argv_buf_size
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("args_sizes_get"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_environ_get(
    uint8_t * * environ,

    uint8_t * environ_buf
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("environ_get"),
    __warn_unused_result__
));




__wasi_errno_t __wasi_environ_sizes_get(



    __wasi_size_t *argc,



    __wasi_size_t *argv_buf_size
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("environ_sizes_get"),
    __warn_unused_result__
));







__wasi_errno_t __wasi_clock_res_get(



    __wasi_clockid_t id,




    __wasi_timestamp_t *resolution
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("clock_res_get"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_clock_time_get(



    __wasi_clockid_t id,




    __wasi_timestamp_t precision,




    __wasi_timestamp_t *time
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("clock_time_get"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_advise(
    __wasi_fd_t fd,




    __wasi_filesize_t offset,




    __wasi_filesize_t len,




    __wasi_advice_t advice
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_advise"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_allocate(
    __wasi_fd_t fd,




    __wasi_filesize_t offset,




    __wasi_filesize_t len
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_allocate"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_close(
    __wasi_fd_t fd
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_close"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_datasync(
    __wasi_fd_t fd
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_datasync"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_fdstat_get(
    __wasi_fd_t fd,




    __wasi_fdstat_t *stat
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_fdstat_get"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_fdstat_set_flags(
    __wasi_fd_t fd,




    __wasi_fdflags_t flags
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_fdstat_set_flags"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_fdstat_set_rights(
    __wasi_fd_t fd,




    __wasi_rights_t fs_rights_base,

    __wasi_rights_t fs_rights_inheriting
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_fdstat_set_rights"),
    __warn_unused_result__
));




__wasi_errno_t __wasi_fd_filestat_get(
    __wasi_fd_t fd,




    __wasi_filestat_t *buf
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_filestat_get"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_filestat_set_size(
    __wasi_fd_t fd,




    __wasi_filesize_t size
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_filestat_set_size"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_filestat_set_times(
    __wasi_fd_t fd,




    __wasi_timestamp_t atim,




    __wasi_timestamp_t mtim,




    __wasi_fstflags_t fst_flags
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_filestat_set_times"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_pread(
    __wasi_fd_t fd,




    const __wasi_iovec_t *iovs,




    size_t iovs_len,




    __wasi_filesize_t offset,




    __wasi_size_t *nread
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_pread"),
    __warn_unused_result__
));




__wasi_errno_t __wasi_fd_prestat_get(
    __wasi_fd_t fd,




    __wasi_prestat_t *buf
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_prestat_get"),
    __warn_unused_result__
));




__wasi_errno_t __wasi_fd_prestat_dir_name(
    __wasi_fd_t fd,




    uint8_t * path,

    __wasi_size_t path_len
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_prestat_dir_name"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_pwrite(
    __wasi_fd_t fd,




    const __wasi_ciovec_t *iovs,




    size_t iovs_len,




    __wasi_filesize_t offset,




    __wasi_size_t *nwritten
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_pwrite"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_read(
    __wasi_fd_t fd,




    const __wasi_iovec_t *iovs,




    size_t iovs_len,




    __wasi_size_t *nread
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_read"),
    __warn_unused_result__
));
# 2098 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
__wasi_errno_t __wasi_fd_readdir(
    __wasi_fd_t fd,




    uint8_t * buf,

    __wasi_size_t buf_len,




    __wasi_dircookie_t cookie,




    __wasi_size_t *bufused
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_readdir"),
    __warn_unused_result__
));
# 2133 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
__wasi_errno_t __wasi_fd_renumber(
    __wasi_fd_t fd,




    __wasi_fd_t to
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_renumber"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_seek(
    __wasi_fd_t fd,




    __wasi_filedelta_t offset,




    __wasi_whence_t whence,




    __wasi_filesize_t *newoffset
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_seek"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_sync(
    __wasi_fd_t fd
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_sync"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_tell(
    __wasi_fd_t fd,




    __wasi_filesize_t *offset
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_tell"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_fd_write(
    __wasi_fd_t fd,




    const __wasi_ciovec_t *iovs,




    size_t iovs_len,




    __wasi_size_t *nwritten
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("fd_write"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_path_create_directory(
    __wasi_fd_t fd,




    const char *path,




    size_t path_len
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("path_create_directory"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_path_filestat_get(
    __wasi_fd_t fd,




    __wasi_lookupflags_t flags,




    const char *path,




    size_t path_len,




    __wasi_filestat_t *buf
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("path_filestat_get"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_path_filestat_set_times(
    __wasi_fd_t fd,




    __wasi_lookupflags_t flags,




    const char *path,




    size_t path_len,




    __wasi_timestamp_t atim,




    __wasi_timestamp_t mtim,




    __wasi_fstflags_t fst_flags
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("path_filestat_set_times"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_path_link(
    __wasi_fd_t old_fd,




    __wasi_lookupflags_t old_flags,




    const char *old_path,




    size_t old_path_len,




    __wasi_fd_t new_fd,




    const char *new_path,




    size_t new_path_len
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("path_link"),
    __warn_unused_result__
));
# 2376 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
__wasi_errno_t __wasi_path_open(
    __wasi_fd_t fd,




    __wasi_lookupflags_t dirflags,





    const char *path,




    size_t path_len,




    __wasi_oflags_t oflags,
# 2409 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
    __wasi_rights_t fs_rights_base,

    __wasi_rights_t fs_rights_inherting,

    __wasi_fdflags_t fdflags,




    __wasi_fd_t *opened_fd
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("path_open"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_path_readlink(
    __wasi_fd_t fd,




    const char *path,




    size_t path_len,




    uint8_t * buf,

    __wasi_size_t buf_len,




    __wasi_size_t *bufused
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("path_readlink"),
    __warn_unused_result__
));






__wasi_errno_t __wasi_path_remove_directory(
    __wasi_fd_t fd,




    const char *path,




    size_t path_len
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("path_remove_directory"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_path_rename(
    __wasi_fd_t fd,




    const char *old_path,




    size_t old_path_len,




    __wasi_fd_t new_fd,




    const char *new_path,




    size_t new_path_len
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("path_rename"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_path_symlink(



    const char *old_path,




    size_t old_path_len,

    __wasi_fd_t fd,




    const char *new_path,




    size_t new_path_len
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("path_symlink"),
    __warn_unused_result__
));






__wasi_errno_t __wasi_path_unlink_file(
    __wasi_fd_t fd,




    const char *path,




    size_t path_len
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("path_unlink_file"),
    __warn_unused_result__
));




__wasi_errno_t __wasi_poll_oneoff(



    const __wasi_subscription_t * in,




    __wasi_event_t * out,




    __wasi_size_t nsubscriptions,




    __wasi_size_t *nevents
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("poll_oneoff"),
    __warn_unused_result__
));






_Noreturn void __wasi_proc_exit(



    __wasi_exitcode_t rval
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("proc_exit")));





__wasi_errno_t __wasi_proc_raise(



    __wasi_signal_t sig
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("proc_raise"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_sched_yield(
    void
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("sched_yield"),
    __warn_unused_result__
));
# 2652 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/wasi/api.h" 3
__wasi_errno_t __wasi_random_get(



    uint8_t * buf,

    __wasi_size_t buf_len
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("random_get"),
    __warn_unused_result__
));






__wasi_errno_t __wasi_sock_recv(
    __wasi_fd_t fd,




    const __wasi_iovec_t *ri_data,




    size_t ri_data_len,




    __wasi_riflags_t ri_flags,




    __wasi_size_t *ro_datalen,



    __wasi_roflags_t *ro_flags
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("sock_recv"),
    __warn_unused_result__
));






__wasi_errno_t __wasi_sock_send(
    __wasi_fd_t fd,




    const __wasi_ciovec_t *si_data,




    size_t si_data_len,




    __wasi_siflags_t si_flags,




    __wasi_size_t *so_datalen
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("sock_send"),
    __warn_unused_result__
));





__wasi_errno_t __wasi_sock_shutdown(
    __wasi_fd_t fd,




    __wasi_sdflags_t how
) __attribute__((
    __import_module__("wasi_snapshot_preview1"),
    __import_name__("sock_shutdown"),
    __warn_unused_result__
));
# 6 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdio.h" 2 3






# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/features.h" 1 3
# 13 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdio.h" 2 3
# 30 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdio.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 1 3
# 15 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef __builtin_va_list va_list;




typedef __builtin_va_list __isoc_va_list;
# 141 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef unsigned long int size_t;
# 156 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef long int ssize_t;
# 243 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef long long int off_t;
# 400 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef struct _IO_FILE FILE;
# 31 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdio.h" 2 3
# 66 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdio.h" 3
typedef union _G_fpos64_t {
 char __opaque[16];
 long long __lldata;
 double __align;
} fpos_t;

extern FILE *const stdin;
extern FILE *const stdout;
extern FILE *const stderr;





FILE *fopen(const char *restrict, const char *restrict);
FILE *freopen(const char *restrict, const char *restrict, FILE *restrict);
int fclose(FILE *);

int remove(const char *);
int rename(const char *, const char *);

int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
void clearerr(FILE *);

int fseek(FILE *, long, int);
long ftell(FILE *);
void rewind(FILE *);

int fgetpos(FILE *restrict, fpos_t *restrict);
int fsetpos(FILE *, const fpos_t *);

size_t fread(void *restrict, size_t, size_t, FILE *restrict);
size_t fwrite(const void *restrict, size_t, size_t, FILE *restrict);

int fgetc(FILE *);
int getc(FILE *);
int getchar(void);
int ungetc(int, FILE *);

int fputc(int, FILE *);
int putc(int, FILE *);
int putchar(int);

char *fgets(char *restrict, int, FILE *restrict);




int fputs(const char *restrict, FILE *restrict);
int puts(const char *);

int printf(const char *restrict, ...);
int fprintf(FILE *restrict, const char *restrict, ...);
int sprintf(char *restrict, const char *restrict, ...);
int snprintf(char *restrict, size_t, const char *restrict, ...);

int vprintf(const char *restrict, __isoc_va_list);
int vfprintf(FILE *restrict, const char *restrict, __isoc_va_list);
int vsprintf(char *restrict, const char *restrict, __isoc_va_list);
int vsnprintf(char *restrict, size_t, const char *restrict, __isoc_va_list);

int scanf(const char *restrict, ...);
int fscanf(FILE *restrict, const char *restrict, ...);
int sscanf(const char *restrict, const char *restrict, ...);
int vscanf(const char *restrict, __isoc_va_list);
int vfscanf(FILE *restrict, const char *restrict, __isoc_va_list);
int vsscanf(const char *restrict, const char *restrict, __isoc_va_list);

void perror(const char *);

int setvbuf(FILE *restrict, char *restrict, int, size_t);
void setbuf(FILE *restrict, char *restrict);

char *tmpnam(char *);
FILE *tmpfile(void);




FILE *fmemopen(void *restrict, size_t, const char *restrict);
FILE *open_memstream(char **, size_t *);
FILE *fdopen(int, const char *);
FILE *popen(const char *, const char *);
int pclose(FILE *);
int fileno(FILE *);
int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);
int dprintf(int, const char *restrict, ...);
int vdprintf(int, const char *restrict, __isoc_va_list);
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);
ssize_t getdelim(char **restrict, size_t *restrict, int, FILE *restrict);
ssize_t getline(char **restrict, size_t *restrict, FILE *restrict);
int renameat(int, const char *, int, const char *);
char *ctermid(char *);







char *tempnam(const char *, const char *);




char *cuserid(char *);
void setlinebuf(FILE *);
void setbuffer(FILE *, char *, size_t);
int fgetc_unlocked(FILE *);
int fputc_unlocked(int, FILE *);
int fflush_unlocked(FILE *);
size_t fread_unlocked(void *, size_t, size_t, FILE *);
size_t fwrite_unlocked(const void *, size_t, size_t, FILE *);
void clearerr_unlocked(FILE *);
int feof_unlocked(FILE *);
int ferror_unlocked(FILE *);
int fileno_unlocked(FILE *);
int getw(FILE *);
int putw(int, FILE *);
char *fgetln(FILE *, size_t *);
int asprintf(char **, const char *, ...);
int vasprintf(char **, const char *, __isoc_va_list);



char *fgets_unlocked(char *, int, FILE *);
int fputs_unlocked(const char *, FILE *);

typedef ssize_t (cookie_read_function_t)(void *, char *, size_t);
typedef ssize_t (cookie_write_function_t)(void *, const char *, size_t);
typedef int (cookie_seek_function_t)(void *, off_t *, int);
typedef int (cookie_close_function_t)(void *);

typedef struct _IO_cookie_io_functions_t {
 cookie_read_function_t *read;
 cookie_write_function_t *write;
 cookie_seek_function_t *seek;
 cookie_close_function_t *close;
} cookie_io_functions_t;

FILE *fopencookie(void *, const char *, cookie_io_functions_t);
# 37 "rijndael.c" 2
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/compat/stdlib.h" 1 3







int getloadavg(double loadavg[], int nelem);





# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdlib.h" 1 3
# 21 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdlib.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 1 3
# 40 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef int wchar_t;
# 22 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdlib.h" 2 3

int atoi (const char *);
long atol (const char *);
long long atoll (const char *);
double atof (const char *);

float strtof (const char *restrict, char **restrict);
double strtod (const char *restrict, char **restrict);
long double strtold (const char *restrict, char **restrict);

long strtol (const char *restrict, char **restrict, int);
unsigned long strtoul (const char *restrict, char **restrict, int);
long long strtoll (const char *restrict, char **restrict, int);
unsigned long long strtoull (const char *restrict, char **restrict, int);

int rand (void);
void srand (unsigned);

void *malloc (size_t);
void *calloc (size_t, size_t);
void *realloc (void *, size_t);
void free (void *);
void *aligned_alloc(size_t, size_t);

_Noreturn void abort (void);
int atexit (void (*) (void));
_Noreturn void exit (int);
_Noreturn void _Exit (int);
int at_quick_exit (void (*) (void));
_Noreturn void quick_exit (int);

char *getenv (const char *);

int system (const char *);

void *bsearch (const void *, const void *, size_t, size_t, int (*)(const void *, const void *));
void qsort (void *, size_t, size_t, int (*)(const void *, const void *));

int abs (int);
long labs (long);
long long llabs (long long);

typedef struct { int quot, rem; } div_t;
typedef struct { long quot, rem; } ldiv_t;
typedef struct { long long quot, rem; } lldiv_t;

div_t div (int, int);
ldiv_t ldiv (long, long);
lldiv_t lldiv (long long, long long);

int mblen (const char *, size_t);
int mbtowc (wchar_t *restrict, const char *restrict, size_t);
int wctomb (char *, wchar_t);
size_t mbstowcs (wchar_t *restrict, const char *restrict, size_t);
size_t wcstombs (char *restrict, const wchar_t *restrict, size_t);




size_t __ctype_get_mb_cur_max(void);
# 101 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdlib.h" 3
int posix_memalign (void **, size_t, size_t);
int setenv (const char *, const char *, int);
int unsetenv (const char *);
int mkstemp (char *);
int mkostemp (char *, int);
char *mkdtemp (char *);
int getsubopt (char **, char *const *, char **);
int rand_r (unsigned *);






char *realpath (const char *restrict, char *restrict);
long int random (void);
void srandom (unsigned int);
char *initstate (unsigned int, char *, size_t);
char *setstate (char *);
int putenv (char *);
int posix_openpt (int);
int grantpt (int);
int unlockpt (int);
char *ptsname (int);
char *l64a (long);
long a64l (const char *);
void setkey (const char *);
double drand48 (void);
double erand48 (unsigned short [3]);
long int lrand48 (void);
long int nrand48 (unsigned short [3]);
long mrand48 (void);
long jrand48 (unsigned short [3]);
void srand48 (long);
unsigned short *seed48 (unsigned short [3]);
void lcong48 (unsigned short [7]);



# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/alloca.h" 1 3








# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 1 3
# 10 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/alloca.h" 2 3

void *alloca(size_t);
# 141 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/stdlib.h" 2 3
char *mktemp (char *);
int mkstemps (char *, int);
int mkostemps (char *, int, int);
void *valloc (size_t);
void *memalign(size_t, size_t);
int getloadavg(double *, int);
int clearenv(void);


void *reallocarray (void *, size_t, size_t);
void qsort_r (void *, size_t, size_t, int (*)(const void *, const void *, void *), void *);



int ptsname_r(int, char *, size_t);
char *ecvt(double, int, int *, int *);
char *fcvt(double, int, int *, int *);
char *gcvt(double, int, char *);
char *secure_getenv(const char *);
struct __locale_struct;
float strtof_l(const char *restrict, char **restrict, struct __locale_struct *);
double strtod_l(const char *restrict, char **restrict, struct __locale_struct *);
long double strtold_l(const char *restrict, char **restrict, struct __locale_struct *);
# 15 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/compat/stdlib.h" 2 3
# 38 "rijndael.c" 2
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/compat/string.h" 1 3







extern char* strlwr(char *);
extern char* strupr(char *);





# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/string.h" 1 3
# 25 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/string.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 1 3
# 412 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef struct __locale_struct * locale_t;
# 26 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/string.h" 2 3

void *memcpy (void *restrict, const void *restrict, size_t);
void *memmove (void *, const void *, size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void *memchr (const void *, int, size_t);

char *strcpy (char *restrict, const char *restrict);
char *strncpy (char *restrict, const char *restrict, size_t);

char *strcat (char *restrict, const char *restrict);
char *strncat (char *restrict, const char *restrict, size_t);

int strcmp (const char *, const char *);
int strncmp (const char *, const char *, size_t);

int strcoll (const char *, const char *);
size_t strxfrm (char *restrict, const char *restrict, size_t);

char *strchr (const char *, int);
char *strrchr (const char *, int);

size_t strcspn (const char *, const char *);
size_t strspn (const char *, const char *);
char *strpbrk (const char *, const char *);
char *strstr (const char *, const char *);
char *strtok (char *restrict, const char *restrict);

size_t strlen (const char *);

char *strerror (int);


# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/strings.h" 1 3
# 12 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/strings.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 1 3
# 13 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/strings.h" 2 3




int bcmp (const void *, const void *, size_t);
void bcopy (const void *, void *, size_t);
void bzero (void *, size_t);
char *index (const char *, int);
char *rindex (const char *, int);



int ffs (int);
int ffsl (long);
int ffsll (long long);


int strcasecmp (const char *, const char *);
int strncasecmp (const char *, const char *, size_t);

int strcasecmp_l (const char *, const char *, locale_t);
int strncasecmp_l (const char *, const char *, size_t, locale_t);
# 60 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/string.h" 2 3





char *strtok_r (char *restrict, const char *restrict, char **restrict);
int strerror_r (int, char *, size_t);
char *stpcpy(char *restrict, const char *restrict);
char *stpncpy(char *restrict, const char *restrict, size_t);
size_t strnlen (const char *, size_t);
char *strdup (const char *);
char *strndup (const char *, size_t);
char *strsignal(int);
char *strerror_l (int, locale_t);
int strcoll_l (const char *, const char *, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);
void *memmem(const void *, size_t, const void *, size_t);




void *memccpy (void *restrict, const void *restrict, int, size_t);



char *strsep(char **, const char *);
size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);
void explicit_bzero (void *, size_t);




int strverscmp (const char *, const char *);
char *strchrnul(const char *, int);
char *strcasestr(const char *, const char *);
void *memrchr(const void *, int, size_t);
void *mempcpy(void *, const void *, size_t);
# 16 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/compat/string.h" 2 3
# 39 "rijndael.c" 2

# 1 "../include/types.h" 1
# 24 "../include/types.h"
# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/inttypes.h" 1 3
# 24 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/inttypes.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/inttypes.h" 1 3
# 12 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/inttypes.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 1 3
# 13 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/inttypes.h" 2 3

typedef struct { intmax_t quot, rem; } imaxdiv_t;

intmax_t imaxabs(intmax_t);
imaxdiv_t imaxdiv(intmax_t, intmax_t);

intmax_t strtoimax(const char *restrict, char **restrict, int);
uintmax_t strtoumax(const char *restrict, char **restrict, int);

intmax_t wcstoimax(const wchar_t *restrict, wchar_t **restrict, int);
uintmax_t wcstoumax(const wchar_t *restrict, wchar_t **restrict, int);
# 25 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/inttypes.h" 2 3
# 25 "../include/types.h" 2
# 43 "../include/types.h"
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/sys/types.h" 1 3
# 57 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/sys/types.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 1 3
# 83 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef long long int time_t;




typedef int suseconds_t;





typedef struct {
    union {
        int __i[10];
        volatile int __vi[10];
        unsigned long __s[10];
    } __u;



    const char *_a_transferredcanvases;

} pthread_attr_t;




typedef struct { union { int __i[6]; volatile int __vi[6]; volatile void *__p[6]; } __u; } pthread_mutex_t;
# 120 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef struct { union { int __i[12]; volatile int __vi[12]; void *__p[12]; } __u; } pthread_cond_t;
# 130 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef struct { union { int __i[sizeof(long)==8?14:8]; volatile int __vi[sizeof(long)==8?14:8]; void *__p[sizeof(long)==8?7:8]; } __u; } pthread_rwlock_t;




typedef struct { union { int __i[5]; volatile int __vi[5]; void *__p[5]; } __u; } pthread_barrier_t;
# 171 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef long int register_t;
# 222 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef unsigned long long int u_int64_t;
# 233 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef unsigned mode_t;




typedef unsigned long int nlink_t;
# 248 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef unsigned long long int ino_t;




typedef unsigned int dev_t;




typedef int blksize_t;




typedef int blkcnt_t;




typedef unsigned int fsblkcnt_t;




typedef unsigned int fsfilcnt_t;
# 289 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef void * timer_t;




typedef int clockid_t;




typedef int clock_t;
# 320 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef int pid_t;




typedef unsigned id_t;




typedef unsigned uid_t;




typedef unsigned gid_t;




typedef int key_t;




typedef unsigned useconds_t;
# 358 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef struct __pthread * pthread_t;





typedef int pthread_once_t;




typedef unsigned pthread_key_t;




typedef int pthread_spinlock_t;




typedef struct { unsigned __attr; } pthread_mutexattr_t;




typedef struct { unsigned __attr; } pthread_condattr_t;




typedef struct { unsigned __attr; } pthread_barrierattr_t;




typedef struct { unsigned __attr[2]; } pthread_rwlockattr_t;
# 58 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/sys/types.h" 2 3


typedef unsigned char u_int8_t;
typedef unsigned short u_int16_t;
typedef unsigned u_int32_t;
typedef char *caddr_t;
typedef unsigned char u_char;
typedef unsigned short u_short, ushort;
typedef unsigned u_int, uint;
typedef unsigned long u_long, ulong;
typedef long long quad_t;
typedef unsigned long long u_quad_t;
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/endian.h" 1 3
# 10 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/endian.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 1 3
# 11 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/endian.h" 2 3








static inline uint16_t __bswap16(uint16_t __x)
{
 return __x<<8 | __x>>8;
}

static inline uint32_t __bswap32(uint32_t __x)
{
 return __x>>24 | __x>>8&0xff00 | __x<<8&0xff0000 | __x<<24;
}

static inline uint64_t __bswap64(uint64_t __x)
{
 return __bswap32(__x)+0ULL<<32 | __bswap32(__x>>32);
}
# 71 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/sys/types.h" 2 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/sys/select.h" 1 3
# 16 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/sys/select.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 1 3
# 309 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
struct timeval { time_t tv_sec; suseconds_t tv_usec; };




struct timespec { time_t tv_sec; long tv_nsec; };
# 418 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/bits/alltypes.h" 3
typedef struct __sigset_t { unsigned long __bits[128/sizeof(long)]; } sigset_t;
# 17 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/sys/select.h" 2 3



typedef unsigned long fd_mask;

typedef struct {
 unsigned long fds_bits[1024 / 8 / sizeof(long)];
} fd_set;






int select (int, fd_set *restrict, fd_set *restrict, fd_set *restrict, struct timeval *restrict);
int pselect (int, fd_set *restrict, fd_set *restrict, fd_set *restrict, const struct timespec *restrict, const sigset_t *restrict);
# 72 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/sys/types.h" 2 3
# 44 "../include/types.h" 2





typedef unsigned char byte;
# 76 "../include/types.h"
typedef unsigned short u16;
# 86 "../include/types.h"
typedef unsigned int u32;
# 103 "../include/types.h"
typedef uint64_t u64;
# 126 "../include/types.h"
typedef union {
    int a;
    short b;
    char c[1];
    long d;

    u64 e;

    float f;
    double g;
} PROPERLY_ALIGNED_TYPE;

struct string_list {
    struct string_list *next;
    unsigned int flags;
    char d[1];
};
typedef struct string_list *STRLIST;
typedef struct string_list *strlist_t;
# 41 "rijndael.c" 2
# 1 "../include/util.h" 1
# 23 "../include/util.h"
# 1 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/compat/stdarg.h" 1 3
# 14 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/compat/stdarg.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdarg.h" 1 3
# 47 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdarg.h" 3
# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stdarg_header_macro.h" 1 3
# 48 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdarg.h" 2 3



# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stdarg___gnuc_va_list.h" 1 3
# 12 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stdarg___gnuc_va_list.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 52 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdarg.h" 2 3




# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stdarg_va_list.h" 1 3
# 12 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stdarg_va_list.h" 3
typedef __builtin_va_list va_list;
# 57 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdarg.h" 2 3




# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stdarg_va_arg.h" 1 3
# 62 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdarg.h" 2 3




# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stdarg___va_copy.h" 1 3
# 67 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdarg.h" 2 3




# 1 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/__stdarg_va_copy.h" 1 3
# 72 "/home/yang/wasm/emsdk/upstream/lib/clang/20/include/stdarg.h" 2 3
# 15 "/home/yang/wasm/emsdk/upstream/emscripten/cache/sysroot/include/compat/stdarg.h" 2 3
# 24 "../include/util.h" 2


# 1 "../include/errors.h" 1
# 27 "../include/util.h" 2

# 1 "../include/mpi.h" 1
# 32 "../include/mpi.h"
# 1 "../config.h" 1
# 33 "../include/mpi.h" 2

# 1 "../include/iobuf.h" 1
# 36 "../include/iobuf.h"
typedef struct iobuf_struct *IOBUF;
typedef struct iobuf_struct *iobuf_t;


struct iobuf_struct {
    int use;
    off_t nlimit;
    off_t nbytes;
    off_t ntotal;
    int nofast;
    void *directfp;
    struct {
 size_t size;
 size_t start;
 size_t len;
 byte *buf;
    } d;
    int filter_eof;
    int error;
    int (*filter)( void *opaque, int control,
     IOBUF chain, byte *buf, size_t *len);
    void *filter_ov;
    int filter_ov_owner;
    char *real_fname;
    IOBUF chain;
    int no, subno;
    void *opaque;

    struct {
 size_t size;
 size_t start;
 size_t len;
 byte *buf;
    } unget;
};
# 81 "../include/iobuf.h"
int iobuf_debug_mode;

void iobuf_enable_special_filenames ( int yes );
int iobuf_is_pipe_filename (const char *fname);
IOBUF iobuf_alloc(int use, size_t bufsize);
IOBUF iobuf_temp(void);
IOBUF iobuf_temp_with_content( const char *buffer, size_t length );
IOBUF iobuf_open( const char *fname );
IOBUF iobuf_fdopen( int fd, const char *mode );
IOBUF iobuf_sockopen( int fd, const char *mode );
IOBUF iobuf_create( const char *fname );
IOBUF iobuf_append( const char *fname );
IOBUF iobuf_openrw( const char *fname );
int iobuf_ioctl ( IOBUF a, int cmd, int intval, void *ptrval );
int iobuf_close( IOBUF iobuf );
int iobuf_cancel( IOBUF iobuf );

int iobuf_push_filter( IOBUF a, int (*f)(void *opaque, int control,
         IOBUF chain, byte *buf, size_t *len), void *ov );
int iobuf_push_filter2( IOBUF a,
      int (*f)(void *opaque, int control,
      IOBUF chain, byte *buf, size_t *len),
      void *ov, int rel_ov );
int iobuf_flush(IOBUF a);
void iobuf_clear_eof(IOBUF a);



void iobuf_set_limit( IOBUF a, off_t nlimit );

off_t iobuf_tell( IOBUF a );
int iobuf_seek( IOBUF a, off_t newpos );

int iobuf_readbyte(IOBUF a);
int iobuf_read(IOBUF a, byte *buf, unsigned buflen );
unsigned iobuf_read_line( IOBUF a, byte **addr_of_buffer,
     unsigned *length_of_buffer, unsigned *max_length );
int iobuf_peek(IOBUF a, byte *buf, unsigned buflen );
int iobuf_writebyte(IOBUF a, unsigned c);
int iobuf_write(IOBUF a, byte *buf, unsigned buflen );
int iobuf_writestr(IOBUF a, const char *buf );

void iobuf_flush_temp( IOBUF temp );
int iobuf_write_temp( IOBUF a, IOBUF temp );
size_t iobuf_temp_to_buffer( IOBUF a, byte *buffer, size_t buflen );
void iobuf_unget_and_close_temp( IOBUF a, IOBUF temp );

int iobuf_get_fd (IOBUF a);
off_t iobuf_get_filelength (IOBUF a, int *overflow);

const char *iobuf_get_real_fname( IOBUF a );
const char *iobuf_get_fname( IOBUF a );

void iobuf_set_partial_block_mode( IOBUF a, size_t len );

int iobuf_translate_file_handle ( int fd, int for_write );
# 160 "../include/iobuf.h"
void iobuf_skip_rest (IOBUF a, unsigned long n, int partial);
# 35 "../include/mpi.h" 2

# 1 "../include/memory.h" 1
# 57 "../include/memory.h"
void *xmalloc( size_t n );
void *xtrymalloc (size_t n);
void *xmalloc_clear( size_t n );
void *xmalloc_secure( size_t n );
void *xmalloc_secure_clear( size_t n );
void *xrealloc( void *a, size_t n );
void xfree( void *p );
void m_check( const void *a );

char *xstrdup( const char * a);
char *xtrystrdup (const char *a);


size_t m_size( const void *a );
void m_print_stats(const char *prefix);


void *xcalloc (size_t n, size_t m);
void *xcalloc_secure (size_t n, size_t m);



int secmem_init( size_t npool );
void secmem_term( void );
void *secmem_malloc( size_t size );
void *secmexrealloc( void *a, size_t newsize );
void secmem_free( void *a );
int m_is_secure( const void *p );
void secmem_dump_stats(void);
void secmem_set_flags( unsigned flags );
unsigned secmem_get_flags(void);
# 102 "../include/memory.h"
int memory_debug_mode;
int memory_stat_debug_mode;
# 37 "../include/mpi.h" 2
# 49 "../include/mpi.h"
int mpi_debug_mode;


struct gcry_mpi;
typedef struct gcry_mpi *MPI;
# 72 "../include/mpi.h"
MPI mpi_alloc( unsigned nlimbs );
MPI mpi_alloc_secure( unsigned nlimbs );
MPI mpi_alloc_like( MPI a );
void mpi_free( MPI a );
void mpi_resize( MPI a, unsigned nlimbs );
MPI mpi_copy( MPI a );


MPI mpi_set_opaque( MPI a, void *p, unsigned int len );
void *mpi_get_opaque( MPI a, unsigned int *len );

void mpi_set_secure( MPI a );
void mpi_clear( MPI a );
void mpi_set( MPI w, MPI u);
void mpi_set_cond( MPI w, MPI u, unsigned long set);
void mpi_set_ui( MPI w, ulong u);
MPI mpi_alloc_set_ui( unsigned long u);
void mpi_m_check( MPI a );
void mpi_swap( MPI a, MPI b);
int mpi_get_nlimbs (MPI a);
int mpi_is_neg (MPI a);
unsigned int mpi_nlimb_hint_from_nbytes (unsigned int nbytes);
unsigned int mpi_nlimb_hint_from_nbits (unsigned int nbits);
unsigned int mpi_get_flags (MPI a);


int mpi_write( IOBUF out, MPI a );




MPI mpi_read(IOBUF inp, unsigned *nread, int secure);

MPI mpi_read_from_buffer(byte *buffer, unsigned *ret_nread, int secure);
int mpi_fromstr(MPI val, const char *str);
int mpi_print( FILE *fp, MPI a, int mode );
void g10_log_mpidump( const char *text, MPI a );
u32 mpi_get_keyid( MPI a, u32 *keyid );
byte *mpi_get_buffer( MPI a, unsigned *nbytes, int *sign );
byte *mpi_get_secure_buffer( MPI a, unsigned *nbytes, int *sign );
void mpi_set_buffer( MPI a, const byte *buffer, unsigned nbytes, int sign );




void mpi_add_ui(MPI w, MPI u, ulong v );
void mpi_add(MPI w, MPI u, MPI v);
void mpi_addm(MPI w, MPI u, MPI v, MPI m);
void mpi_sub_ui(MPI w, MPI u, ulong v );
void mpi_sub( MPI w, MPI u, MPI v);
void mpi_subm( MPI w, MPI u, MPI v, MPI m);


void mpi_mul_ui(MPI w, MPI u, ulong v );
void mpi_mul_2exp( MPI w, MPI u, ulong cnt);
void mpi_mul( MPI w, MPI u, MPI v);
void mpi_mulm( MPI w, MPI u, MPI v, MPI m);


ulong mpi_fdiv_r_ui( MPI rem, MPI dividend, ulong divisor );
void mpi_fdiv_r( MPI rem, MPI dividend, MPI divisor );
void mpi_fdiv_q( MPI quot, MPI dividend, MPI divisor );
void mpi_fdiv_qr( MPI quot, MPI rem, MPI dividend, MPI divisor );
void mpi_tdiv_r( MPI rem, MPI num, MPI den);
void mpi_tdiv_qr( MPI quot, MPI rem, MPI num, MPI den);
void mpi_tdiv_q_2exp( MPI w, MPI u, unsigned count );
int mpi_divisible_ui(MPI dividend, ulong divisor );


int mpi_gcd( MPI g, MPI a, MPI b );


void mpi_pow( MPI w, MPI u, MPI v);
void mpi_powm( MPI res, MPI base, MPI exponent, MPI mod);


void mpi_mulpowm( MPI res, MPI *basearray, MPI *exparray, MPI mod);


int mpi_cmp_ui( MPI u, ulong v );
int mpi_cmp( MPI u, MPI v );


int mpi_getbyte( MPI a, unsigned idx );
void mpi_putbyte( MPI a, unsigned idx, int value );
unsigned mpi_trailing_zeros( MPI a );


void mpi_normalize( MPI a );
unsigned mpi_get_nbits( MPI a );
int mpi_test_bit( MPI a, unsigned n );
void mpi_set_bit( MPI a, unsigned n );
void mpi_set_highbit( MPI a, unsigned n );
void mpi_clear_highbit( MPI a, unsigned n );
void mpi_clear_bit( MPI a, unsigned n );
void mpi_rshift( MPI x, MPI a, unsigned n );


void mpi_invm( MPI x, MPI u, MPI v );
# 29 "../include/util.h" 2
# 1 "../include/compat.h" 1







int hextobyte( const char *s );
int ascii_toupper (int c);
int ascii_tolower (int c);
int ascii_strcasecmp( const char *a, const char *b );
int ascii_strncasecmp( const char *a, const char *b, size_t n);






char *xstrconcat (const char *s1, ...) __attribute__ ((sentinel(0)));
# 30 "../include/util.h" 2
# 39 "../include/util.h"
typedef struct {
     int *argc;
     char ***argv;
     unsigned flags;
     int err;

     int r_opt;
     int r_type;
     union {
  int ret_int;
  long ret_long;
  ulong ret_ulong;
  char *ret_str;
     } r;
     struct {
  int idx;
  int inarg;
  int stopped;
  const char *last;
  void *aliases;
  const void *cur_alias;
         void *iio_list;
     } internal;
} ARGPARSE_ARGS;

typedef struct {
    int short_opt;
    const char *long_opt;
    unsigned flags;
    const char *description;
} ARGPARSE_OPTS;


void log_set_logfile( const char *name, int fd );
FILE *log_stream(void);
void g10_log_print_prefix(const char *text);
void log_set_name( const char *name );
const char *log_get_name(void);
void log_set_pid( int pid );
int log_get_errorcount( int clear );
void log_inc_errorcount(void);
int log_set_strict(int val);
void g10_log_hexdump( const char *text, const char *buf, size_t len );



  void g10_log_bug( const char *fmt, ... )
       __attribute__ ((noreturn, format (printf,1,2)));
  void g10_log_bug0( const char *, int, const char * ) __attribute__ ((noreturn));
  void g10_log_fatal( const char *fmt, ... )
       __attribute__ ((noreturn, format (printf,1,2)));
  void g10_log_error( const char *fmt, ... ) __attribute__ ((format (printf,1,2)));
  void g10_log_info( const char *fmt, ... ) __attribute__ ((format (printf,1,2)));
  void g10_log_warning( const char *fmt, ... ) __attribute__ ((format (printf,1,2)));
  void g10_log_debug( const char *fmt, ... ) __attribute__ ((format (printf,1,2)));
# 121 "../include/util.h"
const char * g10_errstr( int no );


int arg_parse( ARGPARSE_ARGS *arg, ARGPARSE_OPTS *opts);
int optfile_parse( FILE *fp, const char *filename, unsigned *lineno,
     ARGPARSE_ARGS *arg, ARGPARSE_OPTS *opts);
void usage( int level );
const char *default_strusage( int level );



const char *strusage( int level );



# 1 "../include/../include/dotlock.h" 1
# 97 "../include/../include/dotlock.h"
struct dotlock_handle;
typedef struct dotlock_handle *dotlock_t;

void dotlock_disable (void);
dotlock_t dotlock_create (const char *file_to_lock, unsigned int flags);
void dotlock_set_fd (dotlock_t h, int fd);
int dotlock_get_fd (dotlock_t h);
void dotlock_destroy (dotlock_t h, int reclaim);
int dotlock_take (dotlock_t h, long timeout);
int dotlock_release (dotlock_t h);
void dotlock_remove_lockfiles (int reclaim);
void dotlock_remove_lockfiles_reclaim (void);
# 137 "../include/util.h" 2


char * make_basename(const char *filepath, const char *inputpath);
char * make_dirname(const char *filepath);
char *make_filename( const char *first_part, ... );
int compare_filenames( const char *a, const char *b );
int same_file_p (const char *name1, const char *name2);
const char *print_fname_stdin( const char *s );
const char *print_fname_stdout( const char *s );
int is_file_compressed(const char *s, int *r_status);


u32 make_timestamp(void);
u32 scan_isodatestr( const char *string );
u32 isotime2seconds (const char *string);
const char *strtimevalue( u32 stamp );
const char *strtimestamp( u32 stamp );
const char *isotimestamp( u32 stamp );
const char *asctimestamp( u32 stamp );
void print_string( FILE *fp, const byte *p, size_t n, int delim );
void print_string2( FILE *fp, const byte *p, size_t n, int delim, int delim2 );
void print_utf8_string( FILE *fp, const byte *p, size_t n );
void print_utf8_string2( FILE *fp, const byte *p, size_t n, int delim);
char *make_printable_string( const byte *p, size_t n, int delim );
int answer_is_yes_no_default( const char *s, int def_answer );
int answer_is_yes( const char *s );
int answer_is_yes_no_quit( const char *s );
int answer_is_okay_cancel (const char *s, int def_answer);
int match_multistr(const char *multistr,const char *match);


void free_strlist( STRLIST sl );

STRLIST add_to_strlist( STRLIST *list, const char *string );
STRLIST add_to_strlist2( STRLIST *list, const char *string, int is_utf8 );
STRLIST append_to_strlist( STRLIST *list, const char *string );
STRLIST append_to_strlist2( STRLIST *list, const char *string, int is_utf8 );
STRLIST strlist_prev( STRLIST head, STRLIST node );
STRLIST strlist_last( STRLIST node );
char *pop_strlist( STRLIST *list );
const char *memistr( const char *buf, size_t buflen, const char *sub );
const char *ascii_memistr( const char *buf, size_t buflen, const char *sub );
char *mem2str( char *, const void *, size_t);
char *trim_spaces( char *string );
unsigned int trim_trailing_chars( byte *line, unsigned int len,
                                  const char *trimchars);
unsigned int trim_trailing_ws( byte *line, unsigned len );
unsigned int check_trailing_chars( const byte *line, unsigned int len,
                                   const char *trimchars );
unsigned int check_trailing_ws( const byte *line, unsigned int len );
int string_count_chr( const char *string, int c );
int has_invalid_email_chars (const char *s);
int is_valid_mailbox (const char *name);
int set_native_charset( const char *newset );
const char* get_native_charset(void);
char *native_to_utf8( const char *string );
char *utf8_to_native( const char *string, size_t length, int delim);
char *string_to_utf8 (const char *string);

int ascii_isupper (int c);
int ascii_islower (int c);
int ascii_memcasecmp( const char *a, const char *b, size_t n);
char *ascii_strlwr (char *s);
# 223 "../include/util.h"
struct private_membuf_s {
  size_t len;
  size_t size;
  char *buf;
  int out_of_core;
};

typedef struct private_membuf_s membuf_t;

void init_membuf (membuf_t *mb, int initiallen);
void put_membuf (membuf_t *mb, const void *buf, size_t len);
void put_membuf_str (membuf_t *mb, const char *buf);
void *get_membuf (membuf_t *mb, size_t *len);
# 249 "../include/util.h"
char *xasprintf (const char *fmt, ...);
char *xtryasprintf (const char *fmt, ...);
char *xtryvasprintf (const char *fmt, va_list arg_ptr);
char *strconcat (const char *s1, ...) __attribute__ ((sentinel(0)));


char *get_pka_info (const char *address, void *fprbuf, size_t fprbuflen);


int get_cert (const char *name, int want_ipgp, size_t max_size, IOBUF *iobuf,
              unsigned char **fpr,size_t *fpr_len,char **url);


int hex2bin (const char *string, void *buffer, size_t length);
int hexcolon2bin (const char *string, void *buffer, size_t length);
char *bin2hex (const void *buffer, size_t length, char *stringbuf);
char *bin2hexcolon (const void *buffer, size_t length, char *stringbuf);
const char *hex2str (const char *hexstring,
                     char *buffer, size_t bufsize, size_t *buflen);
char *hex2str_alloc (const char *hexstring, size_t *r_count);
# 42 "rijndael.c" 2

# 1 "./algorithms.h" 1
# 22 "./algorithms.h"
const char *dynload_enum_module_names (int seq);

const char *
md5_get_info (int algo, size_t *contextsize,
              byte **r_asnoid, int *r_asnlen, int *r_mdlen,
              void (**r_init)( void *c ),
              void (**r_write)( void *c, byte *buf, size_t nbytes ),
              void (**r_final)( void *c ),
              byte *(**r_read)( void *c )
              );


const char *
rmd160_get_info (int algo, size_t *contextsize,
                 byte **r_asnoid, int *r_asnlen, int *r_mdlen,
                 void (**r_init)( void *c ),
                 void (**r_write)( void *c, byte *buf, size_t nbytes ),
                 void (**r_final)( void *c ),
                 byte *(**r_read)( void *c )
                 );

const char *
sha1_get_info (int algo, size_t *contextsize,
        byte **r_asnoid, int *r_asnlen, int *r_mdlen,
        void (**r_init)( void *c ),
        void (**r_write)( void *c, byte *buf, size_t nbytes ),
        void (**r_final)( void *c ),
        byte *(**r_read)( void *c )
               );

const char *
sha224_get_info (int algo, size_t *contextsize,
   byte **r_asnoid, int *r_asnlen, int *r_mdlen,
   void (**r_init)( void *c ),
   void (**r_write)( void *c, byte *buf, size_t nbytes ),
   void (**r_final)( void *c ),
   byte *(**r_read)( void *c )
   );

const char *
sha256_get_info (int algo, size_t *contextsize,
   byte **r_asnoid, int *r_asnlen, int *r_mdlen,
   void (**r_init)( void *c ),
   void (**r_write)( void *c, byte *buf, size_t nbytes ),
   void (**r_final)( void *c ),
   byte *(**r_read)( void *c )
   );

const char *
sha384_get_info (int algo, size_t *contextsize,
   byte **r_asnoid, int *r_asnlen, int *r_mdlen,
   void (**r_init)( void *c ),
   void (**r_write)( void *c, byte *buf, size_t nbytes ),
   void (**r_final)( void *c ),
   byte *(**r_read)( void *c )
   );

const char *
sha512_get_info (int algo, size_t *contextsize,
   byte **r_asnoid, int *r_asnlen, int *r_mdlen,
   void (**r_init)( void *c ),
   void (**r_write)( void *c, byte *buf, size_t nbytes ),
   void (**r_final)( void *c ),
   byte *(**r_read)( void *c )
   );

const char *
des_get_info( int algo, size_t *keylen,
       size_t *blocksize, size_t *contextsize,
       int (**setkeyf)( void *c, const byte *key, unsigned keylen ),
       void (**encryptf)( void *c, byte *outbuf, const byte *inbuf ),
       void (**decryptf)( void *c, byte *outbuf, const byte *inbuf )
       );

const char *
cast5_get_info( int algo, size_t *keylen,
  size_t *blocksize, size_t *contextsize,
  int (**setkeyf)( void *c, const byte *key, unsigned keylen ),
  void (**encryptf)( void *c, byte *outbuf, const byte *inbuf ),
  void (**decryptf)( void *c, byte *outbuf, const byte *inbuf )
  );


const char *
blowfish_get_info( int algo, size_t *keylen,
     size_t *blocksize, size_t *contextsize,
     int (**setkeyf)(void *c, const byte *key, unsigned keylen),
     void (**encryptf)(void *c, byte *outbuf, const byte *inbuf),
     void (**decryptf)(void *c, byte *outbuf, const byte *inbuf)
   );

const char *
twofish_get_info( int algo, size_t *keylen,
    size_t *blocksize, size_t *contextsize,
    int (**setkeyf)( void *c, const byte *key, unsigned keylen ),
    void (**encryptf)( void *c, byte *outbuf, const byte *inbuf),
    void (**decryptf)( void *c, byte *outbuf, const byte *inbuf )
    );

const char *
rijndael_get_info( int algo, size_t *keylen,
     size_t *blocksize, size_t *contextsize,
     int (**setkeyf)( void *c, const byte *key, unsigned keylen),
     void (**encryptf)(void *c, byte *outbuf, const byte *inbuf),
     void (**decryptf)(void *c, byte *outbuf, const byte *inbuf)
     );
void rijndael_cfb_enc (void *context, unsigned char *iv,
                       void *outbuf_arg, const void *inbuf_arg,
                       unsigned int nblocks);
void rijndael_cfb_dec (void *context, unsigned char *iv,
                       void *outbuf_arg, const void *inbuf_arg,
                       unsigned int nblocks);

const char *
idea_get_info( int algo, size_t *keylen,
               size_t *blocksize, size_t *contextsize,
               int (**setkeyf)( void *c, const byte *key, unsigned keylen ),
               void (**encryptf)( void *c, byte *outbuf, const byte *inbuf ),
               void (**decryptf)( void *c, byte *outbuf, const byte *inbuf )
               );

const char *
camellia_get_info(int algo, size_t *keylen,
    size_t *blocksize, size_t *contextsize,
    int (**setkeyf)( void *c, const byte *key, unsigned keylen ),
    void (**encryptf)( void *c, byte *outbuf, const byte *inbuf),
    void (**decryptf)( void *c, byte *outbuf, const byte *inbuf )
    );
# 44 "rijndael.c" 2








typedef u32 u32_a_t;



static const char *selftest(void);

typedef struct {
    int ROUNDS;
    int decryption_prepared;
    byte keySched[14 +1][4][4];
    byte keySched2[14 +1][4][4];
} RIJNDAEL_context;


static const byte S[256] = {
    99, 124, 119, 123, 242, 107, 111, 197,
    48, 1, 103, 43, 254, 215, 171, 118,
    202, 130, 201, 125, 250, 89, 71, 240,
    173, 212, 162, 175, 156, 164, 114, 192,
    183, 253, 147, 38, 54, 63, 247, 204,
    52, 165, 229, 241, 113, 216, 49, 21,
    4, 199, 35, 195, 24, 150, 5, 154,
    7, 18, 128, 226, 235, 39, 178, 117,
    9, 131, 44, 26, 27, 110, 90, 160,
    82, 59, 214, 179, 41, 227, 47, 132,
    83, 209, 0, 237, 32, 252, 177, 91,
    106, 203, 190, 57, 74, 76, 88, 207,
    208, 239, 170, 251, 67, 77, 51, 133,
    69, 249, 2, 127, 80, 60, 159, 168,
    81, 163, 64, 143, 146, 157, 56, 245,
    188, 182, 218, 33, 16, 255, 243, 210,
    205, 12, 19, 236, 95, 151, 68, 23,
    196, 167, 126, 61, 100, 93, 25, 115,
    96, 129, 79, 220, 34, 42, 144, 136,
    70, 238, 184, 20, 222, 94, 11, 219,
    224, 50, 58, 10, 73, 6, 36, 92,
    194, 211, 172, 98, 145, 149, 228, 121,
    231, 200, 55, 109, 141, 213, 78, 169,
    108, 86, 244, 234, 101, 122, 174, 8,
    186, 120, 37, 46, 28, 166, 180, 198,
    232, 221, 116, 31, 75, 189, 139, 138,
    112, 62, 181, 102, 72, 3, 246, 14,
    97, 53, 87, 185, 134, 193, 29, 158,
    225, 248, 152, 17, 105, 217, 142, 148,
    155, 30, 135, 233, 206, 85, 40, 223,
    140, 161, 137, 13, 191, 230, 66, 104,
    65, 153, 45, 15, 176, 84, 187, 22
};


static const byte T1[256][4] = {
    { 0xc6,0x63,0x63,0xa5 }, { 0xf8,0x7c,0x7c,0x84 },
    { 0xee,0x77,0x77,0x99 }, { 0xf6,0x7b,0x7b,0x8d },
    { 0xff,0xf2,0xf2,0x0d }, { 0xd6,0x6b,0x6b,0xbd },
    { 0xde,0x6f,0x6f,0xb1 }, { 0x91,0xc5,0xc5,0x54 },
    { 0x60,0x30,0x30,0x50 }, { 0x02,0x01,0x01,0x03 },
    { 0xce,0x67,0x67,0xa9 }, { 0x56,0x2b,0x2b,0x7d },
    { 0xe7,0xfe,0xfe,0x19 }, { 0xb5,0xd7,0xd7,0x62 },
    { 0x4d,0xab,0xab,0xe6 }, { 0xec,0x76,0x76,0x9a },
    { 0x8f,0xca,0xca,0x45 }, { 0x1f,0x82,0x82,0x9d },
    { 0x89,0xc9,0xc9,0x40 }, { 0xfa,0x7d,0x7d,0x87 },
    { 0xef,0xfa,0xfa,0x15 }, { 0xb2,0x59,0x59,0xeb },
    { 0x8e,0x47,0x47,0xc9 }, { 0xfb,0xf0,0xf0,0x0b },
    { 0x41,0xad,0xad,0xec }, { 0xb3,0xd4,0xd4,0x67 },
    { 0x5f,0xa2,0xa2,0xfd }, { 0x45,0xaf,0xaf,0xea },
    { 0x23,0x9c,0x9c,0xbf }, { 0x53,0xa4,0xa4,0xf7 },
    { 0xe4,0x72,0x72,0x96 }, { 0x9b,0xc0,0xc0,0x5b },
    { 0x75,0xb7,0xb7,0xc2 }, { 0xe1,0xfd,0xfd,0x1c },
    { 0x3d,0x93,0x93,0xae }, { 0x4c,0x26,0x26,0x6a },
    { 0x6c,0x36,0x36,0x5a }, { 0x7e,0x3f,0x3f,0x41 },
    { 0xf5,0xf7,0xf7,0x02 }, { 0x83,0xcc,0xcc,0x4f },
    { 0x68,0x34,0x34,0x5c }, { 0x51,0xa5,0xa5,0xf4 },
    { 0xd1,0xe5,0xe5,0x34 }, { 0xf9,0xf1,0xf1,0x08 },
    { 0xe2,0x71,0x71,0x93 }, { 0xab,0xd8,0xd8,0x73 },
    { 0x62,0x31,0x31,0x53 }, { 0x2a,0x15,0x15,0x3f },
    { 0x08,0x04,0x04,0x0c }, { 0x95,0xc7,0xc7,0x52 },
    { 0x46,0x23,0x23,0x65 }, { 0x9d,0xc3,0xc3,0x5e },
    { 0x30,0x18,0x18,0x28 }, { 0x37,0x96,0x96,0xa1 },
    { 0x0a,0x05,0x05,0x0f }, { 0x2f,0x9a,0x9a,0xb5 },
    { 0x0e,0x07,0x07,0x09 }, { 0x24,0x12,0x12,0x36 },
    { 0x1b,0x80,0x80,0x9b }, { 0xdf,0xe2,0xe2,0x3d },
    { 0xcd,0xeb,0xeb,0x26 }, { 0x4e,0x27,0x27,0x69 },
    { 0x7f,0xb2,0xb2,0xcd }, { 0xea,0x75,0x75,0x9f },
    { 0x12,0x09,0x09,0x1b }, { 0x1d,0x83,0x83,0x9e },
    { 0x58,0x2c,0x2c,0x74 }, { 0x34,0x1a,0x1a,0x2e },
    { 0x36,0x1b,0x1b,0x2d }, { 0xdc,0x6e,0x6e,0xb2 },
    { 0xb4,0x5a,0x5a,0xee }, { 0x5b,0xa0,0xa0,0xfb },
    { 0xa4,0x52,0x52,0xf6 }, { 0x76,0x3b,0x3b,0x4d },
    { 0xb7,0xd6,0xd6,0x61 }, { 0x7d,0xb3,0xb3,0xce },
    { 0x52,0x29,0x29,0x7b }, { 0xdd,0xe3,0xe3,0x3e },
    { 0x5e,0x2f,0x2f,0x71 }, { 0x13,0x84,0x84,0x97 },
    { 0xa6,0x53,0x53,0xf5 }, { 0xb9,0xd1,0xd1,0x68 },
    { 0x00,0x00,0x00,0x00 }, { 0xc1,0xed,0xed,0x2c },
    { 0x40,0x20,0x20,0x60 }, { 0xe3,0xfc,0xfc,0x1f },
    { 0x79,0xb1,0xb1,0xc8 }, { 0xb6,0x5b,0x5b,0xed },
    { 0xd4,0x6a,0x6a,0xbe }, { 0x8d,0xcb,0xcb,0x46 },
    { 0x67,0xbe,0xbe,0xd9 }, { 0x72,0x39,0x39,0x4b },
    { 0x94,0x4a,0x4a,0xde }, { 0x98,0x4c,0x4c,0xd4 },
    { 0xb0,0x58,0x58,0xe8 }, { 0x85,0xcf,0xcf,0x4a },
    { 0xbb,0xd0,0xd0,0x6b }, { 0xc5,0xef,0xef,0x2a },
    { 0x4f,0xaa,0xaa,0xe5 }, { 0xed,0xfb,0xfb,0x16 },
    { 0x86,0x43,0x43,0xc5 }, { 0x9a,0x4d,0x4d,0xd7 },
    { 0x66,0x33,0x33,0x55 }, { 0x11,0x85,0x85,0x94 },
    { 0x8a,0x45,0x45,0xcf }, { 0xe9,0xf9,0xf9,0x10 },
    { 0x04,0x02,0x02,0x06 }, { 0xfe,0x7f,0x7f,0x81 },
    { 0xa0,0x50,0x50,0xf0 }, { 0x78,0x3c,0x3c,0x44 },
    { 0x25,0x9f,0x9f,0xba }, { 0x4b,0xa8,0xa8,0xe3 },
    { 0xa2,0x51,0x51,0xf3 }, { 0x5d,0xa3,0xa3,0xfe },
    { 0x80,0x40,0x40,0xc0 }, { 0x05,0x8f,0x8f,0x8a },
    { 0x3f,0x92,0x92,0xad }, { 0x21,0x9d,0x9d,0xbc },
    { 0x70,0x38,0x38,0x48 }, { 0xf1,0xf5,0xf5,0x04 },
    { 0x63,0xbc,0xbc,0xdf }, { 0x77,0xb6,0xb6,0xc1 },
    { 0xaf,0xda,0xda,0x75 }, { 0x42,0x21,0x21,0x63 },
    { 0x20,0x10,0x10,0x30 }, { 0xe5,0xff,0xff,0x1a },
    { 0xfd,0xf3,0xf3,0x0e }, { 0xbf,0xd2,0xd2,0x6d },
    { 0x81,0xcd,0xcd,0x4c }, { 0x18,0x0c,0x0c,0x14 },
    { 0x26,0x13,0x13,0x35 }, { 0xc3,0xec,0xec,0x2f },
    { 0xbe,0x5f,0x5f,0xe1 }, { 0x35,0x97,0x97,0xa2 },
    { 0x88,0x44,0x44,0xcc }, { 0x2e,0x17,0x17,0x39 },
    { 0x93,0xc4,0xc4,0x57 }, { 0x55,0xa7,0xa7,0xf2 },
    { 0xfc,0x7e,0x7e,0x82 }, { 0x7a,0x3d,0x3d,0x47 },
    { 0xc8,0x64,0x64,0xac }, { 0xba,0x5d,0x5d,0xe7 },
    { 0x32,0x19,0x19,0x2b }, { 0xe6,0x73,0x73,0x95 },
    { 0xc0,0x60,0x60,0xa0 }, { 0x19,0x81,0x81,0x98 },
    { 0x9e,0x4f,0x4f,0xd1 }, { 0xa3,0xdc,0xdc,0x7f },
    { 0x44,0x22,0x22,0x66 }, { 0x54,0x2a,0x2a,0x7e },
    { 0x3b,0x90,0x90,0xab }, { 0x0b,0x88,0x88,0x83 },
    { 0x8c,0x46,0x46,0xca }, { 0xc7,0xee,0xee,0x29 },
    { 0x6b,0xb8,0xb8,0xd3 }, { 0x28,0x14,0x14,0x3c },
    { 0xa7,0xde,0xde,0x79 }, { 0xbc,0x5e,0x5e,0xe2 },
    { 0x16,0x0b,0x0b,0x1d }, { 0xad,0xdb,0xdb,0x76 },
    { 0xdb,0xe0,0xe0,0x3b }, { 0x64,0x32,0x32,0x56 },
    { 0x74,0x3a,0x3a,0x4e }, { 0x14,0x0a,0x0a,0x1e },
    { 0x92,0x49,0x49,0xdb }, { 0x0c,0x06,0x06,0x0a },
    { 0x48,0x24,0x24,0x6c }, { 0xb8,0x5c,0x5c,0xe4 },
    { 0x9f,0xc2,0xc2,0x5d }, { 0xbd,0xd3,0xd3,0x6e },
    { 0x43,0xac,0xac,0xef }, { 0xc4,0x62,0x62,0xa6 },
    { 0x39,0x91,0x91,0xa8 }, { 0x31,0x95,0x95,0xa4 },
    { 0xd3,0xe4,0xe4,0x37 }, { 0xf2,0x79,0x79,0x8b },
    { 0xd5,0xe7,0xe7,0x32 }, { 0x8b,0xc8,0xc8,0x43 },
    { 0x6e,0x37,0x37,0x59 }, { 0xda,0x6d,0x6d,0xb7 },
    { 0x01,0x8d,0x8d,0x8c }, { 0xb1,0xd5,0xd5,0x64 },
    { 0x9c,0x4e,0x4e,0xd2 }, { 0x49,0xa9,0xa9,0xe0 },
    { 0xd8,0x6c,0x6c,0xb4 }, { 0xac,0x56,0x56,0xfa },
    { 0xf3,0xf4,0xf4,0x07 }, { 0xcf,0xea,0xea,0x25 },
    { 0xca,0x65,0x65,0xaf }, { 0xf4,0x7a,0x7a,0x8e },
    { 0x47,0xae,0xae,0xe9 }, { 0x10,0x08,0x08,0x18 },
    { 0x6f,0xba,0xba,0xd5 }, { 0xf0,0x78,0x78,0x88 },
    { 0x4a,0x25,0x25,0x6f }, { 0x5c,0x2e,0x2e,0x72 },
    { 0x38,0x1c,0x1c,0x24 }, { 0x57,0xa6,0xa6,0xf1 },
    { 0x73,0xb4,0xb4,0xc7 }, { 0x97,0xc6,0xc6,0x51 },
    { 0xcb,0xe8,0xe8,0x23 }, { 0xa1,0xdd,0xdd,0x7c },
    { 0xe8,0x74,0x74,0x9c }, { 0x3e,0x1f,0x1f,0x21 },
    { 0x96,0x4b,0x4b,0xdd }, { 0x61,0xbd,0xbd,0xdc },
    { 0x0d,0x8b,0x8b,0x86 }, { 0x0f,0x8a,0x8a,0x85 },
    { 0xe0,0x70,0x70,0x90 }, { 0x7c,0x3e,0x3e,0x42 },
    { 0x71,0xb5,0xb5,0xc4 }, { 0xcc,0x66,0x66,0xaa },
    { 0x90,0x48,0x48,0xd8 }, { 0x06,0x03,0x03,0x05 },
    { 0xf7,0xf6,0xf6,0x01 }, { 0x1c,0x0e,0x0e,0x12 },
    { 0xc2,0x61,0x61,0xa3 }, { 0x6a,0x35,0x35,0x5f },
    { 0xae,0x57,0x57,0xf9 }, { 0x69,0xb9,0xb9,0xd0 },
    { 0x17,0x86,0x86,0x91 }, { 0x99,0xc1,0xc1,0x58 },
    { 0x3a,0x1d,0x1d,0x27 }, { 0x27,0x9e,0x9e,0xb9 },
    { 0xd9,0xe1,0xe1,0x38 }, { 0xeb,0xf8,0xf8,0x13 },
    { 0x2b,0x98,0x98,0xb3 }, { 0x22,0x11,0x11,0x33 },
    { 0xd2,0x69,0x69,0xbb }, { 0xa9,0xd9,0xd9,0x70 },
    { 0x07,0x8e,0x8e,0x89 }, { 0x33,0x94,0x94,0xa7 },
    { 0x2d,0x9b,0x9b,0xb6 }, { 0x3c,0x1e,0x1e,0x22 },
    { 0x15,0x87,0x87,0x92 }, { 0xc9,0xe9,0xe9,0x20 },
    { 0x87,0xce,0xce,0x49 }, { 0xaa,0x55,0x55,0xff },
    { 0x50,0x28,0x28,0x78 }, { 0xa5,0xdf,0xdf,0x7a },
    { 0x03,0x8c,0x8c,0x8f }, { 0x59,0xa1,0xa1,0xf8 },
    { 0x09,0x89,0x89,0x80 }, { 0x1a,0x0d,0x0d,0x17 },
    { 0x65,0xbf,0xbf,0xda }, { 0xd7,0xe6,0xe6,0x31 },
    { 0x84,0x42,0x42,0xc6 }, { 0xd0,0x68,0x68,0xb8 },
    { 0x82,0x41,0x41,0xc3 }, { 0x29,0x99,0x99,0xb0 },
    { 0x5a,0x2d,0x2d,0x77 }, { 0x1e,0x0f,0x0f,0x11 },
    { 0x7b,0xb0,0xb0,0xcb }, { 0xa8,0x54,0x54,0xfc },
    { 0x6d,0xbb,0xbb,0xd6 }, { 0x2c,0x16,0x16,0x3a }
};

static const byte T2[256][4] = {
    { 0xa5,0xc6,0x63,0x63 }, { 0x84,0xf8,0x7c,0x7c },
    { 0x99,0xee,0x77,0x77 }, { 0x8d,0xf6,0x7b,0x7b },
    { 0x0d,0xff,0xf2,0xf2 }, { 0xbd,0xd6,0x6b,0x6b },
    { 0xb1,0xde,0x6f,0x6f }, { 0x54,0x91,0xc5,0xc5 },
    { 0x50,0x60,0x30,0x30 }, { 0x03,0x02,0x01,0x01 },
    { 0xa9,0xce,0x67,0x67 }, { 0x7d,0x56,0x2b,0x2b },
    { 0x19,0xe7,0xfe,0xfe }, { 0x62,0xb5,0xd7,0xd7 },
    { 0xe6,0x4d,0xab,0xab }, { 0x9a,0xec,0x76,0x76 },
    { 0x45,0x8f,0xca,0xca }, { 0x9d,0x1f,0x82,0x82 },
    { 0x40,0x89,0xc9,0xc9 }, { 0x87,0xfa,0x7d,0x7d },
    { 0x15,0xef,0xfa,0xfa }, { 0xeb,0xb2,0x59,0x59 },
    { 0xc9,0x8e,0x47,0x47 }, { 0x0b,0xfb,0xf0,0xf0 },
    { 0xec,0x41,0xad,0xad }, { 0x67,0xb3,0xd4,0xd4 },
    { 0xfd,0x5f,0xa2,0xa2 }, { 0xea,0x45,0xaf,0xaf },
    { 0xbf,0x23,0x9c,0x9c }, { 0xf7,0x53,0xa4,0xa4 },
    { 0x96,0xe4,0x72,0x72 }, { 0x5b,0x9b,0xc0,0xc0 },
    { 0xc2,0x75,0xb7,0xb7 }, { 0x1c,0xe1,0xfd,0xfd },
    { 0xae,0x3d,0x93,0x93 }, { 0x6a,0x4c,0x26,0x26 },
    { 0x5a,0x6c,0x36,0x36 }, { 0x41,0x7e,0x3f,0x3f },
    { 0x02,0xf5,0xf7,0xf7 }, { 0x4f,0x83,0xcc,0xcc },
    { 0x5c,0x68,0x34,0x34 }, { 0xf4,0x51,0xa5,0xa5 },
    { 0x34,0xd1,0xe5,0xe5 }, { 0x08,0xf9,0xf1,0xf1 },
    { 0x93,0xe2,0x71,0x71 }, { 0x73,0xab,0xd8,0xd8 },
    { 0x53,0x62,0x31,0x31 }, { 0x3f,0x2a,0x15,0x15 },
    { 0x0c,0x08,0x04,0x04 }, { 0x52,0x95,0xc7,0xc7 },
    { 0x65,0x46,0x23,0x23 }, { 0x5e,0x9d,0xc3,0xc3 },
    { 0x28,0x30,0x18,0x18 }, { 0xa1,0x37,0x96,0x96 },
    { 0x0f,0x0a,0x05,0x05 }, { 0xb5,0x2f,0x9a,0x9a },
    { 0x09,0x0e,0x07,0x07 }, { 0x36,0x24,0x12,0x12 },
    { 0x9b,0x1b,0x80,0x80 }, { 0x3d,0xdf,0xe2,0xe2 },
    { 0x26,0xcd,0xeb,0xeb }, { 0x69,0x4e,0x27,0x27 },
    { 0xcd,0x7f,0xb2,0xb2 }, { 0x9f,0xea,0x75,0x75 },
    { 0x1b,0x12,0x09,0x09 }, { 0x9e,0x1d,0x83,0x83 },
    { 0x74,0x58,0x2c,0x2c }, { 0x2e,0x34,0x1a,0x1a },
    { 0x2d,0x36,0x1b,0x1b }, { 0xb2,0xdc,0x6e,0x6e },
    { 0xee,0xb4,0x5a,0x5a }, { 0xfb,0x5b,0xa0,0xa0 },
    { 0xf6,0xa4,0x52,0x52 }, { 0x4d,0x76,0x3b,0x3b },
    { 0x61,0xb7,0xd6,0xd6 }, { 0xce,0x7d,0xb3,0xb3 },
    { 0x7b,0x52,0x29,0x29 }, { 0x3e,0xdd,0xe3,0xe3 },
    { 0x71,0x5e,0x2f,0x2f }, { 0x97,0x13,0x84,0x84 },
    { 0xf5,0xa6,0x53,0x53 }, { 0x68,0xb9,0xd1,0xd1 },
    { 0x00,0x00,0x00,0x00 }, { 0x2c,0xc1,0xed,0xed },
    { 0x60,0x40,0x20,0x20 }, { 0x1f,0xe3,0xfc,0xfc },
    { 0xc8,0x79,0xb1,0xb1 }, { 0xed,0xb6,0x5b,0x5b },
    { 0xbe,0xd4,0x6a,0x6a }, { 0x46,0x8d,0xcb,0xcb },
    { 0xd9,0x67,0xbe,0xbe }, { 0x4b,0x72,0x39,0x39 },
    { 0xde,0x94,0x4a,0x4a }, { 0xd4,0x98,0x4c,0x4c },
    { 0xe8,0xb0,0x58,0x58 }, { 0x4a,0x85,0xcf,0xcf },
    { 0x6b,0xbb,0xd0,0xd0 }, { 0x2a,0xc5,0xef,0xef },
    { 0xe5,0x4f,0xaa,0xaa }, { 0x16,0xed,0xfb,0xfb },
    { 0xc5,0x86,0x43,0x43 }, { 0xd7,0x9a,0x4d,0x4d },
    { 0x55,0x66,0x33,0x33 }, { 0x94,0x11,0x85,0x85 },
    { 0xcf,0x8a,0x45,0x45 }, { 0x10,0xe9,0xf9,0xf9 },
    { 0x06,0x04,0x02,0x02 }, { 0x81,0xfe,0x7f,0x7f },
    { 0xf0,0xa0,0x50,0x50 }, { 0x44,0x78,0x3c,0x3c },
    { 0xba,0x25,0x9f,0x9f }, { 0xe3,0x4b,0xa8,0xa8 },
    { 0xf3,0xa2,0x51,0x51 }, { 0xfe,0x5d,0xa3,0xa3 },
    { 0xc0,0x80,0x40,0x40 }, { 0x8a,0x05,0x8f,0x8f },
    { 0xad,0x3f,0x92,0x92 }, { 0xbc,0x21,0x9d,0x9d },
    { 0x48,0x70,0x38,0x38 }, { 0x04,0xf1,0xf5,0xf5 },
    { 0xdf,0x63,0xbc,0xbc }, { 0xc1,0x77,0xb6,0xb6 },
    { 0x75,0xaf,0xda,0xda }, { 0x63,0x42,0x21,0x21 },
    { 0x30,0x20,0x10,0x10 }, { 0x1a,0xe5,0xff,0xff },
    { 0x0e,0xfd,0xf3,0xf3 }, { 0x6d,0xbf,0xd2,0xd2 },
    { 0x4c,0x81,0xcd,0xcd }, { 0x14,0x18,0x0c,0x0c },
    { 0x35,0x26,0x13,0x13 }, { 0x2f,0xc3,0xec,0xec },
    { 0xe1,0xbe,0x5f,0x5f }, { 0xa2,0x35,0x97,0x97 },
    { 0xcc,0x88,0x44,0x44 }, { 0x39,0x2e,0x17,0x17 },
    { 0x57,0x93,0xc4,0xc4 }, { 0xf2,0x55,0xa7,0xa7 },
    { 0x82,0xfc,0x7e,0x7e }, { 0x47,0x7a,0x3d,0x3d },
    { 0xac,0xc8,0x64,0x64 }, { 0xe7,0xba,0x5d,0x5d },
    { 0x2b,0x32,0x19,0x19 }, { 0x95,0xe6,0x73,0x73 },
    { 0xa0,0xc0,0x60,0x60 }, { 0x98,0x19,0x81,0x81 },
    { 0xd1,0x9e,0x4f,0x4f }, { 0x7f,0xa3,0xdc,0xdc },
    { 0x66,0x44,0x22,0x22 }, { 0x7e,0x54,0x2a,0x2a },
    { 0xab,0x3b,0x90,0x90 }, { 0x83,0x0b,0x88,0x88 },
    { 0xca,0x8c,0x46,0x46 }, { 0x29,0xc7,0xee,0xee },
    { 0xd3,0x6b,0xb8,0xb8 }, { 0x3c,0x28,0x14,0x14 },
    { 0x79,0xa7,0xde,0xde }, { 0xe2,0xbc,0x5e,0x5e },
    { 0x1d,0x16,0x0b,0x0b }, { 0x76,0xad,0xdb,0xdb },
    { 0x3b,0xdb,0xe0,0xe0 }, { 0x56,0x64,0x32,0x32 },
    { 0x4e,0x74,0x3a,0x3a }, { 0x1e,0x14,0x0a,0x0a },
    { 0xdb,0x92,0x49,0x49 }, { 0x0a,0x0c,0x06,0x06 },
    { 0x6c,0x48,0x24,0x24 }, { 0xe4,0xb8,0x5c,0x5c },
    { 0x5d,0x9f,0xc2,0xc2 }, { 0x6e,0xbd,0xd3,0xd3 },
    { 0xef,0x43,0xac,0xac }, { 0xa6,0xc4,0x62,0x62 },
    { 0xa8,0x39,0x91,0x91 }, { 0xa4,0x31,0x95,0x95 },
    { 0x37,0xd3,0xe4,0xe4 }, { 0x8b,0xf2,0x79,0x79 },
    { 0x32,0xd5,0xe7,0xe7 }, { 0x43,0x8b,0xc8,0xc8 },
    { 0x59,0x6e,0x37,0x37 }, { 0xb7,0xda,0x6d,0x6d },
    { 0x8c,0x01,0x8d,0x8d }, { 0x64,0xb1,0xd5,0xd5 },
    { 0xd2,0x9c,0x4e,0x4e }, { 0xe0,0x49,0xa9,0xa9 },
    { 0xb4,0xd8,0x6c,0x6c }, { 0xfa,0xac,0x56,0x56 },
    { 0x07,0xf3,0xf4,0xf4 }, { 0x25,0xcf,0xea,0xea },
    { 0xaf,0xca,0x65,0x65 }, { 0x8e,0xf4,0x7a,0x7a },
    { 0xe9,0x47,0xae,0xae }, { 0x18,0x10,0x08,0x08 },
    { 0xd5,0x6f,0xba,0xba }, { 0x88,0xf0,0x78,0x78 },
    { 0x6f,0x4a,0x25,0x25 }, { 0x72,0x5c,0x2e,0x2e },
    { 0x24,0x38,0x1c,0x1c }, { 0xf1,0x57,0xa6,0xa6 },
    { 0xc7,0x73,0xb4,0xb4 }, { 0x51,0x97,0xc6,0xc6 },
    { 0x23,0xcb,0xe8,0xe8 }, { 0x7c,0xa1,0xdd,0xdd },
    { 0x9c,0xe8,0x74,0x74 }, { 0x21,0x3e,0x1f,0x1f },
    { 0xdd,0x96,0x4b,0x4b }, { 0xdc,0x61,0xbd,0xbd },
    { 0x86,0x0d,0x8b,0x8b }, { 0x85,0x0f,0x8a,0x8a },
    { 0x90,0xe0,0x70,0x70 }, { 0x42,0x7c,0x3e,0x3e },
    { 0xc4,0x71,0xb5,0xb5 }, { 0xaa,0xcc,0x66,0x66 },
    { 0xd8,0x90,0x48,0x48 }, { 0x05,0x06,0x03,0x03 },
    { 0x01,0xf7,0xf6,0xf6 }, { 0x12,0x1c,0x0e,0x0e },
    { 0xa3,0xc2,0x61,0x61 }, { 0x5f,0x6a,0x35,0x35 },
    { 0xf9,0xae,0x57,0x57 }, { 0xd0,0x69,0xb9,0xb9 },
    { 0x91,0x17,0x86,0x86 }, { 0x58,0x99,0xc1,0xc1 },
    { 0x27,0x3a,0x1d,0x1d }, { 0xb9,0x27,0x9e,0x9e },
    { 0x38,0xd9,0xe1,0xe1 }, { 0x13,0xeb,0xf8,0xf8 },
    { 0xb3,0x2b,0x98,0x98 }, { 0x33,0x22,0x11,0x11 },
    { 0xbb,0xd2,0x69,0x69 }, { 0x70,0xa9,0xd9,0xd9 },
    { 0x89,0x07,0x8e,0x8e }, { 0xa7,0x33,0x94,0x94 },
    { 0xb6,0x2d,0x9b,0x9b }, { 0x22,0x3c,0x1e,0x1e },
    { 0x92,0x15,0x87,0x87 }, { 0x20,0xc9,0xe9,0xe9 },
    { 0x49,0x87,0xce,0xce }, { 0xff,0xaa,0x55,0x55 },
    { 0x78,0x50,0x28,0x28 }, { 0x7a,0xa5,0xdf,0xdf },
    { 0x8f,0x03,0x8c,0x8c }, { 0xf8,0x59,0xa1,0xa1 },
    { 0x80,0x09,0x89,0x89 }, { 0x17,0x1a,0x0d,0x0d },
    { 0xda,0x65,0xbf,0xbf }, { 0x31,0xd7,0xe6,0xe6 },
    { 0xc6,0x84,0x42,0x42 }, { 0xb8,0xd0,0x68,0x68 },
    { 0xc3,0x82,0x41,0x41 }, { 0xb0,0x29,0x99,0x99 },
    { 0x77,0x5a,0x2d,0x2d }, { 0x11,0x1e,0x0f,0x0f },
    { 0xcb,0x7b,0xb0,0xb0 }, { 0xfc,0xa8,0x54,0x54 },
    { 0xd6,0x6d,0xbb,0xbb }, { 0x3a,0x2c,0x16,0x16 }
};

static const byte T3[256][4] = {
    { 0x63,0xa5,0xc6,0x63 }, { 0x7c,0x84,0xf8,0x7c },
    { 0x77,0x99,0xee,0x77 }, { 0x7b,0x8d,0xf6,0x7b },
    { 0xf2,0x0d,0xff,0xf2 }, { 0x6b,0xbd,0xd6,0x6b },
    { 0x6f,0xb1,0xde,0x6f }, { 0xc5,0x54,0x91,0xc5 },
    { 0x30,0x50,0x60,0x30 }, { 0x01,0x03,0x02,0x01 },
    { 0x67,0xa9,0xce,0x67 }, { 0x2b,0x7d,0x56,0x2b },
    { 0xfe,0x19,0xe7,0xfe }, { 0xd7,0x62,0xb5,0xd7 },
    { 0xab,0xe6,0x4d,0xab }, { 0x76,0x9a,0xec,0x76 },
    { 0xca,0x45,0x8f,0xca }, { 0x82,0x9d,0x1f,0x82 },
    { 0xc9,0x40,0x89,0xc9 }, { 0x7d,0x87,0xfa,0x7d },
    { 0xfa,0x15,0xef,0xfa }, { 0x59,0xeb,0xb2,0x59 },
    { 0x47,0xc9,0x8e,0x47 }, { 0xf0,0x0b,0xfb,0xf0 },
    { 0xad,0xec,0x41,0xad }, { 0xd4,0x67,0xb3,0xd4 },
    { 0xa2,0xfd,0x5f,0xa2 }, { 0xaf,0xea,0x45,0xaf },
    { 0x9c,0xbf,0x23,0x9c }, { 0xa4,0xf7,0x53,0xa4 },
    { 0x72,0x96,0xe4,0x72 }, { 0xc0,0x5b,0x9b,0xc0 },
    { 0xb7,0xc2,0x75,0xb7 }, { 0xfd,0x1c,0xe1,0xfd },
    { 0x93,0xae,0x3d,0x93 }, { 0x26,0x6a,0x4c,0x26 },
    { 0x36,0x5a,0x6c,0x36 }, { 0x3f,0x41,0x7e,0x3f },
    { 0xf7,0x02,0xf5,0xf7 }, { 0xcc,0x4f,0x83,0xcc },
    { 0x34,0x5c,0x68,0x34 }, { 0xa5,0xf4,0x51,0xa5 },
    { 0xe5,0x34,0xd1,0xe5 }, { 0xf1,0x08,0xf9,0xf1 },
    { 0x71,0x93,0xe2,0x71 }, { 0xd8,0x73,0xab,0xd8 },
    { 0x31,0x53,0x62,0x31 }, { 0x15,0x3f,0x2a,0x15 },
    { 0x04,0x0c,0x08,0x04 }, { 0xc7,0x52,0x95,0xc7 },
    { 0x23,0x65,0x46,0x23 }, { 0xc3,0x5e,0x9d,0xc3 },
    { 0x18,0x28,0x30,0x18 }, { 0x96,0xa1,0x37,0x96 },
    { 0x05,0x0f,0x0a,0x05 }, { 0x9a,0xb5,0x2f,0x9a },
    { 0x07,0x09,0x0e,0x07 }, { 0x12,0x36,0x24,0x12 },
    { 0x80,0x9b,0x1b,0x80 }, { 0xe2,0x3d,0xdf,0xe2 },
    { 0xeb,0x26,0xcd,0xeb }, { 0x27,0x69,0x4e,0x27 },
    { 0xb2,0xcd,0x7f,0xb2 }, { 0x75,0x9f,0xea,0x75 },
    { 0x09,0x1b,0x12,0x09 }, { 0x83,0x9e,0x1d,0x83 },
    { 0x2c,0x74,0x58,0x2c }, { 0x1a,0x2e,0x34,0x1a },
    { 0x1b,0x2d,0x36,0x1b }, { 0x6e,0xb2,0xdc,0x6e },
    { 0x5a,0xee,0xb4,0x5a }, { 0xa0,0xfb,0x5b,0xa0 },
    { 0x52,0xf6,0xa4,0x52 }, { 0x3b,0x4d,0x76,0x3b },
    { 0xd6,0x61,0xb7,0xd6 }, { 0xb3,0xce,0x7d,0xb3 },
    { 0x29,0x7b,0x52,0x29 }, { 0xe3,0x3e,0xdd,0xe3 },
    { 0x2f,0x71,0x5e,0x2f }, { 0x84,0x97,0x13,0x84 },
    { 0x53,0xf5,0xa6,0x53 }, { 0xd1,0x68,0xb9,0xd1 },
    { 0x00,0x00,0x00,0x00 }, { 0xed,0x2c,0xc1,0xed },
    { 0x20,0x60,0x40,0x20 }, { 0xfc,0x1f,0xe3,0xfc },
    { 0xb1,0xc8,0x79,0xb1 }, { 0x5b,0xed,0xb6,0x5b },
    { 0x6a,0xbe,0xd4,0x6a }, { 0xcb,0x46,0x8d,0xcb },
    { 0xbe,0xd9,0x67,0xbe }, { 0x39,0x4b,0x72,0x39 },
    { 0x4a,0xde,0x94,0x4a }, { 0x4c,0xd4,0x98,0x4c },
    { 0x58,0xe8,0xb0,0x58 }, { 0xcf,0x4a,0x85,0xcf },
    { 0xd0,0x6b,0xbb,0xd0 }, { 0xef,0x2a,0xc5,0xef },
    { 0xaa,0xe5,0x4f,0xaa }, { 0xfb,0x16,0xed,0xfb },
    { 0x43,0xc5,0x86,0x43 }, { 0x4d,0xd7,0x9a,0x4d },
    { 0x33,0x55,0x66,0x33 }, { 0x85,0x94,0x11,0x85 },
    { 0x45,0xcf,0x8a,0x45 }, { 0xf9,0x10,0xe9,0xf9 },
    { 0x02,0x06,0x04,0x02 }, { 0x7f,0x81,0xfe,0x7f },
    { 0x50,0xf0,0xa0,0x50 }, { 0x3c,0x44,0x78,0x3c },
    { 0x9f,0xba,0x25,0x9f }, { 0xa8,0xe3,0x4b,0xa8 },
    { 0x51,0xf3,0xa2,0x51 }, { 0xa3,0xfe,0x5d,0xa3 },
    { 0x40,0xc0,0x80,0x40 }, { 0x8f,0x8a,0x05,0x8f },
    { 0x92,0xad,0x3f,0x92 }, { 0x9d,0xbc,0x21,0x9d },
    { 0x38,0x48,0x70,0x38 }, { 0xf5,0x04,0xf1,0xf5 },
    { 0xbc,0xdf,0x63,0xbc }, { 0xb6,0xc1,0x77,0xb6 },
    { 0xda,0x75,0xaf,0xda }, { 0x21,0x63,0x42,0x21 },
    { 0x10,0x30,0x20,0x10 }, { 0xff,0x1a,0xe5,0xff },
    { 0xf3,0x0e,0xfd,0xf3 }, { 0xd2,0x6d,0xbf,0xd2 },
    { 0xcd,0x4c,0x81,0xcd }, { 0x0c,0x14,0x18,0x0c },
    { 0x13,0x35,0x26,0x13 }, { 0xec,0x2f,0xc3,0xec },
    { 0x5f,0xe1,0xbe,0x5f }, { 0x97,0xa2,0x35,0x97 },
    { 0x44,0xcc,0x88,0x44 }, { 0x17,0x39,0x2e,0x17 },
    { 0xc4,0x57,0x93,0xc4 }, { 0xa7,0xf2,0x55,0xa7 },
    { 0x7e,0x82,0xfc,0x7e }, { 0x3d,0x47,0x7a,0x3d },
    { 0x64,0xac,0xc8,0x64 }, { 0x5d,0xe7,0xba,0x5d },
    { 0x19,0x2b,0x32,0x19 }, { 0x73,0x95,0xe6,0x73 },
    { 0x60,0xa0,0xc0,0x60 }, { 0x81,0x98,0x19,0x81 },
    { 0x4f,0xd1,0x9e,0x4f }, { 0xdc,0x7f,0xa3,0xdc },
    { 0x22,0x66,0x44,0x22 }, { 0x2a,0x7e,0x54,0x2a },
    { 0x90,0xab,0x3b,0x90 }, { 0x88,0x83,0x0b,0x88 },
    { 0x46,0xca,0x8c,0x46 }, { 0xee,0x29,0xc7,0xee },
    { 0xb8,0xd3,0x6b,0xb8 }, { 0x14,0x3c,0x28,0x14 },
    { 0xde,0x79,0xa7,0xde }, { 0x5e,0xe2,0xbc,0x5e },
    { 0x0b,0x1d,0x16,0x0b }, { 0xdb,0x76,0xad,0xdb },
    { 0xe0,0x3b,0xdb,0xe0 }, { 0x32,0x56,0x64,0x32 },
    { 0x3a,0x4e,0x74,0x3a }, { 0x0a,0x1e,0x14,0x0a },
    { 0x49,0xdb,0x92,0x49 }, { 0x06,0x0a,0x0c,0x06 },
    { 0x24,0x6c,0x48,0x24 }, { 0x5c,0xe4,0xb8,0x5c },
    { 0xc2,0x5d,0x9f,0xc2 }, { 0xd3,0x6e,0xbd,0xd3 },
    { 0xac,0xef,0x43,0xac }, { 0x62,0xa6,0xc4,0x62 },
    { 0x91,0xa8,0x39,0x91 }, { 0x95,0xa4,0x31,0x95 },
    { 0xe4,0x37,0xd3,0xe4 }, { 0x79,0x8b,0xf2,0x79 },
    { 0xe7,0x32,0xd5,0xe7 }, { 0xc8,0x43,0x8b,0xc8 },
    { 0x37,0x59,0x6e,0x37 }, { 0x6d,0xb7,0xda,0x6d },
    { 0x8d,0x8c,0x01,0x8d }, { 0xd5,0x64,0xb1,0xd5 },
    { 0x4e,0xd2,0x9c,0x4e }, { 0xa9,0xe0,0x49,0xa9 },
    { 0x6c,0xb4,0xd8,0x6c }, { 0x56,0xfa,0xac,0x56 },
    { 0xf4,0x07,0xf3,0xf4 }, { 0xea,0x25,0xcf,0xea },
    { 0x65,0xaf,0xca,0x65 }, { 0x7a,0x8e,0xf4,0x7a },
    { 0xae,0xe9,0x47,0xae }, { 0x08,0x18,0x10,0x08 },
    { 0xba,0xd5,0x6f,0xba }, { 0x78,0x88,0xf0,0x78 },
    { 0x25,0x6f,0x4a,0x25 }, { 0x2e,0x72,0x5c,0x2e },
    { 0x1c,0x24,0x38,0x1c }, { 0xa6,0xf1,0x57,0xa6 },
    { 0xb4,0xc7,0x73,0xb4 }, { 0xc6,0x51,0x97,0xc6 },
    { 0xe8,0x23,0xcb,0xe8 }, { 0xdd,0x7c,0xa1,0xdd },
    { 0x74,0x9c,0xe8,0x74 }, { 0x1f,0x21,0x3e,0x1f },
    { 0x4b,0xdd,0x96,0x4b }, { 0xbd,0xdc,0x61,0xbd },
    { 0x8b,0x86,0x0d,0x8b }, { 0x8a,0x85,0x0f,0x8a },
    { 0x70,0x90,0xe0,0x70 }, { 0x3e,0x42,0x7c,0x3e },
    { 0xb5,0xc4,0x71,0xb5 }, { 0x66,0xaa,0xcc,0x66 },
    { 0x48,0xd8,0x90,0x48 }, { 0x03,0x05,0x06,0x03 },
    { 0xf6,0x01,0xf7,0xf6 }, { 0x0e,0x12,0x1c,0x0e },
    { 0x61,0xa3,0xc2,0x61 }, { 0x35,0x5f,0x6a,0x35 },
    { 0x57,0xf9,0xae,0x57 }, { 0xb9,0xd0,0x69,0xb9 },
    { 0x86,0x91,0x17,0x86 }, { 0xc1,0x58,0x99,0xc1 },
    { 0x1d,0x27,0x3a,0x1d }, { 0x9e,0xb9,0x27,0x9e },
    { 0xe1,0x38,0xd9,0xe1 }, { 0xf8,0x13,0xeb,0xf8 },
    { 0x98,0xb3,0x2b,0x98 }, { 0x11,0x33,0x22,0x11 },
    { 0x69,0xbb,0xd2,0x69 }, { 0xd9,0x70,0xa9,0xd9 },
    { 0x8e,0x89,0x07,0x8e }, { 0x94,0xa7,0x33,0x94 },
    { 0x9b,0xb6,0x2d,0x9b }, { 0x1e,0x22,0x3c,0x1e },
    { 0x87,0x92,0x15,0x87 }, { 0xe9,0x20,0xc9,0xe9 },
    { 0xce,0x49,0x87,0xce }, { 0x55,0xff,0xaa,0x55 },
    { 0x28,0x78,0x50,0x28 }, { 0xdf,0x7a,0xa5,0xdf },
    { 0x8c,0x8f,0x03,0x8c }, { 0xa1,0xf8,0x59,0xa1 },
    { 0x89,0x80,0x09,0x89 }, { 0x0d,0x17,0x1a,0x0d },
    { 0xbf,0xda,0x65,0xbf }, { 0xe6,0x31,0xd7,0xe6 },
    { 0x42,0xc6,0x84,0x42 }, { 0x68,0xb8,0xd0,0x68 },
    { 0x41,0xc3,0x82,0x41 }, { 0x99,0xb0,0x29,0x99 },
    { 0x2d,0x77,0x5a,0x2d }, { 0x0f,0x11,0x1e,0x0f },
    { 0xb0,0xcb,0x7b,0xb0 }, { 0x54,0xfc,0xa8,0x54 },
    { 0xbb,0xd6,0x6d,0xbb }, { 0x16,0x3a,0x2c,0x16 }
};

static const byte T4[256][4] = {
    { 0x63,0x63,0xa5,0xc6 }, { 0x7c,0x7c,0x84,0xf8 },
    { 0x77,0x77,0x99,0xee }, { 0x7b,0x7b,0x8d,0xf6 },
    { 0xf2,0xf2,0x0d,0xff }, { 0x6b,0x6b,0xbd,0xd6 },
    { 0x6f,0x6f,0xb1,0xde }, { 0xc5,0xc5,0x54,0x91 },
    { 0x30,0x30,0x50,0x60 }, { 0x01,0x01,0x03,0x02 },
    { 0x67,0x67,0xa9,0xce }, { 0x2b,0x2b,0x7d,0x56 },
    { 0xfe,0xfe,0x19,0xe7 }, { 0xd7,0xd7,0x62,0xb5 },
    { 0xab,0xab,0xe6,0x4d }, { 0x76,0x76,0x9a,0xec },
    { 0xca,0xca,0x45,0x8f }, { 0x82,0x82,0x9d,0x1f },
    { 0xc9,0xc9,0x40,0x89 }, { 0x7d,0x7d,0x87,0xfa },
    { 0xfa,0xfa,0x15,0xef }, { 0x59,0x59,0xeb,0xb2 },
    { 0x47,0x47,0xc9,0x8e }, { 0xf0,0xf0,0x0b,0xfb },
    { 0xad,0xad,0xec,0x41 }, { 0xd4,0xd4,0x67,0xb3 },
    { 0xa2,0xa2,0xfd,0x5f }, { 0xaf,0xaf,0xea,0x45 },
    { 0x9c,0x9c,0xbf,0x23 }, { 0xa4,0xa4,0xf7,0x53 },
    { 0x72,0x72,0x96,0xe4 }, { 0xc0,0xc0,0x5b,0x9b },
    { 0xb7,0xb7,0xc2,0x75 }, { 0xfd,0xfd,0x1c,0xe1 },
    { 0x93,0x93,0xae,0x3d }, { 0x26,0x26,0x6a,0x4c },
    { 0x36,0x36,0x5a,0x6c }, { 0x3f,0x3f,0x41,0x7e },
    { 0xf7,0xf7,0x02,0xf5 }, { 0xcc,0xcc,0x4f,0x83 },
    { 0x34,0x34,0x5c,0x68 }, { 0xa5,0xa5,0xf4,0x51 },
    { 0xe5,0xe5,0x34,0xd1 }, { 0xf1,0xf1,0x08,0xf9 },
    { 0x71,0x71,0x93,0xe2 }, { 0xd8,0xd8,0x73,0xab },
    { 0x31,0x31,0x53,0x62 }, { 0x15,0x15,0x3f,0x2a },
    { 0x04,0x04,0x0c,0x08 }, { 0xc7,0xc7,0x52,0x95 },
    { 0x23,0x23,0x65,0x46 }, { 0xc3,0xc3,0x5e,0x9d },
    { 0x18,0x18,0x28,0x30 }, { 0x96,0x96,0xa1,0x37 },
    { 0x05,0x05,0x0f,0x0a }, { 0x9a,0x9a,0xb5,0x2f },
    { 0x07,0x07,0x09,0x0e }, { 0x12,0x12,0x36,0x24 },
    { 0x80,0x80,0x9b,0x1b }, { 0xe2,0xe2,0x3d,0xdf },
    { 0xeb,0xeb,0x26,0xcd }, { 0x27,0x27,0x69,0x4e },
    { 0xb2,0xb2,0xcd,0x7f }, { 0x75,0x75,0x9f,0xea },
    { 0x09,0x09,0x1b,0x12 }, { 0x83,0x83,0x9e,0x1d },
    { 0x2c,0x2c,0x74,0x58 }, { 0x1a,0x1a,0x2e,0x34 },
    { 0x1b,0x1b,0x2d,0x36 }, { 0x6e,0x6e,0xb2,0xdc },
    { 0x5a,0x5a,0xee,0xb4 }, { 0xa0,0xa0,0xfb,0x5b },
    { 0x52,0x52,0xf6,0xa4 }, { 0x3b,0x3b,0x4d,0x76 },
    { 0xd6,0xd6,0x61,0xb7 }, { 0xb3,0xb3,0xce,0x7d },
    { 0x29,0x29,0x7b,0x52 }, { 0xe3,0xe3,0x3e,0xdd },
    { 0x2f,0x2f,0x71,0x5e }, { 0x84,0x84,0x97,0x13 },
    { 0x53,0x53,0xf5,0xa6 }, { 0xd1,0xd1,0x68,0xb9 },
    { 0x00,0x00,0x00,0x00 }, { 0xed,0xed,0x2c,0xc1 },
    { 0x20,0x20,0x60,0x40 }, { 0xfc,0xfc,0x1f,0xe3 },
    { 0xb1,0xb1,0xc8,0x79 }, { 0x5b,0x5b,0xed,0xb6 },
    { 0x6a,0x6a,0xbe,0xd4 }, { 0xcb,0xcb,0x46,0x8d },
    { 0xbe,0xbe,0xd9,0x67 }, { 0x39,0x39,0x4b,0x72 },
    { 0x4a,0x4a,0xde,0x94 }, { 0x4c,0x4c,0xd4,0x98 },
    { 0x58,0x58,0xe8,0xb0 }, { 0xcf,0xcf,0x4a,0x85 },
    { 0xd0,0xd0,0x6b,0xbb }, { 0xef,0xef,0x2a,0xc5 },
    { 0xaa,0xaa,0xe5,0x4f }, { 0xfb,0xfb,0x16,0xed },
    { 0x43,0x43,0xc5,0x86 }, { 0x4d,0x4d,0xd7,0x9a },
    { 0x33,0x33,0x55,0x66 }, { 0x85,0x85,0x94,0x11 },
    { 0x45,0x45,0xcf,0x8a }, { 0xf9,0xf9,0x10,0xe9 },
    { 0x02,0x02,0x06,0x04 }, { 0x7f,0x7f,0x81,0xfe },
    { 0x50,0x50,0xf0,0xa0 }, { 0x3c,0x3c,0x44,0x78 },
    { 0x9f,0x9f,0xba,0x25 }, { 0xa8,0xa8,0xe3,0x4b },
    { 0x51,0x51,0xf3,0xa2 }, { 0xa3,0xa3,0xfe,0x5d },
    { 0x40,0x40,0xc0,0x80 }, { 0x8f,0x8f,0x8a,0x05 },
    { 0x92,0x92,0xad,0x3f }, { 0x9d,0x9d,0xbc,0x21 },
    { 0x38,0x38,0x48,0x70 }, { 0xf5,0xf5,0x04,0xf1 },
    { 0xbc,0xbc,0xdf,0x63 }, { 0xb6,0xb6,0xc1,0x77 },
    { 0xda,0xda,0x75,0xaf }, { 0x21,0x21,0x63,0x42 },
    { 0x10,0x10,0x30,0x20 }, { 0xff,0xff,0x1a,0xe5 },
    { 0xf3,0xf3,0x0e,0xfd }, { 0xd2,0xd2,0x6d,0xbf },
    { 0xcd,0xcd,0x4c,0x81 }, { 0x0c,0x0c,0x14,0x18 },
    { 0x13,0x13,0x35,0x26 }, { 0xec,0xec,0x2f,0xc3 },
    { 0x5f,0x5f,0xe1,0xbe }, { 0x97,0x97,0xa2,0x35 },
    { 0x44,0x44,0xcc,0x88 }, { 0x17,0x17,0x39,0x2e },
    { 0xc4,0xc4,0x57,0x93 }, { 0xa7,0xa7,0xf2,0x55 },
    { 0x7e,0x7e,0x82,0xfc }, { 0x3d,0x3d,0x47,0x7a },
    { 0x64,0x64,0xac,0xc8 }, { 0x5d,0x5d,0xe7,0xba },
    { 0x19,0x19,0x2b,0x32 }, { 0x73,0x73,0x95,0xe6 },
    { 0x60,0x60,0xa0,0xc0 }, { 0x81,0x81,0x98,0x19 },
    { 0x4f,0x4f,0xd1,0x9e }, { 0xdc,0xdc,0x7f,0xa3 },
    { 0x22,0x22,0x66,0x44 }, { 0x2a,0x2a,0x7e,0x54 },
    { 0x90,0x90,0xab,0x3b }, { 0x88,0x88,0x83,0x0b },
    { 0x46,0x46,0xca,0x8c }, { 0xee,0xee,0x29,0xc7 },
    { 0xb8,0xb8,0xd3,0x6b }, { 0x14,0x14,0x3c,0x28 },
    { 0xde,0xde,0x79,0xa7 }, { 0x5e,0x5e,0xe2,0xbc },
    { 0x0b,0x0b,0x1d,0x16 }, { 0xdb,0xdb,0x76,0xad },
    { 0xe0,0xe0,0x3b,0xdb }, { 0x32,0x32,0x56,0x64 },
    { 0x3a,0x3a,0x4e,0x74 }, { 0x0a,0x0a,0x1e,0x14 },
    { 0x49,0x49,0xdb,0x92 }, { 0x06,0x06,0x0a,0x0c },
    { 0x24,0x24,0x6c,0x48 }, { 0x5c,0x5c,0xe4,0xb8 },
    { 0xc2,0xc2,0x5d,0x9f }, { 0xd3,0xd3,0x6e,0xbd },
    { 0xac,0xac,0xef,0x43 }, { 0x62,0x62,0xa6,0xc4 },
    { 0x91,0x91,0xa8,0x39 }, { 0x95,0x95,0xa4,0x31 },
    { 0xe4,0xe4,0x37,0xd3 }, { 0x79,0x79,0x8b,0xf2 },
    { 0xe7,0xe7,0x32,0xd5 }, { 0xc8,0xc8,0x43,0x8b },
    { 0x37,0x37,0x59,0x6e }, { 0x6d,0x6d,0xb7,0xda },
    { 0x8d,0x8d,0x8c,0x01 }, { 0xd5,0xd5,0x64,0xb1 },
    { 0x4e,0x4e,0xd2,0x9c }, { 0xa9,0xa9,0xe0,0x49 },
    { 0x6c,0x6c,0xb4,0xd8 }, { 0x56,0x56,0xfa,0xac },
    { 0xf4,0xf4,0x07,0xf3 }, { 0xea,0xea,0x25,0xcf },
    { 0x65,0x65,0xaf,0xca }, { 0x7a,0x7a,0x8e,0xf4 },
    { 0xae,0xae,0xe9,0x47 }, { 0x08,0x08,0x18,0x10 },
    { 0xba,0xba,0xd5,0x6f }, { 0x78,0x78,0x88,0xf0 },
    { 0x25,0x25,0x6f,0x4a }, { 0x2e,0x2e,0x72,0x5c },
    { 0x1c,0x1c,0x24,0x38 }, { 0xa6,0xa6,0xf1,0x57 },
    { 0xb4,0xb4,0xc7,0x73 }, { 0xc6,0xc6,0x51,0x97 },
    { 0xe8,0xe8,0x23,0xcb }, { 0xdd,0xdd,0x7c,0xa1 },
    { 0x74,0x74,0x9c,0xe8 }, { 0x1f,0x1f,0x21,0x3e },
    { 0x4b,0x4b,0xdd,0x96 }, { 0xbd,0xbd,0xdc,0x61 },
    { 0x8b,0x8b,0x86,0x0d }, { 0x8a,0x8a,0x85,0x0f },
    { 0x70,0x70,0x90,0xe0 }, { 0x3e,0x3e,0x42,0x7c },
    { 0xb5,0xb5,0xc4,0x71 }, { 0x66,0x66,0xaa,0xcc },
    { 0x48,0x48,0xd8,0x90 }, { 0x03,0x03,0x05,0x06 },
    { 0xf6,0xf6,0x01,0xf7 }, { 0x0e,0x0e,0x12,0x1c },
    { 0x61,0x61,0xa3,0xc2 }, { 0x35,0x35,0x5f,0x6a },
    { 0x57,0x57,0xf9,0xae }, { 0xb9,0xb9,0xd0,0x69 },
    { 0x86,0x86,0x91,0x17 }, { 0xc1,0xc1,0x58,0x99 },
    { 0x1d,0x1d,0x27,0x3a }, { 0x9e,0x9e,0xb9,0x27 },
    { 0xe1,0xe1,0x38,0xd9 }, { 0xf8,0xf8,0x13,0xeb },
    { 0x98,0x98,0xb3,0x2b }, { 0x11,0x11,0x33,0x22 },
    { 0x69,0x69,0xbb,0xd2 }, { 0xd9,0xd9,0x70,0xa9 },
    { 0x8e,0x8e,0x89,0x07 }, { 0x94,0x94,0xa7,0x33 },
    { 0x9b,0x9b,0xb6,0x2d }, { 0x1e,0x1e,0x22,0x3c },
    { 0x87,0x87,0x92,0x15 }, { 0xe9,0xe9,0x20,0xc9 },
    { 0xce,0xce,0x49,0x87 }, { 0x55,0x55,0xff,0xaa },
    { 0x28,0x28,0x78,0x50 }, { 0xdf,0xdf,0x7a,0xa5 },
    { 0x8c,0x8c,0x8f,0x03 }, { 0xa1,0xa1,0xf8,0x59 },
    { 0x89,0x89,0x80,0x09 }, { 0x0d,0x0d,0x17,0x1a },
    { 0xbf,0xbf,0xda,0x65 }, { 0xe6,0xe6,0x31,0xd7 },
    { 0x42,0x42,0xc6,0x84 }, { 0x68,0x68,0xb8,0xd0 },
    { 0x41,0x41,0xc3,0x82 }, { 0x99,0x99,0xb0,0x29 },
    { 0x2d,0x2d,0x77,0x5a }, { 0x0f,0x0f,0x11,0x1e },
    { 0xb0,0xb0,0xcb,0x7b }, { 0x54,0x54,0xfc,0xa8 },
    { 0xbb,0xbb,0xd6,0x6d }, { 0x16,0x16,0x3a,0x2c }
};

static const byte T5[256][4] = {
    { 0x51,0xf4,0xa7,0x50 }, { 0x7e,0x41,0x65,0x53 },
    { 0x1a,0x17,0xa4,0xc3 }, { 0x3a,0x27,0x5e,0x96 },
    { 0x3b,0xab,0x6b,0xcb }, { 0x1f,0x9d,0x45,0xf1 },
    { 0xac,0xfa,0x58,0xab }, { 0x4b,0xe3,0x03,0x93 },
    { 0x20,0x30,0xfa,0x55 }, { 0xad,0x76,0x6d,0xf6 },
    { 0x88,0xcc,0x76,0x91 }, { 0xf5,0x02,0x4c,0x25 },
    { 0x4f,0xe5,0xd7,0xfc }, { 0xc5,0x2a,0xcb,0xd7 },
    { 0x26,0x35,0x44,0x80 }, { 0xb5,0x62,0xa3,0x8f },
    { 0xde,0xb1,0x5a,0x49 }, { 0x25,0xba,0x1b,0x67 },
    { 0x45,0xea,0x0e,0x98 }, { 0x5d,0xfe,0xc0,0xe1 },
    { 0xc3,0x2f,0x75,0x02 }, { 0x81,0x4c,0xf0,0x12 },
    { 0x8d,0x46,0x97,0xa3 }, { 0x6b,0xd3,0xf9,0xc6 },
    { 0x03,0x8f,0x5f,0xe7 }, { 0x15,0x92,0x9c,0x95 },
    { 0xbf,0x6d,0x7a,0xeb }, { 0x95,0x52,0x59,0xda },
    { 0xd4,0xbe,0x83,0x2d }, { 0x58,0x74,0x21,0xd3 },
    { 0x49,0xe0,0x69,0x29 }, { 0x8e,0xc9,0xc8,0x44 },
    { 0x75,0xc2,0x89,0x6a }, { 0xf4,0x8e,0x79,0x78 },
    { 0x99,0x58,0x3e,0x6b }, { 0x27,0xb9,0x71,0xdd },
    { 0xbe,0xe1,0x4f,0xb6 }, { 0xf0,0x88,0xad,0x17 },
    { 0xc9,0x20,0xac,0x66 }, { 0x7d,0xce,0x3a,0xb4 },
    { 0x63,0xdf,0x4a,0x18 }, { 0xe5,0x1a,0x31,0x82 },
    { 0x97,0x51,0x33,0x60 }, { 0x62,0x53,0x7f,0x45 },
    { 0xb1,0x64,0x77,0xe0 }, { 0xbb,0x6b,0xae,0x84 },
    { 0xfe,0x81,0xa0,0x1c }, { 0xf9,0x08,0x2b,0x94 },
    { 0x70,0x48,0x68,0x58 }, { 0x8f,0x45,0xfd,0x19 },
    { 0x94,0xde,0x6c,0x87 }, { 0x52,0x7b,0xf8,0xb7 },
    { 0xab,0x73,0xd3,0x23 }, { 0x72,0x4b,0x02,0xe2 },
    { 0xe3,0x1f,0x8f,0x57 }, { 0x66,0x55,0xab,0x2a },
    { 0xb2,0xeb,0x28,0x07 }, { 0x2f,0xb5,0xc2,0x03 },
    { 0x86,0xc5,0x7b,0x9a }, { 0xd3,0x37,0x08,0xa5 },
    { 0x30,0x28,0x87,0xf2 }, { 0x23,0xbf,0xa5,0xb2 },
    { 0x02,0x03,0x6a,0xba }, { 0xed,0x16,0x82,0x5c },
    { 0x8a,0xcf,0x1c,0x2b }, { 0xa7,0x79,0xb4,0x92 },
    { 0xf3,0x07,0xf2,0xf0 }, { 0x4e,0x69,0xe2,0xa1 },
    { 0x65,0xda,0xf4,0xcd }, { 0x06,0x05,0xbe,0xd5 },
    { 0xd1,0x34,0x62,0x1f }, { 0xc4,0xa6,0xfe,0x8a },
    { 0x34,0x2e,0x53,0x9d }, { 0xa2,0xf3,0x55,0xa0 },
    { 0x05,0x8a,0xe1,0x32 }, { 0xa4,0xf6,0xeb,0x75 },
    { 0x0b,0x83,0xec,0x39 }, { 0x40,0x60,0xef,0xaa },
    { 0x5e,0x71,0x9f,0x06 }, { 0xbd,0x6e,0x10,0x51 },
    { 0x3e,0x21,0x8a,0xf9 }, { 0x96,0xdd,0x06,0x3d },
    { 0xdd,0x3e,0x05,0xae }, { 0x4d,0xe6,0xbd,0x46 },
    { 0x91,0x54,0x8d,0xb5 }, { 0x71,0xc4,0x5d,0x05 },
    { 0x04,0x06,0xd4,0x6f }, { 0x60,0x50,0x15,0xff },
    { 0x19,0x98,0xfb,0x24 }, { 0xd6,0xbd,0xe9,0x97 },
    { 0x89,0x40,0x43,0xcc }, { 0x67,0xd9,0x9e,0x77 },
    { 0xb0,0xe8,0x42,0xbd }, { 0x07,0x89,0x8b,0x88 },
    { 0xe7,0x19,0x5b,0x38 }, { 0x79,0xc8,0xee,0xdb },
    { 0xa1,0x7c,0x0a,0x47 }, { 0x7c,0x42,0x0f,0xe9 },
    { 0xf8,0x84,0x1e,0xc9 }, { 0x00,0x00,0x00,0x00 },
    { 0x09,0x80,0x86,0x83 }, { 0x32,0x2b,0xed,0x48 },
    { 0x1e,0x11,0x70,0xac }, { 0x6c,0x5a,0x72,0x4e },
    { 0xfd,0x0e,0xff,0xfb }, { 0x0f,0x85,0x38,0x56 },
    { 0x3d,0xae,0xd5,0x1e }, { 0x36,0x2d,0x39,0x27 },
    { 0x0a,0x0f,0xd9,0x64 }, { 0x68,0x5c,0xa6,0x21 },
    { 0x9b,0x5b,0x54,0xd1 }, { 0x24,0x36,0x2e,0x3a },
    { 0x0c,0x0a,0x67,0xb1 }, { 0x93,0x57,0xe7,0x0f },
    { 0xb4,0xee,0x96,0xd2 }, { 0x1b,0x9b,0x91,0x9e },
    { 0x80,0xc0,0xc5,0x4f }, { 0x61,0xdc,0x20,0xa2 },
    { 0x5a,0x77,0x4b,0x69 }, { 0x1c,0x12,0x1a,0x16 },
    { 0xe2,0x93,0xba,0x0a }, { 0xc0,0xa0,0x2a,0xe5 },
    { 0x3c,0x22,0xe0,0x43 }, { 0x12,0x1b,0x17,0x1d },
    { 0x0e,0x09,0x0d,0x0b }, { 0xf2,0x8b,0xc7,0xad },
    { 0x2d,0xb6,0xa8,0xb9 }, { 0x14,0x1e,0xa9,0xc8 },
    { 0x57,0xf1,0x19,0x85 }, { 0xaf,0x75,0x07,0x4c },
    { 0xee,0x99,0xdd,0xbb }, { 0xa3,0x7f,0x60,0xfd },
    { 0xf7,0x01,0x26,0x9f }, { 0x5c,0x72,0xf5,0xbc },
    { 0x44,0x66,0x3b,0xc5 }, { 0x5b,0xfb,0x7e,0x34 },
    { 0x8b,0x43,0x29,0x76 }, { 0xcb,0x23,0xc6,0xdc },
    { 0xb6,0xed,0xfc,0x68 }, { 0xb8,0xe4,0xf1,0x63 },
    { 0xd7,0x31,0xdc,0xca }, { 0x42,0x63,0x85,0x10 },
    { 0x13,0x97,0x22,0x40 }, { 0x84,0xc6,0x11,0x20 },
    { 0x85,0x4a,0x24,0x7d }, { 0xd2,0xbb,0x3d,0xf8 },
    { 0xae,0xf9,0x32,0x11 }, { 0xc7,0x29,0xa1,0x6d },
    { 0x1d,0x9e,0x2f,0x4b }, { 0xdc,0xb2,0x30,0xf3 },
    { 0x0d,0x86,0x52,0xec }, { 0x77,0xc1,0xe3,0xd0 },
    { 0x2b,0xb3,0x16,0x6c }, { 0xa9,0x70,0xb9,0x99 },
    { 0x11,0x94,0x48,0xfa }, { 0x47,0xe9,0x64,0x22 },
    { 0xa8,0xfc,0x8c,0xc4 }, { 0xa0,0xf0,0x3f,0x1a },
    { 0x56,0x7d,0x2c,0xd8 }, { 0x22,0x33,0x90,0xef },
    { 0x87,0x49,0x4e,0xc7 }, { 0xd9,0x38,0xd1,0xc1 },
    { 0x8c,0xca,0xa2,0xfe }, { 0x98,0xd4,0x0b,0x36 },
    { 0xa6,0xf5,0x81,0xcf }, { 0xa5,0x7a,0xde,0x28 },
    { 0xda,0xb7,0x8e,0x26 }, { 0x3f,0xad,0xbf,0xa4 },
    { 0x2c,0x3a,0x9d,0xe4 }, { 0x50,0x78,0x92,0x0d },
    { 0x6a,0x5f,0xcc,0x9b }, { 0x54,0x7e,0x46,0x62 },
    { 0xf6,0x8d,0x13,0xc2 }, { 0x90,0xd8,0xb8,0xe8 },
    { 0x2e,0x39,0xf7,0x5e }, { 0x82,0xc3,0xaf,0xf5 },
    { 0x9f,0x5d,0x80,0xbe }, { 0x69,0xd0,0x93,0x7c },
    { 0x6f,0xd5,0x2d,0xa9 }, { 0xcf,0x25,0x12,0xb3 },
    { 0xc8,0xac,0x99,0x3b }, { 0x10,0x18,0x7d,0xa7 },
    { 0xe8,0x9c,0x63,0x6e }, { 0xdb,0x3b,0xbb,0x7b },
    { 0xcd,0x26,0x78,0x09 }, { 0x6e,0x59,0x18,0xf4 },
    { 0xec,0x9a,0xb7,0x01 }, { 0x83,0x4f,0x9a,0xa8 },
    { 0xe6,0x95,0x6e,0x65 }, { 0xaa,0xff,0xe6,0x7e },
    { 0x21,0xbc,0xcf,0x08 }, { 0xef,0x15,0xe8,0xe6 },
    { 0xba,0xe7,0x9b,0xd9 }, { 0x4a,0x6f,0x36,0xce },
    { 0xea,0x9f,0x09,0xd4 }, { 0x29,0xb0,0x7c,0xd6 },
    { 0x31,0xa4,0xb2,0xaf }, { 0x2a,0x3f,0x23,0x31 },
    { 0xc6,0xa5,0x94,0x30 }, { 0x35,0xa2,0x66,0xc0 },
    { 0x74,0x4e,0xbc,0x37 }, { 0xfc,0x82,0xca,0xa6 },
    { 0xe0,0x90,0xd0,0xb0 }, { 0x33,0xa7,0xd8,0x15 },
    { 0xf1,0x04,0x98,0x4a }, { 0x41,0xec,0xda,0xf7 },
    { 0x7f,0xcd,0x50,0x0e }, { 0x17,0x91,0xf6,0x2f },
    { 0x76,0x4d,0xd6,0x8d }, { 0x43,0xef,0xb0,0x4d },
    { 0xcc,0xaa,0x4d,0x54 }, { 0xe4,0x96,0x04,0xdf },
    { 0x9e,0xd1,0xb5,0xe3 }, { 0x4c,0x6a,0x88,0x1b },
    { 0xc1,0x2c,0x1f,0xb8 }, { 0x46,0x65,0x51,0x7f },
    { 0x9d,0x5e,0xea,0x04 }, { 0x01,0x8c,0x35,0x5d },
    { 0xfa,0x87,0x74,0x73 }, { 0xfb,0x0b,0x41,0x2e },
    { 0xb3,0x67,0x1d,0x5a }, { 0x92,0xdb,0xd2,0x52 },
    { 0xe9,0x10,0x56,0x33 }, { 0x6d,0xd6,0x47,0x13 },
    { 0x9a,0xd7,0x61,0x8c }, { 0x37,0xa1,0x0c,0x7a },
    { 0x59,0xf8,0x14,0x8e }, { 0xeb,0x13,0x3c,0x89 },
    { 0xce,0xa9,0x27,0xee }, { 0xb7,0x61,0xc9,0x35 },
    { 0xe1,0x1c,0xe5,0xed }, { 0x7a,0x47,0xb1,0x3c },
    { 0x9c,0xd2,0xdf,0x59 }, { 0x55,0xf2,0x73,0x3f },
    { 0x18,0x14,0xce,0x79 }, { 0x73,0xc7,0x37,0xbf },
    { 0x53,0xf7,0xcd,0xea }, { 0x5f,0xfd,0xaa,0x5b },
    { 0xdf,0x3d,0x6f,0x14 }, { 0x78,0x44,0xdb,0x86 },
    { 0xca,0xaf,0xf3,0x81 }, { 0xb9,0x68,0xc4,0x3e },
    { 0x38,0x24,0x34,0x2c }, { 0xc2,0xa3,0x40,0x5f },
    { 0x16,0x1d,0xc3,0x72 }, { 0xbc,0xe2,0x25,0x0c },
    { 0x28,0x3c,0x49,0x8b }, { 0xff,0x0d,0x95,0x41 },
    { 0x39,0xa8,0x01,0x71 }, { 0x08,0x0c,0xb3,0xde },
    { 0xd8,0xb4,0xe4,0x9c }, { 0x64,0x56,0xc1,0x90 },
    { 0x7b,0xcb,0x84,0x61 }, { 0xd5,0x32,0xb6,0x70 },
    { 0x48,0x6c,0x5c,0x74 }, { 0xd0,0xb8,0x57,0x42 }
};

static const byte T6[256][4] = {
    { 0x50,0x51,0xf4,0xa7 }, { 0x53,0x7e,0x41,0x65 },
    { 0xc3,0x1a,0x17,0xa4 }, { 0x96,0x3a,0x27,0x5e },
    { 0xcb,0x3b,0xab,0x6b }, { 0xf1,0x1f,0x9d,0x45 },
    { 0xab,0xac,0xfa,0x58 }, { 0x93,0x4b,0xe3,0x03 },
    { 0x55,0x20,0x30,0xfa }, { 0xf6,0xad,0x76,0x6d },
    { 0x91,0x88,0xcc,0x76 }, { 0x25,0xf5,0x02,0x4c },
    { 0xfc,0x4f,0xe5,0xd7 }, { 0xd7,0xc5,0x2a,0xcb },
    { 0x80,0x26,0x35,0x44 }, { 0x8f,0xb5,0x62,0xa3 },
    { 0x49,0xde,0xb1,0x5a }, { 0x67,0x25,0xba,0x1b },
    { 0x98,0x45,0xea,0x0e }, { 0xe1,0x5d,0xfe,0xc0 },
    { 0x02,0xc3,0x2f,0x75 }, { 0x12,0x81,0x4c,0xf0 },
    { 0xa3,0x8d,0x46,0x97 }, { 0xc6,0x6b,0xd3,0xf9 },
    { 0xe7,0x03,0x8f,0x5f }, { 0x95,0x15,0x92,0x9c },
    { 0xeb,0xbf,0x6d,0x7a }, { 0xda,0x95,0x52,0x59 },
    { 0x2d,0xd4,0xbe,0x83 }, { 0xd3,0x58,0x74,0x21 },
    { 0x29,0x49,0xe0,0x69 }, { 0x44,0x8e,0xc9,0xc8 },
    { 0x6a,0x75,0xc2,0x89 }, { 0x78,0xf4,0x8e,0x79 },
    { 0x6b,0x99,0x58,0x3e }, { 0xdd,0x27,0xb9,0x71 },
    { 0xb6,0xbe,0xe1,0x4f }, { 0x17,0xf0,0x88,0xad },
    { 0x66,0xc9,0x20,0xac }, { 0xb4,0x7d,0xce,0x3a },
    { 0x18,0x63,0xdf,0x4a }, { 0x82,0xe5,0x1a,0x31 },
    { 0x60,0x97,0x51,0x33 }, { 0x45,0x62,0x53,0x7f },
    { 0xe0,0xb1,0x64,0x77 }, { 0x84,0xbb,0x6b,0xae },
    { 0x1c,0xfe,0x81,0xa0 }, { 0x94,0xf9,0x08,0x2b },
    { 0x58,0x70,0x48,0x68 }, { 0x19,0x8f,0x45,0xfd },
    { 0x87,0x94,0xde,0x6c }, { 0xb7,0x52,0x7b,0xf8 },
    { 0x23,0xab,0x73,0xd3 }, { 0xe2,0x72,0x4b,0x02 },
    { 0x57,0xe3,0x1f,0x8f }, { 0x2a,0x66,0x55,0xab },
    { 0x07,0xb2,0xeb,0x28 }, { 0x03,0x2f,0xb5,0xc2 },
    { 0x9a,0x86,0xc5,0x7b }, { 0xa5,0xd3,0x37,0x08 },
    { 0xf2,0x30,0x28,0x87 }, { 0xb2,0x23,0xbf,0xa5 },
    { 0xba,0x02,0x03,0x6a }, { 0x5c,0xed,0x16,0x82 },
    { 0x2b,0x8a,0xcf,0x1c }, { 0x92,0xa7,0x79,0xb4 },
    { 0xf0,0xf3,0x07,0xf2 }, { 0xa1,0x4e,0x69,0xe2 },
    { 0xcd,0x65,0xda,0xf4 }, { 0xd5,0x06,0x05,0xbe },
    { 0x1f,0xd1,0x34,0x62 }, { 0x8a,0xc4,0xa6,0xfe },
    { 0x9d,0x34,0x2e,0x53 }, { 0xa0,0xa2,0xf3,0x55 },
    { 0x32,0x05,0x8a,0xe1 }, { 0x75,0xa4,0xf6,0xeb },
    { 0x39,0x0b,0x83,0xec }, { 0xaa,0x40,0x60,0xef },
    { 0x06,0x5e,0x71,0x9f }, { 0x51,0xbd,0x6e,0x10 },
    { 0xf9,0x3e,0x21,0x8a }, { 0x3d,0x96,0xdd,0x06 },
    { 0xae,0xdd,0x3e,0x05 }, { 0x46,0x4d,0xe6,0xbd },
    { 0xb5,0x91,0x54,0x8d }, { 0x05,0x71,0xc4,0x5d },
    { 0x6f,0x04,0x06,0xd4 }, { 0xff,0x60,0x50,0x15 },
    { 0x24,0x19,0x98,0xfb }, { 0x97,0xd6,0xbd,0xe9 },
    { 0xcc,0x89,0x40,0x43 }, { 0x77,0x67,0xd9,0x9e },
    { 0xbd,0xb0,0xe8,0x42 }, { 0x88,0x07,0x89,0x8b },
    { 0x38,0xe7,0x19,0x5b }, { 0xdb,0x79,0xc8,0xee },
    { 0x47,0xa1,0x7c,0x0a }, { 0xe9,0x7c,0x42,0x0f },
    { 0xc9,0xf8,0x84,0x1e }, { 0x00,0x00,0x00,0x00 },
    { 0x83,0x09,0x80,0x86 }, { 0x48,0x32,0x2b,0xed },
    { 0xac,0x1e,0x11,0x70 }, { 0x4e,0x6c,0x5a,0x72 },
    { 0xfb,0xfd,0x0e,0xff }, { 0x56,0x0f,0x85,0x38 },
    { 0x1e,0x3d,0xae,0xd5 }, { 0x27,0x36,0x2d,0x39 },
    { 0x64,0x0a,0x0f,0xd9 }, { 0x21,0x68,0x5c,0xa6 },
    { 0xd1,0x9b,0x5b,0x54 }, { 0x3a,0x24,0x36,0x2e },
    { 0xb1,0x0c,0x0a,0x67 }, { 0x0f,0x93,0x57,0xe7 },
    { 0xd2,0xb4,0xee,0x96 }, { 0x9e,0x1b,0x9b,0x91 },
    { 0x4f,0x80,0xc0,0xc5 }, { 0xa2,0x61,0xdc,0x20 },
    { 0x69,0x5a,0x77,0x4b }, { 0x16,0x1c,0x12,0x1a },
    { 0x0a,0xe2,0x93,0xba }, { 0xe5,0xc0,0xa0,0x2a },
    { 0x43,0x3c,0x22,0xe0 }, { 0x1d,0x12,0x1b,0x17 },
    { 0x0b,0x0e,0x09,0x0d }, { 0xad,0xf2,0x8b,0xc7 },
    { 0xb9,0x2d,0xb6,0xa8 }, { 0xc8,0x14,0x1e,0xa9 },
    { 0x85,0x57,0xf1,0x19 }, { 0x4c,0xaf,0x75,0x07 },
    { 0xbb,0xee,0x99,0xdd }, { 0xfd,0xa3,0x7f,0x60 },
    { 0x9f,0xf7,0x01,0x26 }, { 0xbc,0x5c,0x72,0xf5 },
    { 0xc5,0x44,0x66,0x3b }, { 0x34,0x5b,0xfb,0x7e },
    { 0x76,0x8b,0x43,0x29 }, { 0xdc,0xcb,0x23,0xc6 },
    { 0x68,0xb6,0xed,0xfc }, { 0x63,0xb8,0xe4,0xf1 },
    { 0xca,0xd7,0x31,0xdc }, { 0x10,0x42,0x63,0x85 },
    { 0x40,0x13,0x97,0x22 }, { 0x20,0x84,0xc6,0x11 },
    { 0x7d,0x85,0x4a,0x24 }, { 0xf8,0xd2,0xbb,0x3d },
    { 0x11,0xae,0xf9,0x32 }, { 0x6d,0xc7,0x29,0xa1 },
    { 0x4b,0x1d,0x9e,0x2f }, { 0xf3,0xdc,0xb2,0x30 },
    { 0xec,0x0d,0x86,0x52 }, { 0xd0,0x77,0xc1,0xe3 },
    { 0x6c,0x2b,0xb3,0x16 }, { 0x99,0xa9,0x70,0xb9 },
    { 0xfa,0x11,0x94,0x48 }, { 0x22,0x47,0xe9,0x64 },
    { 0xc4,0xa8,0xfc,0x8c }, { 0x1a,0xa0,0xf0,0x3f },
    { 0xd8,0x56,0x7d,0x2c }, { 0xef,0x22,0x33,0x90 },
    { 0xc7,0x87,0x49,0x4e }, { 0xc1,0xd9,0x38,0xd1 },
    { 0xfe,0x8c,0xca,0xa2 }, { 0x36,0x98,0xd4,0x0b },
    { 0xcf,0xa6,0xf5,0x81 }, { 0x28,0xa5,0x7a,0xde },
    { 0x26,0xda,0xb7,0x8e }, { 0xa4,0x3f,0xad,0xbf },
    { 0xe4,0x2c,0x3a,0x9d }, { 0x0d,0x50,0x78,0x92 },
    { 0x9b,0x6a,0x5f,0xcc }, { 0x62,0x54,0x7e,0x46 },
    { 0xc2,0xf6,0x8d,0x13 }, { 0xe8,0x90,0xd8,0xb8 },
    { 0x5e,0x2e,0x39,0xf7 }, { 0xf5,0x82,0xc3,0xaf },
    { 0xbe,0x9f,0x5d,0x80 }, { 0x7c,0x69,0xd0,0x93 },
    { 0xa9,0x6f,0xd5,0x2d }, { 0xb3,0xcf,0x25,0x12 },
    { 0x3b,0xc8,0xac,0x99 }, { 0xa7,0x10,0x18,0x7d },
    { 0x6e,0xe8,0x9c,0x63 }, { 0x7b,0xdb,0x3b,0xbb },
    { 0x09,0xcd,0x26,0x78 }, { 0xf4,0x6e,0x59,0x18 },
    { 0x01,0xec,0x9a,0xb7 }, { 0xa8,0x83,0x4f,0x9a },
    { 0x65,0xe6,0x95,0x6e }, { 0x7e,0xaa,0xff,0xe6 },
    { 0x08,0x21,0xbc,0xcf }, { 0xe6,0xef,0x15,0xe8 },
    { 0xd9,0xba,0xe7,0x9b }, { 0xce,0x4a,0x6f,0x36 },
    { 0xd4,0xea,0x9f,0x09 }, { 0xd6,0x29,0xb0,0x7c },
    { 0xaf,0x31,0xa4,0xb2 }, { 0x31,0x2a,0x3f,0x23 },
    { 0x30,0xc6,0xa5,0x94 }, { 0xc0,0x35,0xa2,0x66 },
    { 0x37,0x74,0x4e,0xbc }, { 0xa6,0xfc,0x82,0xca },
    { 0xb0,0xe0,0x90,0xd0 }, { 0x15,0x33,0xa7,0xd8 },
    { 0x4a,0xf1,0x04,0x98 }, { 0xf7,0x41,0xec,0xda },
    { 0x0e,0x7f,0xcd,0x50 }, { 0x2f,0x17,0x91,0xf6 },
    { 0x8d,0x76,0x4d,0xd6 }, { 0x4d,0x43,0xef,0xb0 },
    { 0x54,0xcc,0xaa,0x4d }, { 0xdf,0xe4,0x96,0x04 },
    { 0xe3,0x9e,0xd1,0xb5 }, { 0x1b,0x4c,0x6a,0x88 },
    { 0xb8,0xc1,0x2c,0x1f }, { 0x7f,0x46,0x65,0x51 },
    { 0x04,0x9d,0x5e,0xea }, { 0x5d,0x01,0x8c,0x35 },
    { 0x73,0xfa,0x87,0x74 }, { 0x2e,0xfb,0x0b,0x41 },
    { 0x5a,0xb3,0x67,0x1d }, { 0x52,0x92,0xdb,0xd2 },
    { 0x33,0xe9,0x10,0x56 }, { 0x13,0x6d,0xd6,0x47 },
    { 0x8c,0x9a,0xd7,0x61 }, { 0x7a,0x37,0xa1,0x0c },
    { 0x8e,0x59,0xf8,0x14 }, { 0x89,0xeb,0x13,0x3c },
    { 0xee,0xce,0xa9,0x27 }, { 0x35,0xb7,0x61,0xc9 },
    { 0xed,0xe1,0x1c,0xe5 }, { 0x3c,0x7a,0x47,0xb1 },
    { 0x59,0x9c,0xd2,0xdf }, { 0x3f,0x55,0xf2,0x73 },
    { 0x79,0x18,0x14,0xce }, { 0xbf,0x73,0xc7,0x37 },
    { 0xea,0x53,0xf7,0xcd }, { 0x5b,0x5f,0xfd,0xaa },
    { 0x14,0xdf,0x3d,0x6f }, { 0x86,0x78,0x44,0xdb },
    { 0x81,0xca,0xaf,0xf3 }, { 0x3e,0xb9,0x68,0xc4 },
    { 0x2c,0x38,0x24,0x34 }, { 0x5f,0xc2,0xa3,0x40 },
    { 0x72,0x16,0x1d,0xc3 }, { 0x0c,0xbc,0xe2,0x25 },
    { 0x8b,0x28,0x3c,0x49 }, { 0x41,0xff,0x0d,0x95 },
    { 0x71,0x39,0xa8,0x01 }, { 0xde,0x08,0x0c,0xb3 },
    { 0x9c,0xd8,0xb4,0xe4 }, { 0x90,0x64,0x56,0xc1 },
    { 0x61,0x7b,0xcb,0x84 }, { 0x70,0xd5,0x32,0xb6 },
    { 0x74,0x48,0x6c,0x5c }, { 0x42,0xd0,0xb8,0x57 }
};

static const byte T7[256][4] = {
    { 0xa7,0x50,0x51,0xf4 }, { 0x65,0x53,0x7e,0x41 },
    { 0xa4,0xc3,0x1a,0x17 }, { 0x5e,0x96,0x3a,0x27 },
    { 0x6b,0xcb,0x3b,0xab }, { 0x45,0xf1,0x1f,0x9d },
    { 0x58,0xab,0xac,0xfa }, { 0x03,0x93,0x4b,0xe3 },
    { 0xfa,0x55,0x20,0x30 }, { 0x6d,0xf6,0xad,0x76 },
    { 0x76,0x91,0x88,0xcc }, { 0x4c,0x25,0xf5,0x02 },
    { 0xd7,0xfc,0x4f,0xe5 }, { 0xcb,0xd7,0xc5,0x2a },
    { 0x44,0x80,0x26,0x35 }, { 0xa3,0x8f,0xb5,0x62 },
    { 0x5a,0x49,0xde,0xb1 }, { 0x1b,0x67,0x25,0xba },
    { 0x0e,0x98,0x45,0xea }, { 0xc0,0xe1,0x5d,0xfe },
    { 0x75,0x02,0xc3,0x2f }, { 0xf0,0x12,0x81,0x4c },
    { 0x97,0xa3,0x8d,0x46 }, { 0xf9,0xc6,0x6b,0xd3 },
    { 0x5f,0xe7,0x03,0x8f }, { 0x9c,0x95,0x15,0x92 },
    { 0x7a,0xeb,0xbf,0x6d }, { 0x59,0xda,0x95,0x52 },
    { 0x83,0x2d,0xd4,0xbe }, { 0x21,0xd3,0x58,0x74 },
    { 0x69,0x29,0x49,0xe0 }, { 0xc8,0x44,0x8e,0xc9 },
    { 0x89,0x6a,0x75,0xc2 }, { 0x79,0x78,0xf4,0x8e },
    { 0x3e,0x6b,0x99,0x58 }, { 0x71,0xdd,0x27,0xb9 },
    { 0x4f,0xb6,0xbe,0xe1 }, { 0xad,0x17,0xf0,0x88 },
    { 0xac,0x66,0xc9,0x20 }, { 0x3a,0xb4,0x7d,0xce },
    { 0x4a,0x18,0x63,0xdf }, { 0x31,0x82,0xe5,0x1a },
    { 0x33,0x60,0x97,0x51 }, { 0x7f,0x45,0x62,0x53 },
    { 0x77,0xe0,0xb1,0x64 }, { 0xae,0x84,0xbb,0x6b },
    { 0xa0,0x1c,0xfe,0x81 }, { 0x2b,0x94,0xf9,0x08 },
    { 0x68,0x58,0x70,0x48 }, { 0xfd,0x19,0x8f,0x45 },
    { 0x6c,0x87,0x94,0xde }, { 0xf8,0xb7,0x52,0x7b },
    { 0xd3,0x23,0xab,0x73 }, { 0x02,0xe2,0x72,0x4b },
    { 0x8f,0x57,0xe3,0x1f }, { 0xab,0x2a,0x66,0x55 },
    { 0x28,0x07,0xb2,0xeb }, { 0xc2,0x03,0x2f,0xb5 },
    { 0x7b,0x9a,0x86,0xc5 }, { 0x08,0xa5,0xd3,0x37 },
    { 0x87,0xf2,0x30,0x28 }, { 0xa5,0xb2,0x23,0xbf },
    { 0x6a,0xba,0x02,0x03 }, { 0x82,0x5c,0xed,0x16 },
    { 0x1c,0x2b,0x8a,0xcf }, { 0xb4,0x92,0xa7,0x79 },
    { 0xf2,0xf0,0xf3,0x07 }, { 0xe2,0xa1,0x4e,0x69 },
    { 0xf4,0xcd,0x65,0xda }, { 0xbe,0xd5,0x06,0x05 },
    { 0x62,0x1f,0xd1,0x34 }, { 0xfe,0x8a,0xc4,0xa6 },
    { 0x53,0x9d,0x34,0x2e }, { 0x55,0xa0,0xa2,0xf3 },
    { 0xe1,0x32,0x05,0x8a }, { 0xeb,0x75,0xa4,0xf6 },
    { 0xec,0x39,0x0b,0x83 }, { 0xef,0xaa,0x40,0x60 },
    { 0x9f,0x06,0x5e,0x71 }, { 0x10,0x51,0xbd,0x6e },
    { 0x8a,0xf9,0x3e,0x21 }, { 0x06,0x3d,0x96,0xdd },
    { 0x05,0xae,0xdd,0x3e }, { 0xbd,0x46,0x4d,0xe6 },
    { 0x8d,0xb5,0x91,0x54 }, { 0x5d,0x05,0x71,0xc4 },
    { 0xd4,0x6f,0x04,0x06 }, { 0x15,0xff,0x60,0x50 },
    { 0xfb,0x24,0x19,0x98 }, { 0xe9,0x97,0xd6,0xbd },
    { 0x43,0xcc,0x89,0x40 }, { 0x9e,0x77,0x67,0xd9 },
    { 0x42,0xbd,0xb0,0xe8 }, { 0x8b,0x88,0x07,0x89 },
    { 0x5b,0x38,0xe7,0x19 }, { 0xee,0xdb,0x79,0xc8 },
    { 0x0a,0x47,0xa1,0x7c }, { 0x0f,0xe9,0x7c,0x42 },
    { 0x1e,0xc9,0xf8,0x84 }, { 0x00,0x00,0x00,0x00 },
    { 0x86,0x83,0x09,0x80 }, { 0xed,0x48,0x32,0x2b },
    { 0x70,0xac,0x1e,0x11 }, { 0x72,0x4e,0x6c,0x5a },
    { 0xff,0xfb,0xfd,0x0e }, { 0x38,0x56,0x0f,0x85 },
    { 0xd5,0x1e,0x3d,0xae }, { 0x39,0x27,0x36,0x2d },
    { 0xd9,0x64,0x0a,0x0f }, { 0xa6,0x21,0x68,0x5c },
    { 0x54,0xd1,0x9b,0x5b }, { 0x2e,0x3a,0x24,0x36 },
    { 0x67,0xb1,0x0c,0x0a }, { 0xe7,0x0f,0x93,0x57 },
    { 0x96,0xd2,0xb4,0xee }, { 0x91,0x9e,0x1b,0x9b },
    { 0xc5,0x4f,0x80,0xc0 }, { 0x20,0xa2,0x61,0xdc },
    { 0x4b,0x69,0x5a,0x77 }, { 0x1a,0x16,0x1c,0x12 },
    { 0xba,0x0a,0xe2,0x93 }, { 0x2a,0xe5,0xc0,0xa0 },
    { 0xe0,0x43,0x3c,0x22 }, { 0x17,0x1d,0x12,0x1b },
    { 0x0d,0x0b,0x0e,0x09 }, { 0xc7,0xad,0xf2,0x8b },
    { 0xa8,0xb9,0x2d,0xb6 }, { 0xa9,0xc8,0x14,0x1e },
    { 0x19,0x85,0x57,0xf1 }, { 0x07,0x4c,0xaf,0x75 },
    { 0xdd,0xbb,0xee,0x99 }, { 0x60,0xfd,0xa3,0x7f },
    { 0x26,0x9f,0xf7,0x01 }, { 0xf5,0xbc,0x5c,0x72 },
    { 0x3b,0xc5,0x44,0x66 }, { 0x7e,0x34,0x5b,0xfb },
    { 0x29,0x76,0x8b,0x43 }, { 0xc6,0xdc,0xcb,0x23 },
    { 0xfc,0x68,0xb6,0xed }, { 0xf1,0x63,0xb8,0xe4 },
    { 0xdc,0xca,0xd7,0x31 }, { 0x85,0x10,0x42,0x63 },
    { 0x22,0x40,0x13,0x97 }, { 0x11,0x20,0x84,0xc6 },
    { 0x24,0x7d,0x85,0x4a }, { 0x3d,0xf8,0xd2,0xbb },
    { 0x32,0x11,0xae,0xf9 }, { 0xa1,0x6d,0xc7,0x29 },
    { 0x2f,0x4b,0x1d,0x9e }, { 0x30,0xf3,0xdc,0xb2 },
    { 0x52,0xec,0x0d,0x86 }, { 0xe3,0xd0,0x77,0xc1 },
    { 0x16,0x6c,0x2b,0xb3 }, { 0xb9,0x99,0xa9,0x70 },
    { 0x48,0xfa,0x11,0x94 }, { 0x64,0x22,0x47,0xe9 },
    { 0x8c,0xc4,0xa8,0xfc }, { 0x3f,0x1a,0xa0,0xf0 },
    { 0x2c,0xd8,0x56,0x7d }, { 0x90,0xef,0x22,0x33 },
    { 0x4e,0xc7,0x87,0x49 }, { 0xd1,0xc1,0xd9,0x38 },
    { 0xa2,0xfe,0x8c,0xca }, { 0x0b,0x36,0x98,0xd4 },
    { 0x81,0xcf,0xa6,0xf5 }, { 0xde,0x28,0xa5,0x7a },
    { 0x8e,0x26,0xda,0xb7 }, { 0xbf,0xa4,0x3f,0xad },
    { 0x9d,0xe4,0x2c,0x3a }, { 0x92,0x0d,0x50,0x78 },
    { 0xcc,0x9b,0x6a,0x5f }, { 0x46,0x62,0x54,0x7e },
    { 0x13,0xc2,0xf6,0x8d }, { 0xb8,0xe8,0x90,0xd8 },
    { 0xf7,0x5e,0x2e,0x39 }, { 0xaf,0xf5,0x82,0xc3 },
    { 0x80,0xbe,0x9f,0x5d }, { 0x93,0x7c,0x69,0xd0 },
    { 0x2d,0xa9,0x6f,0xd5 }, { 0x12,0xb3,0xcf,0x25 },
    { 0x99,0x3b,0xc8,0xac }, { 0x7d,0xa7,0x10,0x18 },
    { 0x63,0x6e,0xe8,0x9c }, { 0xbb,0x7b,0xdb,0x3b },
    { 0x78,0x09,0xcd,0x26 }, { 0x18,0xf4,0x6e,0x59 },
    { 0xb7,0x01,0xec,0x9a }, { 0x9a,0xa8,0x83,0x4f },
    { 0x6e,0x65,0xe6,0x95 }, { 0xe6,0x7e,0xaa,0xff },
    { 0xcf,0x08,0x21,0xbc }, { 0xe8,0xe6,0xef,0x15 },
    { 0x9b,0xd9,0xba,0xe7 }, { 0x36,0xce,0x4a,0x6f },
    { 0x09,0xd4,0xea,0x9f }, { 0x7c,0xd6,0x29,0xb0 },
    { 0xb2,0xaf,0x31,0xa4 }, { 0x23,0x31,0x2a,0x3f },
    { 0x94,0x30,0xc6,0xa5 }, { 0x66,0xc0,0x35,0xa2 },
    { 0xbc,0x37,0x74,0x4e }, { 0xca,0xa6,0xfc,0x82 },
    { 0xd0,0xb0,0xe0,0x90 }, { 0xd8,0x15,0x33,0xa7 },
    { 0x98,0x4a,0xf1,0x04 }, { 0xda,0xf7,0x41,0xec },
    { 0x50,0x0e,0x7f,0xcd }, { 0xf6,0x2f,0x17,0x91 },
    { 0xd6,0x8d,0x76,0x4d }, { 0xb0,0x4d,0x43,0xef },
    { 0x4d,0x54,0xcc,0xaa }, { 0x04,0xdf,0xe4,0x96 },
    { 0xb5,0xe3,0x9e,0xd1 }, { 0x88,0x1b,0x4c,0x6a },
    { 0x1f,0xb8,0xc1,0x2c }, { 0x51,0x7f,0x46,0x65 },
    { 0xea,0x04,0x9d,0x5e }, { 0x35,0x5d,0x01,0x8c },
    { 0x74,0x73,0xfa,0x87 }, { 0x41,0x2e,0xfb,0x0b },
    { 0x1d,0x5a,0xb3,0x67 }, { 0xd2,0x52,0x92,0xdb },
    { 0x56,0x33,0xe9,0x10 }, { 0x47,0x13,0x6d,0xd6 },
    { 0x61,0x8c,0x9a,0xd7 }, { 0x0c,0x7a,0x37,0xa1 },
    { 0x14,0x8e,0x59,0xf8 }, { 0x3c,0x89,0xeb,0x13 },
    { 0x27,0xee,0xce,0xa9 }, { 0xc9,0x35,0xb7,0x61 },
    { 0xe5,0xed,0xe1,0x1c }, { 0xb1,0x3c,0x7a,0x47 },
    { 0xdf,0x59,0x9c,0xd2 }, { 0x73,0x3f,0x55,0xf2 },
    { 0xce,0x79,0x18,0x14 }, { 0x37,0xbf,0x73,0xc7 },
    { 0xcd,0xea,0x53,0xf7 }, { 0xaa,0x5b,0x5f,0xfd },
    { 0x6f,0x14,0xdf,0x3d }, { 0xdb,0x86,0x78,0x44 },
    { 0xf3,0x81,0xca,0xaf }, { 0xc4,0x3e,0xb9,0x68 },
    { 0x34,0x2c,0x38,0x24 }, { 0x40,0x5f,0xc2,0xa3 },
    { 0xc3,0x72,0x16,0x1d }, { 0x25,0x0c,0xbc,0xe2 },
    { 0x49,0x8b,0x28,0x3c }, { 0x95,0x41,0xff,0x0d },
    { 0x01,0x71,0x39,0xa8 }, { 0xb3,0xde,0x08,0x0c },
    { 0xe4,0x9c,0xd8,0xb4 }, { 0xc1,0x90,0x64,0x56 },
    { 0x84,0x61,0x7b,0xcb }, { 0xb6,0x70,0xd5,0x32 },
    { 0x5c,0x74,0x48,0x6c }, { 0x57,0x42,0xd0,0xb8 }
};

static const byte T8[256][4] = {
    { 0xf4,0xa7,0x50,0x51 }, { 0x41,0x65,0x53,0x7e },
    { 0x17,0xa4,0xc3,0x1a }, { 0x27,0x5e,0x96,0x3a },
    { 0xab,0x6b,0xcb,0x3b }, { 0x9d,0x45,0xf1,0x1f },
    { 0xfa,0x58,0xab,0xac }, { 0xe3,0x03,0x93,0x4b },
    { 0x30,0xfa,0x55,0x20 }, { 0x76,0x6d,0xf6,0xad },
    { 0xcc,0x76,0x91,0x88 }, { 0x02,0x4c,0x25,0xf5 },
    { 0xe5,0xd7,0xfc,0x4f }, { 0x2a,0xcb,0xd7,0xc5 },
    { 0x35,0x44,0x80,0x26 }, { 0x62,0xa3,0x8f,0xb5 },
    { 0xb1,0x5a,0x49,0xde }, { 0xba,0x1b,0x67,0x25 },
    { 0xea,0x0e,0x98,0x45 }, { 0xfe,0xc0,0xe1,0x5d },
    { 0x2f,0x75,0x02,0xc3 }, { 0x4c,0xf0,0x12,0x81 },
    { 0x46,0x97,0xa3,0x8d }, { 0xd3,0xf9,0xc6,0x6b },
    { 0x8f,0x5f,0xe7,0x03 }, { 0x92,0x9c,0x95,0x15 },
    { 0x6d,0x7a,0xeb,0xbf }, { 0x52,0x59,0xda,0x95 },
    { 0xbe,0x83,0x2d,0xd4 }, { 0x74,0x21,0xd3,0x58 },
    { 0xe0,0x69,0x29,0x49 }, { 0xc9,0xc8,0x44,0x8e },
    { 0xc2,0x89,0x6a,0x75 }, { 0x8e,0x79,0x78,0xf4 },
    { 0x58,0x3e,0x6b,0x99 }, { 0xb9,0x71,0xdd,0x27 },
    { 0xe1,0x4f,0xb6,0xbe }, { 0x88,0xad,0x17,0xf0 },
    { 0x20,0xac,0x66,0xc9 }, { 0xce,0x3a,0xb4,0x7d },
    { 0xdf,0x4a,0x18,0x63 }, { 0x1a,0x31,0x82,0xe5 },
    { 0x51,0x33,0x60,0x97 }, { 0x53,0x7f,0x45,0x62 },
    { 0x64,0x77,0xe0,0xb1 }, { 0x6b,0xae,0x84,0xbb },
    { 0x81,0xa0,0x1c,0xfe }, { 0x08,0x2b,0x94,0xf9 },
    { 0x48,0x68,0x58,0x70 }, { 0x45,0xfd,0x19,0x8f },
    { 0xde,0x6c,0x87,0x94 }, { 0x7b,0xf8,0xb7,0x52 },
    { 0x73,0xd3,0x23,0xab }, { 0x4b,0x02,0xe2,0x72 },
    { 0x1f,0x8f,0x57,0xe3 }, { 0x55,0xab,0x2a,0x66 },
    { 0xeb,0x28,0x07,0xb2 }, { 0xb5,0xc2,0x03,0x2f },
    { 0xc5,0x7b,0x9a,0x86 }, { 0x37,0x08,0xa5,0xd3 },
    { 0x28,0x87,0xf2,0x30 }, { 0xbf,0xa5,0xb2,0x23 },
    { 0x03,0x6a,0xba,0x02 }, { 0x16,0x82,0x5c,0xed },
    { 0xcf,0x1c,0x2b,0x8a }, { 0x79,0xb4,0x92,0xa7 },
    { 0x07,0xf2,0xf0,0xf3 }, { 0x69,0xe2,0xa1,0x4e },
    { 0xda,0xf4,0xcd,0x65 }, { 0x05,0xbe,0xd5,0x06 },
    { 0x34,0x62,0x1f,0xd1 }, { 0xa6,0xfe,0x8a,0xc4 },
    { 0x2e,0x53,0x9d,0x34 }, { 0xf3,0x55,0xa0,0xa2 },
    { 0x8a,0xe1,0x32,0x05 }, { 0xf6,0xeb,0x75,0xa4 },
    { 0x83,0xec,0x39,0x0b }, { 0x60,0xef,0xaa,0x40 },
    { 0x71,0x9f,0x06,0x5e }, { 0x6e,0x10,0x51,0xbd },
    { 0x21,0x8a,0xf9,0x3e }, { 0xdd,0x06,0x3d,0x96 },
    { 0x3e,0x05,0xae,0xdd }, { 0xe6,0xbd,0x46,0x4d },
    { 0x54,0x8d,0xb5,0x91 }, { 0xc4,0x5d,0x05,0x71 },
    { 0x06,0xd4,0x6f,0x04 }, { 0x50,0x15,0xff,0x60 },
    { 0x98,0xfb,0x24,0x19 }, { 0xbd,0xe9,0x97,0xd6 },
    { 0x40,0x43,0xcc,0x89 }, { 0xd9,0x9e,0x77,0x67 },
    { 0xe8,0x42,0xbd,0xb0 }, { 0x89,0x8b,0x88,0x07 },
    { 0x19,0x5b,0x38,0xe7 }, { 0xc8,0xee,0xdb,0x79 },
    { 0x7c,0x0a,0x47,0xa1 }, { 0x42,0x0f,0xe9,0x7c },
    { 0x84,0x1e,0xc9,0xf8 }, { 0x00,0x00,0x00,0x00 },
    { 0x80,0x86,0x83,0x09 }, { 0x2b,0xed,0x48,0x32 },
    { 0x11,0x70,0xac,0x1e }, { 0x5a,0x72,0x4e,0x6c },
    { 0x0e,0xff,0xfb,0xfd }, { 0x85,0x38,0x56,0x0f },
    { 0xae,0xd5,0x1e,0x3d }, { 0x2d,0x39,0x27,0x36 },
    { 0x0f,0xd9,0x64,0x0a }, { 0x5c,0xa6,0x21,0x68 },
    { 0x5b,0x54,0xd1,0x9b }, { 0x36,0x2e,0x3a,0x24 },
    { 0x0a,0x67,0xb1,0x0c }, { 0x57,0xe7,0x0f,0x93 },
    { 0xee,0x96,0xd2,0xb4 }, { 0x9b,0x91,0x9e,0x1b },
    { 0xc0,0xc5,0x4f,0x80 }, { 0xdc,0x20,0xa2,0x61 },
    { 0x77,0x4b,0x69,0x5a }, { 0x12,0x1a,0x16,0x1c },
    { 0x93,0xba,0x0a,0xe2 }, { 0xa0,0x2a,0xe5,0xc0 },
    { 0x22,0xe0,0x43,0x3c }, { 0x1b,0x17,0x1d,0x12 },
    { 0x09,0x0d,0x0b,0x0e }, { 0x8b,0xc7,0xad,0xf2 },
    { 0xb6,0xa8,0xb9,0x2d }, { 0x1e,0xa9,0xc8,0x14 },
    { 0xf1,0x19,0x85,0x57 }, { 0x75,0x07,0x4c,0xaf },
    { 0x99,0xdd,0xbb,0xee }, { 0x7f,0x60,0xfd,0xa3 },
    { 0x01,0x26,0x9f,0xf7 }, { 0x72,0xf5,0xbc,0x5c },
    { 0x66,0x3b,0xc5,0x44 }, { 0xfb,0x7e,0x34,0x5b },
    { 0x43,0x29,0x76,0x8b }, { 0x23,0xc6,0xdc,0xcb },
    { 0xed,0xfc,0x68,0xb6 }, { 0xe4,0xf1,0x63,0xb8 },
    { 0x31,0xdc,0xca,0xd7 }, { 0x63,0x85,0x10,0x42 },
    { 0x97,0x22,0x40,0x13 }, { 0xc6,0x11,0x20,0x84 },
    { 0x4a,0x24,0x7d,0x85 }, { 0xbb,0x3d,0xf8,0xd2 },
    { 0xf9,0x32,0x11,0xae }, { 0x29,0xa1,0x6d,0xc7 },
    { 0x9e,0x2f,0x4b,0x1d }, { 0xb2,0x30,0xf3,0xdc },
    { 0x86,0x52,0xec,0x0d }, { 0xc1,0xe3,0xd0,0x77 },
    { 0xb3,0x16,0x6c,0x2b }, { 0x70,0xb9,0x99,0xa9 },
    { 0x94,0x48,0xfa,0x11 }, { 0xe9,0x64,0x22,0x47 },
    { 0xfc,0x8c,0xc4,0xa8 }, { 0xf0,0x3f,0x1a,0xa0 },
    { 0x7d,0x2c,0xd8,0x56 }, { 0x33,0x90,0xef,0x22 },
    { 0x49,0x4e,0xc7,0x87 }, { 0x38,0xd1,0xc1,0xd9 },
    { 0xca,0xa2,0xfe,0x8c }, { 0xd4,0x0b,0x36,0x98 },
    { 0xf5,0x81,0xcf,0xa6 }, { 0x7a,0xde,0x28,0xa5 },
    { 0xb7,0x8e,0x26,0xda }, { 0xad,0xbf,0xa4,0x3f },
    { 0x3a,0x9d,0xe4,0x2c }, { 0x78,0x92,0x0d,0x50 },
    { 0x5f,0xcc,0x9b,0x6a }, { 0x7e,0x46,0x62,0x54 },
    { 0x8d,0x13,0xc2,0xf6 }, { 0xd8,0xb8,0xe8,0x90 },
    { 0x39,0xf7,0x5e,0x2e }, { 0xc3,0xaf,0xf5,0x82 },
    { 0x5d,0x80,0xbe,0x9f }, { 0xd0,0x93,0x7c,0x69 },
    { 0xd5,0x2d,0xa9,0x6f }, { 0x25,0x12,0xb3,0xcf },
    { 0xac,0x99,0x3b,0xc8 }, { 0x18,0x7d,0xa7,0x10 },
    { 0x9c,0x63,0x6e,0xe8 }, { 0x3b,0xbb,0x7b,0xdb },
    { 0x26,0x78,0x09,0xcd }, { 0x59,0x18,0xf4,0x6e },
    { 0x9a,0xb7,0x01,0xec }, { 0x4f,0x9a,0xa8,0x83 },
    { 0x95,0x6e,0x65,0xe6 }, { 0xff,0xe6,0x7e,0xaa },
    { 0xbc,0xcf,0x08,0x21 }, { 0x15,0xe8,0xe6,0xef },
    { 0xe7,0x9b,0xd9,0xba }, { 0x6f,0x36,0xce,0x4a },
    { 0x9f,0x09,0xd4,0xea }, { 0xb0,0x7c,0xd6,0x29 },
    { 0xa4,0xb2,0xaf,0x31 }, { 0x3f,0x23,0x31,0x2a },
    { 0xa5,0x94,0x30,0xc6 }, { 0xa2,0x66,0xc0,0x35 },
    { 0x4e,0xbc,0x37,0x74 }, { 0x82,0xca,0xa6,0xfc },
    { 0x90,0xd0,0xb0,0xe0 }, { 0xa7,0xd8,0x15,0x33 },
    { 0x04,0x98,0x4a,0xf1 }, { 0xec,0xda,0xf7,0x41 },
    { 0xcd,0x50,0x0e,0x7f }, { 0x91,0xf6,0x2f,0x17 },
    { 0x4d,0xd6,0x8d,0x76 }, { 0xef,0xb0,0x4d,0x43 },
    { 0xaa,0x4d,0x54,0xcc }, { 0x96,0x04,0xdf,0xe4 },
    { 0xd1,0xb5,0xe3,0x9e }, { 0x6a,0x88,0x1b,0x4c },
    { 0x2c,0x1f,0xb8,0xc1 }, { 0x65,0x51,0x7f,0x46 },
    { 0x5e,0xea,0x04,0x9d }, { 0x8c,0x35,0x5d,0x01 },
    { 0x87,0x74,0x73,0xfa }, { 0x0b,0x41,0x2e,0xfb },
    { 0x67,0x1d,0x5a,0xb3 }, { 0xdb,0xd2,0x52,0x92 },
    { 0x10,0x56,0x33,0xe9 }, { 0xd6,0x47,0x13,0x6d },
    { 0xd7,0x61,0x8c,0x9a }, { 0xa1,0x0c,0x7a,0x37 },
    { 0xf8,0x14,0x8e,0x59 }, { 0x13,0x3c,0x89,0xeb },
    { 0xa9,0x27,0xee,0xce }, { 0x61,0xc9,0x35,0xb7 },
    { 0x1c,0xe5,0xed,0xe1 }, { 0x47,0xb1,0x3c,0x7a },
    { 0xd2,0xdf,0x59,0x9c }, { 0xf2,0x73,0x3f,0x55 },
    { 0x14,0xce,0x79,0x18 }, { 0xc7,0x37,0xbf,0x73 },
    { 0xf7,0xcd,0xea,0x53 }, { 0xfd,0xaa,0x5b,0x5f },
    { 0x3d,0x6f,0x14,0xdf }, { 0x44,0xdb,0x86,0x78 },
    { 0xaf,0xf3,0x81,0xca }, { 0x68,0xc4,0x3e,0xb9 },
    { 0x24,0x34,0x2c,0x38 }, { 0xa3,0x40,0x5f,0xc2 },
    { 0x1d,0xc3,0x72,0x16 }, { 0xe2,0x25,0x0c,0xbc },
    { 0x3c,0x49,0x8b,0x28 }, { 0x0d,0x95,0x41,0xff },
    { 0xa8,0x01,0x71,0x39 }, { 0x0c,0xb3,0xde,0x08 },
    { 0xb4,0xe4,0x9c,0xd8 }, { 0x56,0xc1,0x90,0x64 },
    { 0xcb,0x84,0x61,0x7b }, { 0x32,0xb6,0x70,0xd5 },
    { 0x6c,0x5c,0x74,0x48 }, { 0xb8,0x57,0x42,0xd0 }
};

static const byte S5[256] = {
    0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,
    0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
    0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,
    0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
    0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,
    0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
    0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,
    0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
    0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,
    0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
    0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,
    0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
    0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,
    0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
    0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,
    0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
    0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,
    0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
    0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,
    0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
    0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,
    0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
    0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,
    0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
    0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,
    0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
    0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,
    0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
    0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,
    0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
    0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,
    0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d
};

static const byte U1[256][4] = {
    { 0x00,0x00,0x00,0x00 }, { 0x0e,0x09,0x0d,0x0b },
    { 0x1c,0x12,0x1a,0x16 }, { 0x12,0x1b,0x17,0x1d },
    { 0x38,0x24,0x34,0x2c }, { 0x36,0x2d,0x39,0x27 },
    { 0x24,0x36,0x2e,0x3a }, { 0x2a,0x3f,0x23,0x31 },
    { 0x70,0x48,0x68,0x58 }, { 0x7e,0x41,0x65,0x53 },
    { 0x6c,0x5a,0x72,0x4e }, { 0x62,0x53,0x7f,0x45 },
    { 0x48,0x6c,0x5c,0x74 }, { 0x46,0x65,0x51,0x7f },
    { 0x54,0x7e,0x46,0x62 }, { 0x5a,0x77,0x4b,0x69 },
    { 0xe0,0x90,0xd0,0xb0 }, { 0xee,0x99,0xdd,0xbb },
    { 0xfc,0x82,0xca,0xa6 }, { 0xf2,0x8b,0xc7,0xad },
    { 0xd8,0xb4,0xe4,0x9c }, { 0xd6,0xbd,0xe9,0x97 },
    { 0xc4,0xa6,0xfe,0x8a }, { 0xca,0xaf,0xf3,0x81 },
    { 0x90,0xd8,0xb8,0xe8 }, { 0x9e,0xd1,0xb5,0xe3 },
    { 0x8c,0xca,0xa2,0xfe }, { 0x82,0xc3,0xaf,0xf5 },
    { 0xa8,0xfc,0x8c,0xc4 }, { 0xa6,0xf5,0x81,0xcf },
    { 0xb4,0xee,0x96,0xd2 }, { 0xba,0xe7,0x9b,0xd9 },
    { 0xdb,0x3b,0xbb,0x7b }, { 0xd5,0x32,0xb6,0x70 },
    { 0xc7,0x29,0xa1,0x6d }, { 0xc9,0x20,0xac,0x66 },
    { 0xe3,0x1f,0x8f,0x57 }, { 0xed,0x16,0x82,0x5c },
    { 0xff,0x0d,0x95,0x41 }, { 0xf1,0x04,0x98,0x4a },
    { 0xab,0x73,0xd3,0x23 }, { 0xa5,0x7a,0xde,0x28 },
    { 0xb7,0x61,0xc9,0x35 }, { 0xb9,0x68,0xc4,0x3e },
    { 0x93,0x57,0xe7,0x0f }, { 0x9d,0x5e,0xea,0x04 },
    { 0x8f,0x45,0xfd,0x19 }, { 0x81,0x4c,0xf0,0x12 },
    { 0x3b,0xab,0x6b,0xcb }, { 0x35,0xa2,0x66,0xc0 },
    { 0x27,0xb9,0x71,0xdd }, { 0x29,0xb0,0x7c,0xd6 },
    { 0x03,0x8f,0x5f,0xe7 }, { 0x0d,0x86,0x52,0xec },
    { 0x1f,0x9d,0x45,0xf1 }, { 0x11,0x94,0x48,0xfa },
    { 0x4b,0xe3,0x03,0x93 }, { 0x45,0xea,0x0e,0x98 },
    { 0x57,0xf1,0x19,0x85 }, { 0x59,0xf8,0x14,0x8e },
    { 0x73,0xc7,0x37,0xbf }, { 0x7d,0xce,0x3a,0xb4 },
    { 0x6f,0xd5,0x2d,0xa9 }, { 0x61,0xdc,0x20,0xa2 },
    { 0xad,0x76,0x6d,0xf6 }, { 0xa3,0x7f,0x60,0xfd },
    { 0xb1,0x64,0x77,0xe0 }, { 0xbf,0x6d,0x7a,0xeb },
    { 0x95,0x52,0x59,0xda }, { 0x9b,0x5b,0x54,0xd1 },
    { 0x89,0x40,0x43,0xcc }, { 0x87,0x49,0x4e,0xc7 },
    { 0xdd,0x3e,0x05,0xae }, { 0xd3,0x37,0x08,0xa5 },
    { 0xc1,0x2c,0x1f,0xb8 }, { 0xcf,0x25,0x12,0xb3 },
    { 0xe5,0x1a,0x31,0x82 }, { 0xeb,0x13,0x3c,0x89 },
    { 0xf9,0x08,0x2b,0x94 }, { 0xf7,0x01,0x26,0x9f },
    { 0x4d,0xe6,0xbd,0x46 }, { 0x43,0xef,0xb0,0x4d },
    { 0x51,0xf4,0xa7,0x50 }, { 0x5f,0xfd,0xaa,0x5b },
    { 0x75,0xc2,0x89,0x6a }, { 0x7b,0xcb,0x84,0x61 },
    { 0x69,0xd0,0x93,0x7c }, { 0x67,0xd9,0x9e,0x77 },
    { 0x3d,0xae,0xd5,0x1e }, { 0x33,0xa7,0xd8,0x15 },
    { 0x21,0xbc,0xcf,0x08 }, { 0x2f,0xb5,0xc2,0x03 },
    { 0x05,0x8a,0xe1,0x32 }, { 0x0b,0x83,0xec,0x39 },
    { 0x19,0x98,0xfb,0x24 }, { 0x17,0x91,0xf6,0x2f },
    { 0x76,0x4d,0xd6,0x8d }, { 0x78,0x44,0xdb,0x86 },
    { 0x6a,0x5f,0xcc,0x9b }, { 0x64,0x56,0xc1,0x90 },
    { 0x4e,0x69,0xe2,0xa1 }, { 0x40,0x60,0xef,0xaa },
    { 0x52,0x7b,0xf8,0xb7 }, { 0x5c,0x72,0xf5,0xbc },
    { 0x06,0x05,0xbe,0xd5 }, { 0x08,0x0c,0xb3,0xde },
    { 0x1a,0x17,0xa4,0xc3 }, { 0x14,0x1e,0xa9,0xc8 },
    { 0x3e,0x21,0x8a,0xf9 }, { 0x30,0x28,0x87,0xf2 },
    { 0x22,0x33,0x90,0xef }, { 0x2c,0x3a,0x9d,0xe4 },
    { 0x96,0xdd,0x06,0x3d }, { 0x98,0xd4,0x0b,0x36 },
    { 0x8a,0xcf,0x1c,0x2b }, { 0x84,0xc6,0x11,0x20 },
    { 0xae,0xf9,0x32,0x11 }, { 0xa0,0xf0,0x3f,0x1a },
    { 0xb2,0xeb,0x28,0x07 }, { 0xbc,0xe2,0x25,0x0c },
    { 0xe6,0x95,0x6e,0x65 }, { 0xe8,0x9c,0x63,0x6e },
    { 0xfa,0x87,0x74,0x73 }, { 0xf4,0x8e,0x79,0x78 },
    { 0xde,0xb1,0x5a,0x49 }, { 0xd0,0xb8,0x57,0x42 },
    { 0xc2,0xa3,0x40,0x5f }, { 0xcc,0xaa,0x4d,0x54 },
    { 0x41,0xec,0xda,0xf7 }, { 0x4f,0xe5,0xd7,0xfc },
    { 0x5d,0xfe,0xc0,0xe1 }, { 0x53,0xf7,0xcd,0xea },
    { 0x79,0xc8,0xee,0xdb }, { 0x77,0xc1,0xe3,0xd0 },
    { 0x65,0xda,0xf4,0xcd }, { 0x6b,0xd3,0xf9,0xc6 },
    { 0x31,0xa4,0xb2,0xaf }, { 0x3f,0xad,0xbf,0xa4 },
    { 0x2d,0xb6,0xa8,0xb9 }, { 0x23,0xbf,0xa5,0xb2 },
    { 0x09,0x80,0x86,0x83 }, { 0x07,0x89,0x8b,0x88 },
    { 0x15,0x92,0x9c,0x95 }, { 0x1b,0x9b,0x91,0x9e },
    { 0xa1,0x7c,0x0a,0x47 }, { 0xaf,0x75,0x07,0x4c },
    { 0xbd,0x6e,0x10,0x51 }, { 0xb3,0x67,0x1d,0x5a },
    { 0x99,0x58,0x3e,0x6b }, { 0x97,0x51,0x33,0x60 },
    { 0x85,0x4a,0x24,0x7d }, { 0x8b,0x43,0x29,0x76 },
    { 0xd1,0x34,0x62,0x1f }, { 0xdf,0x3d,0x6f,0x14 },
    { 0xcd,0x26,0x78,0x09 }, { 0xc3,0x2f,0x75,0x02 },
    { 0xe9,0x10,0x56,0x33 }, { 0xe7,0x19,0x5b,0x38 },
    { 0xf5,0x02,0x4c,0x25 }, { 0xfb,0x0b,0x41,0x2e },
    { 0x9a,0xd7,0x61,0x8c }, { 0x94,0xde,0x6c,0x87 },
    { 0x86,0xc5,0x7b,0x9a }, { 0x88,0xcc,0x76,0x91 },
    { 0xa2,0xf3,0x55,0xa0 }, { 0xac,0xfa,0x58,0xab },
    { 0xbe,0xe1,0x4f,0xb6 }, { 0xb0,0xe8,0x42,0xbd },
    { 0xea,0x9f,0x09,0xd4 }, { 0xe4,0x96,0x04,0xdf },
    { 0xf6,0x8d,0x13,0xc2 }, { 0xf8,0x84,0x1e,0xc9 },
    { 0xd2,0xbb,0x3d,0xf8 }, { 0xdc,0xb2,0x30,0xf3 },
    { 0xce,0xa9,0x27,0xee }, { 0xc0,0xa0,0x2a,0xe5 },
    { 0x7a,0x47,0xb1,0x3c }, { 0x74,0x4e,0xbc,0x37 },
    { 0x66,0x55,0xab,0x2a }, { 0x68,0x5c,0xa6,0x21 },
    { 0x42,0x63,0x85,0x10 }, { 0x4c,0x6a,0x88,0x1b },
    { 0x5e,0x71,0x9f,0x06 }, { 0x50,0x78,0x92,0x0d },
    { 0x0a,0x0f,0xd9,0x64 }, { 0x04,0x06,0xd4,0x6f },
    { 0x16,0x1d,0xc3,0x72 }, { 0x18,0x14,0xce,0x79 },
    { 0x32,0x2b,0xed,0x48 }, { 0x3c,0x22,0xe0,0x43 },
    { 0x2e,0x39,0xf7,0x5e }, { 0x20,0x30,0xfa,0x55 },
    { 0xec,0x9a,0xb7,0x01 }, { 0xe2,0x93,0xba,0x0a },
    { 0xf0,0x88,0xad,0x17 }, { 0xfe,0x81,0xa0,0x1c },
    { 0xd4,0xbe,0x83,0x2d }, { 0xda,0xb7,0x8e,0x26 },
    { 0xc8,0xac,0x99,0x3b }, { 0xc6,0xa5,0x94,0x30 },
    { 0x9c,0xd2,0xdf,0x59 }, { 0x92,0xdb,0xd2,0x52 },
    { 0x80,0xc0,0xc5,0x4f }, { 0x8e,0xc9,0xc8,0x44 },
    { 0xa4,0xf6,0xeb,0x75 }, { 0xaa,0xff,0xe6,0x7e },
    { 0xb8,0xe4,0xf1,0x63 }, { 0xb6,0xed,0xfc,0x68 },
    { 0x0c,0x0a,0x67,0xb1 }, { 0x02,0x03,0x6a,0xba },
    { 0x10,0x18,0x7d,0xa7 }, { 0x1e,0x11,0x70,0xac },
    { 0x34,0x2e,0x53,0x9d }, { 0x3a,0x27,0x5e,0x96 },
    { 0x28,0x3c,0x49,0x8b }, { 0x26,0x35,0x44,0x80 },
    { 0x7c,0x42,0x0f,0xe9 }, { 0x72,0x4b,0x02,0xe2 },
    { 0x60,0x50,0x15,0xff }, { 0x6e,0x59,0x18,0xf4 },
    { 0x44,0x66,0x3b,0xc5 }, { 0x4a,0x6f,0x36,0xce },
    { 0x58,0x74,0x21,0xd3 }, { 0x56,0x7d,0x2c,0xd8 },
    { 0x37,0xa1,0x0c,0x7a }, { 0x39,0xa8,0x01,0x71 },
    { 0x2b,0xb3,0x16,0x6c }, { 0x25,0xba,0x1b,0x67 },
    { 0x0f,0x85,0x38,0x56 }, { 0x01,0x8c,0x35,0x5d },
    { 0x13,0x97,0x22,0x40 }, { 0x1d,0x9e,0x2f,0x4b },
    { 0x47,0xe9,0x64,0x22 }, { 0x49,0xe0,0x69,0x29 },
    { 0x5b,0xfb,0x7e,0x34 }, { 0x55,0xf2,0x73,0x3f },
    { 0x7f,0xcd,0x50,0x0e }, { 0x71,0xc4,0x5d,0x05 },
    { 0x63,0xdf,0x4a,0x18 }, { 0x6d,0xd6,0x47,0x13 },
    { 0xd7,0x31,0xdc,0xca }, { 0xd9,0x38,0xd1,0xc1 },
    { 0xcb,0x23,0xc6,0xdc }, { 0xc5,0x2a,0xcb,0xd7 },
    { 0xef,0x15,0xe8,0xe6 }, { 0xe1,0x1c,0xe5,0xed },
    { 0xf3,0x07,0xf2,0xf0 }, { 0xfd,0x0e,0xff,0xfb },
    { 0xa7,0x79,0xb4,0x92 }, { 0xa9,0x70,0xb9,0x99 },
    { 0xbb,0x6b,0xae,0x84 }, { 0xb5,0x62,0xa3,0x8f },
    { 0x9f,0x5d,0x80,0xbe }, { 0x91,0x54,0x8d,0xb5 },
    { 0x83,0x4f,0x9a,0xa8 }, { 0x8d,0x46,0x97,0xa3 }
};

static const byte U2[256][4] = {
    { 0x00,0x00,0x00,0x00 }, { 0x0b,0x0e,0x09,0x0d },
    { 0x16,0x1c,0x12,0x1a }, { 0x1d,0x12,0x1b,0x17 },
    { 0x2c,0x38,0x24,0x34 }, { 0x27,0x36,0x2d,0x39 },
    { 0x3a,0x24,0x36,0x2e }, { 0x31,0x2a,0x3f,0x23 },
    { 0x58,0x70,0x48,0x68 }, { 0x53,0x7e,0x41,0x65 },
    { 0x4e,0x6c,0x5a,0x72 }, { 0x45,0x62,0x53,0x7f },
    { 0x74,0x48,0x6c,0x5c }, { 0x7f,0x46,0x65,0x51 },
    { 0x62,0x54,0x7e,0x46 }, { 0x69,0x5a,0x77,0x4b },
    { 0xb0,0xe0,0x90,0xd0 }, { 0xbb,0xee,0x99,0xdd },
    { 0xa6,0xfc,0x82,0xca }, { 0xad,0xf2,0x8b,0xc7 },
    { 0x9c,0xd8,0xb4,0xe4 }, { 0x97,0xd6,0xbd,0xe9 },
    { 0x8a,0xc4,0xa6,0xfe }, { 0x81,0xca,0xaf,0xf3 },
    { 0xe8,0x90,0xd8,0xb8 }, { 0xe3,0x9e,0xd1,0xb5 },
    { 0xfe,0x8c,0xca,0xa2 }, { 0xf5,0x82,0xc3,0xaf },
    { 0xc4,0xa8,0xfc,0x8c }, { 0xcf,0xa6,0xf5,0x81 },
    { 0xd2,0xb4,0xee,0x96 }, { 0xd9,0xba,0xe7,0x9b },
    { 0x7b,0xdb,0x3b,0xbb }, { 0x70,0xd5,0x32,0xb6 },
    { 0x6d,0xc7,0x29,0xa1 }, { 0x66,0xc9,0x20,0xac },
    { 0x57,0xe3,0x1f,0x8f }, { 0x5c,0xed,0x16,0x82 },
    { 0x41,0xff,0x0d,0x95 }, { 0x4a,0xf1,0x04,0x98 },
    { 0x23,0xab,0x73,0xd3 }, { 0x28,0xa5,0x7a,0xde },
    { 0x35,0xb7,0x61,0xc9 }, { 0x3e,0xb9,0x68,0xc4 },
    { 0x0f,0x93,0x57,0xe7 }, { 0x04,0x9d,0x5e,0xea },
    { 0x19,0x8f,0x45,0xfd }, { 0x12,0x81,0x4c,0xf0 },
    { 0xcb,0x3b,0xab,0x6b }, { 0xc0,0x35,0xa2,0x66 },
    { 0xdd,0x27,0xb9,0x71 }, { 0xd6,0x29,0xb0,0x7c },
    { 0xe7,0x03,0x8f,0x5f }, { 0xec,0x0d,0x86,0x52 },
    { 0xf1,0x1f,0x9d,0x45 }, { 0xfa,0x11,0x94,0x48 },
    { 0x93,0x4b,0xe3,0x03 }, { 0x98,0x45,0xea,0x0e },
    { 0x85,0x57,0xf1,0x19 }, { 0x8e,0x59,0xf8,0x14 },
    { 0xbf,0x73,0xc7,0x37 }, { 0xb4,0x7d,0xce,0x3a },
    { 0xa9,0x6f,0xd5,0x2d }, { 0xa2,0x61,0xdc,0x20 },
    { 0xf6,0xad,0x76,0x6d }, { 0xfd,0xa3,0x7f,0x60 },
    { 0xe0,0xb1,0x64,0x77 }, { 0xeb,0xbf,0x6d,0x7a },
    { 0xda,0x95,0x52,0x59 }, { 0xd1,0x9b,0x5b,0x54 },
    { 0xcc,0x89,0x40,0x43 }, { 0xc7,0x87,0x49,0x4e },
    { 0xae,0xdd,0x3e,0x05 }, { 0xa5,0xd3,0x37,0x08 },
    { 0xb8,0xc1,0x2c,0x1f }, { 0xb3,0xcf,0x25,0x12 },
    { 0x82,0xe5,0x1a,0x31 }, { 0x89,0xeb,0x13,0x3c },
    { 0x94,0xf9,0x08,0x2b }, { 0x9f,0xf7,0x01,0x26 },
    { 0x46,0x4d,0xe6,0xbd }, { 0x4d,0x43,0xef,0xb0 },
    { 0x50,0x51,0xf4,0xa7 }, { 0x5b,0x5f,0xfd,0xaa },
    { 0x6a,0x75,0xc2,0x89 }, { 0x61,0x7b,0xcb,0x84 },
    { 0x7c,0x69,0xd0,0x93 }, { 0x77,0x67,0xd9,0x9e },
    { 0x1e,0x3d,0xae,0xd5 }, { 0x15,0x33,0xa7,0xd8 },
    { 0x08,0x21,0xbc,0xcf }, { 0x03,0x2f,0xb5,0xc2 },
    { 0x32,0x05,0x8a,0xe1 }, { 0x39,0x0b,0x83,0xec },
    { 0x24,0x19,0x98,0xfb }, { 0x2f,0x17,0x91,0xf6 },
    { 0x8d,0x76,0x4d,0xd6 }, { 0x86,0x78,0x44,0xdb },
    { 0x9b,0x6a,0x5f,0xcc }, { 0x90,0x64,0x56,0xc1 },
    { 0xa1,0x4e,0x69,0xe2 }, { 0xaa,0x40,0x60,0xef },
    { 0xb7,0x52,0x7b,0xf8 }, { 0xbc,0x5c,0x72,0xf5 },
    { 0xd5,0x06,0x05,0xbe }, { 0xde,0x08,0x0c,0xb3 },
    { 0xc3,0x1a,0x17,0xa4 }, { 0xc8,0x14,0x1e,0xa9 },
    { 0xf9,0x3e,0x21,0x8a }, { 0xf2,0x30,0x28,0x87 },
    { 0xef,0x22,0x33,0x90 }, { 0xe4,0x2c,0x3a,0x9d },
    { 0x3d,0x96,0xdd,0x06 }, { 0x36,0x98,0xd4,0x0b },
    { 0x2b,0x8a,0xcf,0x1c }, { 0x20,0x84,0xc6,0x11 },
    { 0x11,0xae,0xf9,0x32 }, { 0x1a,0xa0,0xf0,0x3f },
    { 0x07,0xb2,0xeb,0x28 }, { 0x0c,0xbc,0xe2,0x25 },
    { 0x65,0xe6,0x95,0x6e }, { 0x6e,0xe8,0x9c,0x63 },
    { 0x73,0xfa,0x87,0x74 }, { 0x78,0xf4,0x8e,0x79 },
    { 0x49,0xde,0xb1,0x5a }, { 0x42,0xd0,0xb8,0x57 },
    { 0x5f,0xc2,0xa3,0x40 }, { 0x54,0xcc,0xaa,0x4d },
    { 0xf7,0x41,0xec,0xda }, { 0xfc,0x4f,0xe5,0xd7 },
    { 0xe1,0x5d,0xfe,0xc0 }, { 0xea,0x53,0xf7,0xcd },
    { 0xdb,0x79,0xc8,0xee }, { 0xd0,0x77,0xc1,0xe3 },
    { 0xcd,0x65,0xda,0xf4 }, { 0xc6,0x6b,0xd3,0xf9 },
    { 0xaf,0x31,0xa4,0xb2 }, { 0xa4,0x3f,0xad,0xbf },
    { 0xb9,0x2d,0xb6,0xa8 }, { 0xb2,0x23,0xbf,0xa5 },
    { 0x83,0x09,0x80,0x86 }, { 0x88,0x07,0x89,0x8b },
    { 0x95,0x15,0x92,0x9c }, { 0x9e,0x1b,0x9b,0x91 },
    { 0x47,0xa1,0x7c,0x0a }, { 0x4c,0xaf,0x75,0x07 },
    { 0x51,0xbd,0x6e,0x10 }, { 0x5a,0xb3,0x67,0x1d },
    { 0x6b,0x99,0x58,0x3e }, { 0x60,0x97,0x51,0x33 },
    { 0x7d,0x85,0x4a,0x24 }, { 0x76,0x8b,0x43,0x29 },
    { 0x1f,0xd1,0x34,0x62 }, { 0x14,0xdf,0x3d,0x6f },
    { 0x09,0xcd,0x26,0x78 }, { 0x02,0xc3,0x2f,0x75 },
    { 0x33,0xe9,0x10,0x56 }, { 0x38,0xe7,0x19,0x5b },
    { 0x25,0xf5,0x02,0x4c }, { 0x2e,0xfb,0x0b,0x41 },
    { 0x8c,0x9a,0xd7,0x61 }, { 0x87,0x94,0xde,0x6c },
    { 0x9a,0x86,0xc5,0x7b }, { 0x91,0x88,0xcc,0x76 },
    { 0xa0,0xa2,0xf3,0x55 }, { 0xab,0xac,0xfa,0x58 },
    { 0xb6,0xbe,0xe1,0x4f }, { 0xbd,0xb0,0xe8,0x42 },
    { 0xd4,0xea,0x9f,0x09 }, { 0xdf,0xe4,0x96,0x04 },
    { 0xc2,0xf6,0x8d,0x13 }, { 0xc9,0xf8,0x84,0x1e },
    { 0xf8,0xd2,0xbb,0x3d }, { 0xf3,0xdc,0xb2,0x30 },
    { 0xee,0xce,0xa9,0x27 }, { 0xe5,0xc0,0xa0,0x2a },
    { 0x3c,0x7a,0x47,0xb1 }, { 0x37,0x74,0x4e,0xbc },
    { 0x2a,0x66,0x55,0xab }, { 0x21,0x68,0x5c,0xa6 },
    { 0x10,0x42,0x63,0x85 }, { 0x1b,0x4c,0x6a,0x88 },
    { 0x06,0x5e,0x71,0x9f }, { 0x0d,0x50,0x78,0x92 },
    { 0x64,0x0a,0x0f,0xd9 }, { 0x6f,0x04,0x06,0xd4 },
    { 0x72,0x16,0x1d,0xc3 }, { 0x79,0x18,0x14,0xce },
    { 0x48,0x32,0x2b,0xed }, { 0x43,0x3c,0x22,0xe0 },
    { 0x5e,0x2e,0x39,0xf7 }, { 0x55,0x20,0x30,0xfa },
    { 0x01,0xec,0x9a,0xb7 }, { 0x0a,0xe2,0x93,0xba },
    { 0x17,0xf0,0x88,0xad }, { 0x1c,0xfe,0x81,0xa0 },
    { 0x2d,0xd4,0xbe,0x83 }, { 0x26,0xda,0xb7,0x8e },
    { 0x3b,0xc8,0xac,0x99 }, { 0x30,0xc6,0xa5,0x94 },
    { 0x59,0x9c,0xd2,0xdf }, { 0x52,0x92,0xdb,0xd2 },
    { 0x4f,0x80,0xc0,0xc5 }, { 0x44,0x8e,0xc9,0xc8 },
    { 0x75,0xa4,0xf6,0xeb }, { 0x7e,0xaa,0xff,0xe6 },
    { 0x63,0xb8,0xe4,0xf1 }, { 0x68,0xb6,0xed,0xfc },
    { 0xb1,0x0c,0x0a,0x67 }, { 0xba,0x02,0x03,0x6a },
    { 0xa7,0x10,0x18,0x7d }, { 0xac,0x1e,0x11,0x70 },
    { 0x9d,0x34,0x2e,0x53 }, { 0x96,0x3a,0x27,0x5e },
    { 0x8b,0x28,0x3c,0x49 }, { 0x80,0x26,0x35,0x44 },
    { 0xe9,0x7c,0x42,0x0f }, { 0xe2,0x72,0x4b,0x02 },
    { 0xff,0x60,0x50,0x15 }, { 0xf4,0x6e,0x59,0x18 },
    { 0xc5,0x44,0x66,0x3b }, { 0xce,0x4a,0x6f,0x36 },
    { 0xd3,0x58,0x74,0x21 }, { 0xd8,0x56,0x7d,0x2c },
    { 0x7a,0x37,0xa1,0x0c }, { 0x71,0x39,0xa8,0x01 },
    { 0x6c,0x2b,0xb3,0x16 }, { 0x67,0x25,0xba,0x1b },
    { 0x56,0x0f,0x85,0x38 }, { 0x5d,0x01,0x8c,0x35 },
    { 0x40,0x13,0x97,0x22 }, { 0x4b,0x1d,0x9e,0x2f },
    { 0x22,0x47,0xe9,0x64 }, { 0x29,0x49,0xe0,0x69 },
    { 0x34,0x5b,0xfb,0x7e }, { 0x3f,0x55,0xf2,0x73 },
    { 0x0e,0x7f,0xcd,0x50 }, { 0x05,0x71,0xc4,0x5d },
    { 0x18,0x63,0xdf,0x4a }, { 0x13,0x6d,0xd6,0x47 },
    { 0xca,0xd7,0x31,0xdc }, { 0xc1,0xd9,0x38,0xd1 },
    { 0xdc,0xcb,0x23,0xc6 }, { 0xd7,0xc5,0x2a,0xcb },
    { 0xe6,0xef,0x15,0xe8 }, { 0xed,0xe1,0x1c,0xe5 },
    { 0xf0,0xf3,0x07,0xf2 }, { 0xfb,0xfd,0x0e,0xff },
    { 0x92,0xa7,0x79,0xb4 }, { 0x99,0xa9,0x70,0xb9 },
    { 0x84,0xbb,0x6b,0xae }, { 0x8f,0xb5,0x62,0xa3 },
    { 0xbe,0x9f,0x5d,0x80 }, { 0xb5,0x91,0x54,0x8d },
    { 0xa8,0x83,0x4f,0x9a }, { 0xa3,0x8d,0x46,0x97 }
};

static const byte U3[256][4] = {
    { 0x00,0x00,0x00,0x00 }, { 0x0d,0x0b,0x0e,0x09 },
    { 0x1a,0x16,0x1c,0x12 }, { 0x17,0x1d,0x12,0x1b },
    { 0x34,0x2c,0x38,0x24 }, { 0x39,0x27,0x36,0x2d },
    { 0x2e,0x3a,0x24,0x36 }, { 0x23,0x31,0x2a,0x3f },
    { 0x68,0x58,0x70,0x48 }, { 0x65,0x53,0x7e,0x41 },
    { 0x72,0x4e,0x6c,0x5a }, { 0x7f,0x45,0x62,0x53 },
    { 0x5c,0x74,0x48,0x6c }, { 0x51,0x7f,0x46,0x65 },
    { 0x46,0x62,0x54,0x7e }, { 0x4b,0x69,0x5a,0x77 },
    { 0xd0,0xb0,0xe0,0x90 }, { 0xdd,0xbb,0xee,0x99 },
    { 0xca,0xa6,0xfc,0x82 }, { 0xc7,0xad,0xf2,0x8b },
    { 0xe4,0x9c,0xd8,0xb4 }, { 0xe9,0x97,0xd6,0xbd },
    { 0xfe,0x8a,0xc4,0xa6 }, { 0xf3,0x81,0xca,0xaf },
    { 0xb8,0xe8,0x90,0xd8 }, { 0xb5,0xe3,0x9e,0xd1 },
    { 0xa2,0xfe,0x8c,0xca }, { 0xaf,0xf5,0x82,0xc3 },
    { 0x8c,0xc4,0xa8,0xfc }, { 0x81,0xcf,0xa6,0xf5 },
    { 0x96,0xd2,0xb4,0xee }, { 0x9b,0xd9,0xba,0xe7 },
    { 0xbb,0x7b,0xdb,0x3b }, { 0xb6,0x70,0xd5,0x32 },
    { 0xa1,0x6d,0xc7,0x29 }, { 0xac,0x66,0xc9,0x20 },
    { 0x8f,0x57,0xe3,0x1f }, { 0x82,0x5c,0xed,0x16 },
    { 0x95,0x41,0xff,0x0d }, { 0x98,0x4a,0xf1,0x04 },
    { 0xd3,0x23,0xab,0x73 }, { 0xde,0x28,0xa5,0x7a },
    { 0xc9,0x35,0xb7,0x61 }, { 0xc4,0x3e,0xb9,0x68 },
    { 0xe7,0x0f,0x93,0x57 }, { 0xea,0x04,0x9d,0x5e },
    { 0xfd,0x19,0x8f,0x45 }, { 0xf0,0x12,0x81,0x4c },
    { 0x6b,0xcb,0x3b,0xab }, { 0x66,0xc0,0x35,0xa2 },
    { 0x71,0xdd,0x27,0xb9 }, { 0x7c,0xd6,0x29,0xb0 },
    { 0x5f,0xe7,0x03,0x8f }, { 0x52,0xec,0x0d,0x86 },
    { 0x45,0xf1,0x1f,0x9d }, { 0x48,0xfa,0x11,0x94 },
    { 0x03,0x93,0x4b,0xe3 }, { 0x0e,0x98,0x45,0xea },
    { 0x19,0x85,0x57,0xf1 }, { 0x14,0x8e,0x59,0xf8 },
    { 0x37,0xbf,0x73,0xc7 }, { 0x3a,0xb4,0x7d,0xce },
    { 0x2d,0xa9,0x6f,0xd5 }, { 0x20,0xa2,0x61,0xdc },
    { 0x6d,0xf6,0xad,0x76 }, { 0x60,0xfd,0xa3,0x7f },
    { 0x77,0xe0,0xb1,0x64 }, { 0x7a,0xeb,0xbf,0x6d },
    { 0x59,0xda,0x95,0x52 }, { 0x54,0xd1,0x9b,0x5b },
    { 0x43,0xcc,0x89,0x40 }, { 0x4e,0xc7,0x87,0x49 },
    { 0x05,0xae,0xdd,0x3e }, { 0x08,0xa5,0xd3,0x37 },
    { 0x1f,0xb8,0xc1,0x2c }, { 0x12,0xb3,0xcf,0x25 },
    { 0x31,0x82,0xe5,0x1a }, { 0x3c,0x89,0xeb,0x13 },
    { 0x2b,0x94,0xf9,0x08 }, { 0x26,0x9f,0xf7,0x01 },
    { 0xbd,0x46,0x4d,0xe6 }, { 0xb0,0x4d,0x43,0xef },
    { 0xa7,0x50,0x51,0xf4 }, { 0xaa,0x5b,0x5f,0xfd },
    { 0x89,0x6a,0x75,0xc2 }, { 0x84,0x61,0x7b,0xcb },
    { 0x93,0x7c,0x69,0xd0 }, { 0x9e,0x77,0x67,0xd9 },
    { 0xd5,0x1e,0x3d,0xae }, { 0xd8,0x15,0x33,0xa7 },
    { 0xcf,0x08,0x21,0xbc }, { 0xc2,0x03,0x2f,0xb5 },
    { 0xe1,0x32,0x05,0x8a }, { 0xec,0x39,0x0b,0x83 },
    { 0xfb,0x24,0x19,0x98 }, { 0xf6,0x2f,0x17,0x91 },
    { 0xd6,0x8d,0x76,0x4d }, { 0xdb,0x86,0x78,0x44 },
    { 0xcc,0x9b,0x6a,0x5f }, { 0xc1,0x90,0x64,0x56 },
    { 0xe2,0xa1,0x4e,0x69 }, { 0xef,0xaa,0x40,0x60 },
    { 0xf8,0xb7,0x52,0x7b }, { 0xf5,0xbc,0x5c,0x72 },
    { 0xbe,0xd5,0x06,0x05 }, { 0xb3,0xde,0x08,0x0c },
    { 0xa4,0xc3,0x1a,0x17 }, { 0xa9,0xc8,0x14,0x1e },
    { 0x8a,0xf9,0x3e,0x21 }, { 0x87,0xf2,0x30,0x28 },
    { 0x90,0xef,0x22,0x33 }, { 0x9d,0xe4,0x2c,0x3a },
    { 0x06,0x3d,0x96,0xdd }, { 0x0b,0x36,0x98,0xd4 },
    { 0x1c,0x2b,0x8a,0xcf }, { 0x11,0x20,0x84,0xc6 },
    { 0x32,0x11,0xae,0xf9 }, { 0x3f,0x1a,0xa0,0xf0 },
    { 0x28,0x07,0xb2,0xeb }, { 0x25,0x0c,0xbc,0xe2 },
    { 0x6e,0x65,0xe6,0x95 }, { 0x63,0x6e,0xe8,0x9c },
    { 0x74,0x73,0xfa,0x87 }, { 0x79,0x78,0xf4,0x8e },
    { 0x5a,0x49,0xde,0xb1 }, { 0x57,0x42,0xd0,0xb8 },
    { 0x40,0x5f,0xc2,0xa3 }, { 0x4d,0x54,0xcc,0xaa },
    { 0xda,0xf7,0x41,0xec }, { 0xd7,0xfc,0x4f,0xe5 },
    { 0xc0,0xe1,0x5d,0xfe }, { 0xcd,0xea,0x53,0xf7 },
    { 0xee,0xdb,0x79,0xc8 }, { 0xe3,0xd0,0x77,0xc1 },
    { 0xf4,0xcd,0x65,0xda }, { 0xf9,0xc6,0x6b,0xd3 },
    { 0xb2,0xaf,0x31,0xa4 }, { 0xbf,0xa4,0x3f,0xad },
    { 0xa8,0xb9,0x2d,0xb6 }, { 0xa5,0xb2,0x23,0xbf },
    { 0x86,0x83,0x09,0x80 }, { 0x8b,0x88,0x07,0x89 },
    { 0x9c,0x95,0x15,0x92 }, { 0x91,0x9e,0x1b,0x9b },
    { 0x0a,0x47,0xa1,0x7c }, { 0x07,0x4c,0xaf,0x75 },
    { 0x10,0x51,0xbd,0x6e }, { 0x1d,0x5a,0xb3,0x67 },
    { 0x3e,0x6b,0x99,0x58 }, { 0x33,0x60,0x97,0x51 },
    { 0x24,0x7d,0x85,0x4a }, { 0x29,0x76,0x8b,0x43 },
    { 0x62,0x1f,0xd1,0x34 }, { 0x6f,0x14,0xdf,0x3d },
    { 0x78,0x09,0xcd,0x26 }, { 0x75,0x02,0xc3,0x2f },
    { 0x56,0x33,0xe9,0x10 }, { 0x5b,0x38,0xe7,0x19 },
    { 0x4c,0x25,0xf5,0x02 }, { 0x41,0x2e,0xfb,0x0b },
    { 0x61,0x8c,0x9a,0xd7 }, { 0x6c,0x87,0x94,0xde },
    { 0x7b,0x9a,0x86,0xc5 }, { 0x76,0x91,0x88,0xcc },
    { 0x55,0xa0,0xa2,0xf3 }, { 0x58,0xab,0xac,0xfa },
    { 0x4f,0xb6,0xbe,0xe1 }, { 0x42,0xbd,0xb0,0xe8 },
    { 0x09,0xd4,0xea,0x9f }, { 0x04,0xdf,0xe4,0x96 },
    { 0x13,0xc2,0xf6,0x8d }, { 0x1e,0xc9,0xf8,0x84 },
    { 0x3d,0xf8,0xd2,0xbb }, { 0x30,0xf3,0xdc,0xb2 },
    { 0x27,0xee,0xce,0xa9 }, { 0x2a,0xe5,0xc0,0xa0 },
    { 0xb1,0x3c,0x7a,0x47 }, { 0xbc,0x37,0x74,0x4e },
    { 0xab,0x2a,0x66,0x55 }, { 0xa6,0x21,0x68,0x5c },
    { 0x85,0x10,0x42,0x63 }, { 0x88,0x1b,0x4c,0x6a },
    { 0x9f,0x06,0x5e,0x71 }, { 0x92,0x0d,0x50,0x78 },
    { 0xd9,0x64,0x0a,0x0f }, { 0xd4,0x6f,0x04,0x06 },
    { 0xc3,0x72,0x16,0x1d }, { 0xce,0x79,0x18,0x14 },
    { 0xed,0x48,0x32,0x2b }, { 0xe0,0x43,0x3c,0x22 },
    { 0xf7,0x5e,0x2e,0x39 }, { 0xfa,0x55,0x20,0x30 },
    { 0xb7,0x01,0xec,0x9a }, { 0xba,0x0a,0xe2,0x93 },
    { 0xad,0x17,0xf0,0x88 }, { 0xa0,0x1c,0xfe,0x81 },
    { 0x83,0x2d,0xd4,0xbe }, { 0x8e,0x26,0xda,0xb7 },
    { 0x99,0x3b,0xc8,0xac }, { 0x94,0x30,0xc6,0xa5 },
    { 0xdf,0x59,0x9c,0xd2 }, { 0xd2,0x52,0x92,0xdb },
    { 0xc5,0x4f,0x80,0xc0 }, { 0xc8,0x44,0x8e,0xc9 },
    { 0xeb,0x75,0xa4,0xf6 }, { 0xe6,0x7e,0xaa,0xff },
    { 0xf1,0x63,0xb8,0xe4 }, { 0xfc,0x68,0xb6,0xed },
    { 0x67,0xb1,0x0c,0x0a }, { 0x6a,0xba,0x02,0x03 },
    { 0x7d,0xa7,0x10,0x18 }, { 0x70,0xac,0x1e,0x11 },
    { 0x53,0x9d,0x34,0x2e }, { 0x5e,0x96,0x3a,0x27 },
    { 0x49,0x8b,0x28,0x3c }, { 0x44,0x80,0x26,0x35 },
    { 0x0f,0xe9,0x7c,0x42 }, { 0x02,0xe2,0x72,0x4b },
    { 0x15,0xff,0x60,0x50 }, { 0x18,0xf4,0x6e,0x59 },
    { 0x3b,0xc5,0x44,0x66 }, { 0x36,0xce,0x4a,0x6f },
    { 0x21,0xd3,0x58,0x74 }, { 0x2c,0xd8,0x56,0x7d },
    { 0x0c,0x7a,0x37,0xa1 }, { 0x01,0x71,0x39,0xa8 },
    { 0x16,0x6c,0x2b,0xb3 }, { 0x1b,0x67,0x25,0xba },
    { 0x38,0x56,0x0f,0x85 }, { 0x35,0x5d,0x01,0x8c },
    { 0x22,0x40,0x13,0x97 }, { 0x2f,0x4b,0x1d,0x9e },
    { 0x64,0x22,0x47,0xe9 }, { 0x69,0x29,0x49,0xe0 },
    { 0x7e,0x34,0x5b,0xfb }, { 0x73,0x3f,0x55,0xf2 },
    { 0x50,0x0e,0x7f,0xcd }, { 0x5d,0x05,0x71,0xc4 },
    { 0x4a,0x18,0x63,0xdf }, { 0x47,0x13,0x6d,0xd6 },
    { 0xdc,0xca,0xd7,0x31 }, { 0xd1,0xc1,0xd9,0x38 },
    { 0xc6,0xdc,0xcb,0x23 }, { 0xcb,0xd7,0xc5,0x2a },
    { 0xe8,0xe6,0xef,0x15 }, { 0xe5,0xed,0xe1,0x1c },
    { 0xf2,0xf0,0xf3,0x07 }, { 0xff,0xfb,0xfd,0x0e },
    { 0xb4,0x92,0xa7,0x79 }, { 0xb9,0x99,0xa9,0x70 },
    { 0xae,0x84,0xbb,0x6b }, { 0xa3,0x8f,0xb5,0x62 },
    { 0x80,0xbe,0x9f,0x5d }, { 0x8d,0xb5,0x91,0x54 },
    { 0x9a,0xa8,0x83,0x4f }, { 0x97,0xa3,0x8d,0x46 }
};

static const byte U4[256][4] = {
    { 0x00,0x00,0x00,0x00 }, { 0x09,0x0d,0x0b,0x0e },
    { 0x12,0x1a,0x16,0x1c }, { 0x1b,0x17,0x1d,0x12 },
    { 0x24,0x34,0x2c,0x38 }, { 0x2d,0x39,0x27,0x36 },
    { 0x36,0x2e,0x3a,0x24 }, { 0x3f,0x23,0x31,0x2a },
    { 0x48,0x68,0x58,0x70 }, { 0x41,0x65,0x53,0x7e },
    { 0x5a,0x72,0x4e,0x6c }, { 0x53,0x7f,0x45,0x62 },
    { 0x6c,0x5c,0x74,0x48 }, { 0x65,0x51,0x7f,0x46 },
    { 0x7e,0x46,0x62,0x54 }, { 0x77,0x4b,0x69,0x5a },
    { 0x90,0xd0,0xb0,0xe0 }, { 0x99,0xdd,0xbb,0xee },
    { 0x82,0xca,0xa6,0xfc }, { 0x8b,0xc7,0xad,0xf2 },
    { 0xb4,0xe4,0x9c,0xd8 }, { 0xbd,0xe9,0x97,0xd6 },
    { 0xa6,0xfe,0x8a,0xc4 }, { 0xaf,0xf3,0x81,0xca },
    { 0xd8,0xb8,0xe8,0x90 }, { 0xd1,0xb5,0xe3,0x9e },
    { 0xca,0xa2,0xfe,0x8c }, { 0xc3,0xaf,0xf5,0x82 },
    { 0xfc,0x8c,0xc4,0xa8 }, { 0xf5,0x81,0xcf,0xa6 },
    { 0xee,0x96,0xd2,0xb4 }, { 0xe7,0x9b,0xd9,0xba },
    { 0x3b,0xbb,0x7b,0xdb }, { 0x32,0xb6,0x70,0xd5 },
    { 0x29,0xa1,0x6d,0xc7 }, { 0x20,0xac,0x66,0xc9 },
    { 0x1f,0x8f,0x57,0xe3 }, { 0x16,0x82,0x5c,0xed },
    { 0x0d,0x95,0x41,0xff }, { 0x04,0x98,0x4a,0xf1 },
    { 0x73,0xd3,0x23,0xab }, { 0x7a,0xde,0x28,0xa5 },
    { 0x61,0xc9,0x35,0xb7 }, { 0x68,0xc4,0x3e,0xb9 },
    { 0x57,0xe7,0x0f,0x93 }, { 0x5e,0xea,0x04,0x9d },
    { 0x45,0xfd,0x19,0x8f }, { 0x4c,0xf0,0x12,0x81 },
    { 0xab,0x6b,0xcb,0x3b }, { 0xa2,0x66,0xc0,0x35 },
    { 0xb9,0x71,0xdd,0x27 }, { 0xb0,0x7c,0xd6,0x29 },
    { 0x8f,0x5f,0xe7,0x03 }, { 0x86,0x52,0xec,0x0d },
    { 0x9d,0x45,0xf1,0x1f }, { 0x94,0x48,0xfa,0x11 },
    { 0xe3,0x03,0x93,0x4b }, { 0xea,0x0e,0x98,0x45 },
    { 0xf1,0x19,0x85,0x57 }, { 0xf8,0x14,0x8e,0x59 },
    { 0xc7,0x37,0xbf,0x73 }, { 0xce,0x3a,0xb4,0x7d },
    { 0xd5,0x2d,0xa9,0x6f }, { 0xdc,0x20,0xa2,0x61 },
    { 0x76,0x6d,0xf6,0xad }, { 0x7f,0x60,0xfd,0xa3 },
    { 0x64,0x77,0xe0,0xb1 }, { 0x6d,0x7a,0xeb,0xbf },
    { 0x52,0x59,0xda,0x95 }, { 0x5b,0x54,0xd1,0x9b },
    { 0x40,0x43,0xcc,0x89 }, { 0x49,0x4e,0xc7,0x87 },
    { 0x3e,0x05,0xae,0xdd }, { 0x37,0x08,0xa5,0xd3 },
    { 0x2c,0x1f,0xb8,0xc1 }, { 0x25,0x12,0xb3,0xcf },
    { 0x1a,0x31,0x82,0xe5 }, { 0x13,0x3c,0x89,0xeb },
    { 0x08,0x2b,0x94,0xf9 }, { 0x01,0x26,0x9f,0xf7 },
    { 0xe6,0xbd,0x46,0x4d }, { 0xef,0xb0,0x4d,0x43 },
    { 0xf4,0xa7,0x50,0x51 }, { 0xfd,0xaa,0x5b,0x5f },
    { 0xc2,0x89,0x6a,0x75 }, { 0xcb,0x84,0x61,0x7b },
    { 0xd0,0x93,0x7c,0x69 }, { 0xd9,0x9e,0x77,0x67 },
    { 0xae,0xd5,0x1e,0x3d }, { 0xa7,0xd8,0x15,0x33 },
    { 0xbc,0xcf,0x08,0x21 }, { 0xb5,0xc2,0x03,0x2f },
    { 0x8a,0xe1,0x32,0x05 }, { 0x83,0xec,0x39,0x0b },
    { 0x98,0xfb,0x24,0x19 }, { 0x91,0xf6,0x2f,0x17 },
    { 0x4d,0xd6,0x8d,0x76 }, { 0x44,0xdb,0x86,0x78 },
    { 0x5f,0xcc,0x9b,0x6a }, { 0x56,0xc1,0x90,0x64 },
    { 0x69,0xe2,0xa1,0x4e }, { 0x60,0xef,0xaa,0x40 },
    { 0x7b,0xf8,0xb7,0x52 }, { 0x72,0xf5,0xbc,0x5c },
    { 0x05,0xbe,0xd5,0x06 }, { 0x0c,0xb3,0xde,0x08 },
    { 0x17,0xa4,0xc3,0x1a }, { 0x1e,0xa9,0xc8,0x14 },
    { 0x21,0x8a,0xf9,0x3e }, { 0x28,0x87,0xf2,0x30 },
    { 0x33,0x90,0xef,0x22 }, { 0x3a,0x9d,0xe4,0x2c },
    { 0xdd,0x06,0x3d,0x96 }, { 0xd4,0x0b,0x36,0x98 },
    { 0xcf,0x1c,0x2b,0x8a }, { 0xc6,0x11,0x20,0x84 },
    { 0xf9,0x32,0x11,0xae }, { 0xf0,0x3f,0x1a,0xa0 },
    { 0xeb,0x28,0x07,0xb2 }, { 0xe2,0x25,0x0c,0xbc },
    { 0x95,0x6e,0x65,0xe6 }, { 0x9c,0x63,0x6e,0xe8 },
    { 0x87,0x74,0x73,0xfa }, { 0x8e,0x79,0x78,0xf4 },
    { 0xb1,0x5a,0x49,0xde }, { 0xb8,0x57,0x42,0xd0 },
    { 0xa3,0x40,0x5f,0xc2 }, { 0xaa,0x4d,0x54,0xcc },
    { 0xec,0xda,0xf7,0x41 }, { 0xe5,0xd7,0xfc,0x4f },
    { 0xfe,0xc0,0xe1,0x5d }, { 0xf7,0xcd,0xea,0x53 },
    { 0xc8,0xee,0xdb,0x79 }, { 0xc1,0xe3,0xd0,0x77 },
    { 0xda,0xf4,0xcd,0x65 }, { 0xd3,0xf9,0xc6,0x6b },
    { 0xa4,0xb2,0xaf,0x31 }, { 0xad,0xbf,0xa4,0x3f },
    { 0xb6,0xa8,0xb9,0x2d }, { 0xbf,0xa5,0xb2,0x23 },
    { 0x80,0x86,0x83,0x09 }, { 0x89,0x8b,0x88,0x07 },
    { 0x92,0x9c,0x95,0x15 }, { 0x9b,0x91,0x9e,0x1b },
    { 0x7c,0x0a,0x47,0xa1 }, { 0x75,0x07,0x4c,0xaf },
    { 0x6e,0x10,0x51,0xbd }, { 0x67,0x1d,0x5a,0xb3 },
    { 0x58,0x3e,0x6b,0x99 }, { 0x51,0x33,0x60,0x97 },
    { 0x4a,0x24,0x7d,0x85 }, { 0x43,0x29,0x76,0x8b },
    { 0x34,0x62,0x1f,0xd1 }, { 0x3d,0x6f,0x14,0xdf },
    { 0x26,0x78,0x09,0xcd }, { 0x2f,0x75,0x02,0xc3 },
    { 0x10,0x56,0x33,0xe9 }, { 0x19,0x5b,0x38,0xe7 },
    { 0x02,0x4c,0x25,0xf5 }, { 0x0b,0x41,0x2e,0xfb },
    { 0xd7,0x61,0x8c,0x9a }, { 0xde,0x6c,0x87,0x94 },
    { 0xc5,0x7b,0x9a,0x86 }, { 0xcc,0x76,0x91,0x88 },
    { 0xf3,0x55,0xa0,0xa2 }, { 0xfa,0x58,0xab,0xac },
    { 0xe1,0x4f,0xb6,0xbe }, { 0xe8,0x42,0xbd,0xb0 },
    { 0x9f,0x09,0xd4,0xea }, { 0x96,0x04,0xdf,0xe4 },
    { 0x8d,0x13,0xc2,0xf6 }, { 0x84,0x1e,0xc9,0xf8 },
    { 0xbb,0x3d,0xf8,0xd2 }, { 0xb2,0x30,0xf3,0xdc },
    { 0xa9,0x27,0xee,0xce }, { 0xa0,0x2a,0xe5,0xc0 },
    { 0x47,0xb1,0x3c,0x7a }, { 0x4e,0xbc,0x37,0x74 },
    { 0x55,0xab,0x2a,0x66 }, { 0x5c,0xa6,0x21,0x68 },
    { 0x63,0x85,0x10,0x42 }, { 0x6a,0x88,0x1b,0x4c },
    { 0x71,0x9f,0x06,0x5e }, { 0x78,0x92,0x0d,0x50 },
    { 0x0f,0xd9,0x64,0x0a }, { 0x06,0xd4,0x6f,0x04 },
    { 0x1d,0xc3,0x72,0x16 }, { 0x14,0xce,0x79,0x18 },
    { 0x2b,0xed,0x48,0x32 }, { 0x22,0xe0,0x43,0x3c },
    { 0x39,0xf7,0x5e,0x2e }, { 0x30,0xfa,0x55,0x20 },
    { 0x9a,0xb7,0x01,0xec }, { 0x93,0xba,0x0a,0xe2 },
    { 0x88,0xad,0x17,0xf0 }, { 0x81,0xa0,0x1c,0xfe },
    { 0xbe,0x83,0x2d,0xd4 }, { 0xb7,0x8e,0x26,0xda },
    { 0xac,0x99,0x3b,0xc8 }, { 0xa5,0x94,0x30,0xc6 },
    { 0xd2,0xdf,0x59,0x9c }, { 0xdb,0xd2,0x52,0x92 },
    { 0xc0,0xc5,0x4f,0x80 }, { 0xc9,0xc8,0x44,0x8e },
    { 0xf6,0xeb,0x75,0xa4 }, { 0xff,0xe6,0x7e,0xaa },
    { 0xe4,0xf1,0x63,0xb8 }, { 0xed,0xfc,0x68,0xb6 },
    { 0x0a,0x67,0xb1,0x0c }, { 0x03,0x6a,0xba,0x02 },
    { 0x18,0x7d,0xa7,0x10 }, { 0x11,0x70,0xac,0x1e },
    { 0x2e,0x53,0x9d,0x34 }, { 0x27,0x5e,0x96,0x3a },
    { 0x3c,0x49,0x8b,0x28 }, { 0x35,0x44,0x80,0x26 },
    { 0x42,0x0f,0xe9,0x7c }, { 0x4b,0x02,0xe2,0x72 },
    { 0x50,0x15,0xff,0x60 }, { 0x59,0x18,0xf4,0x6e },
    { 0x66,0x3b,0xc5,0x44 }, { 0x6f,0x36,0xce,0x4a },
    { 0x74,0x21,0xd3,0x58 }, { 0x7d,0x2c,0xd8,0x56 },
    { 0xa1,0x0c,0x7a,0x37 }, { 0xa8,0x01,0x71,0x39 },
    { 0xb3,0x16,0x6c,0x2b }, { 0xba,0x1b,0x67,0x25 },
    { 0x85,0x38,0x56,0x0f }, { 0x8c,0x35,0x5d,0x01 },
    { 0x97,0x22,0x40,0x13 }, { 0x9e,0x2f,0x4b,0x1d },
    { 0xe9,0x64,0x22,0x47 }, { 0xe0,0x69,0x29,0x49 },
    { 0xfb,0x7e,0x34,0x5b }, { 0xf2,0x73,0x3f,0x55 },
    { 0xcd,0x50,0x0e,0x7f }, { 0xc4,0x5d,0x05,0x71 },
    { 0xdf,0x4a,0x18,0x63 }, { 0xd6,0x47,0x13,0x6d },
    { 0x31,0xdc,0xca,0xd7 }, { 0x38,0xd1,0xc1,0xd9 },
    { 0x23,0xc6,0xdc,0xcb }, { 0x2a,0xcb,0xd7,0xc5 },
    { 0x15,0xe8,0xe6,0xef }, { 0x1c,0xe5,0xed,0xe1 },
    { 0x07,0xf2,0xf0,0xf3 }, { 0x0e,0xff,0xfb,0xfd },
    { 0x79,0xb4,0x92,0xa7 }, { 0x70,0xb9,0x99,0xa9 },
    { 0x6b,0xae,0x84,0xbb }, { 0x62,0xa3,0x8f,0xb5 },
    { 0x5d,0x80,0xbe,0x9f }, { 0x54,0x8d,0xb5,0x91 },
    { 0x4f,0x9a,0xa8,0x83 }, { 0x46,0x97,0xa3,0x8d }
};

static const u32 rcon[30] = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
    0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91
};



static void
burn_stack (int bytes)
{
    char buf[64];

    do { volatile char *_vptr=(volatile char *)(buf); size_t _vlen=(sizeof buf); while(_vlen) { *_vptr=(0); _vptr++; _vlen--; } } while(0);
    bytes -= sizeof buf;
    if (bytes > 0)
        burn_stack (bytes);
}




static int
do_setkey (RIJNDAEL_context *ctx, const byte *key, const unsigned keylen)
{
    static int initialized = 0;
    static const char *selftest_failed=0;
    int ROUNDS;
    byte k[(256/32)][4];
    int i,j, r, t, rconpointer = 0;
    byte tk[(256/32)][4];
    int KC;


    if (!initialized) {
        initialized = 1;
        selftest_failed = selftest ();
        if( selftest_failed )
            fprintf((stderr), "%s\n", selftest_failed );
    }
    if( selftest_failed )
        return 50;

    if( keylen == 128/8 ) {
        ROUNDS = 10;
        KC = 4;
    }
    else if ( keylen == 192/8 ) {
        ROUNDS = 12;
        KC = 6;
    }
    else if ( keylen == 256/8 ) {
        ROUNDS = 14;
        KC = 8;
    }
    else
 return 44;

    ctx->ROUNDS = ROUNDS;
    ctx->decryption_prepared = 0;

    for (i = 0; i < keylen; i++) {
        k[i >> 2][i & 3] = key[i];
    }


    for (j = KC-1; j >= 0; j--) {
        *((u32_a_t*)tk[j]) = *((u32_a_t*)k[j]);
    }
    r = 0;
    t = 0;

    for (j = 0; (j < KC) && (r < ROUNDS + 1); ) {
        for (; (j < KC) && (t < 4); j++, t++) {
            *((u32_a_t*)(ctx->keySched)[r][t]) = *((u32_a_t*)tk[j]);
        }
        if (t == 4) {
            r++;
            t = 0;
        }
    }

    while (r < ROUNDS + 1) {


        tk[0][0] ^= S[tk[KC-1][1]];
        tk[0][1] ^= S[tk[KC-1][2]];
        tk[0][2] ^= S[tk[KC-1][3]];
        tk[0][3] ^= S[tk[KC-1][0]];
        tk[0][0] ^= rcon[rconpointer++];

        if (KC != 8) {
            for (j = 1; j < KC; j++) {
                *((u32_a_t*)tk[j]) ^= *((u32_a_t*)tk[j-1]);
            }
        } else {
            for (j = 1; j < KC/2; j++) {
                *((u32_a_t*)tk[j]) ^= *((u32_a_t*)tk[j-1]);
            }
            tk[KC/2][0] ^= S[tk[KC/2 - 1][0]];
            tk[KC/2][1] ^= S[tk[KC/2 - 1][1]];
            tk[KC/2][2] ^= S[tk[KC/2 - 1][2]];
            tk[KC/2][3] ^= S[tk[KC/2 - 1][3]];
            for (j = KC/2 + 1; j < KC; j++) {
                *((u32_a_t*)tk[j]) ^= *((u32_a_t*)tk[j-1]);
            }
        }

        for (j = 0; (j < KC) && (r < ROUNDS + 1); ) {
            for (; (j < KC) && (t < 4); j++, t++) {
                *((u32_a_t*)(ctx->keySched)[r][t]) = *((u32_a_t*)tk[j]);
            }
            if (t == 4) {
                r++;
                t = 0;
            }
        }
    }


    return 0;
}

static int
rijndael_setkey (void *ctx, const byte *key, const unsigned keylen)
{
    int rc = do_setkey (ctx, key, keylen);
    burn_stack ( 100 + 16*sizeof(int));
    return rc;
}


static void
prepare_decryption( RIJNDAEL_context *ctx )
{
    int r;
    byte *w;

    for (r=0; r < 14 +1; r++ ) {
        *((u32_a_t*)ctx->keySched2[r][0]) = *((u32_a_t*)ctx->keySched[r][0]);
        *((u32_a_t*)ctx->keySched2[r][1]) = *((u32_a_t*)ctx->keySched[r][1]);
        *((u32_a_t*)ctx->keySched2[r][2]) = *((u32_a_t*)ctx->keySched[r][2]);
        *((u32_a_t*)ctx->keySched2[r][3]) = *((u32_a_t*)ctx->keySched[r][3]);
    }

    for (r = 1; r < ctx->ROUNDS; r++) {
        w = (ctx->keySched2)[r][0];
        *((u32_a_t*)w) = *((u32_a_t*)U1[w[0]]) ^ *((u32_a_t*)U2[w[1]])
                       ^ *((u32_a_t*)U3[w[2]]) ^ *((u32_a_t*)U4[w[3]]);

        w = (ctx->keySched2)[r][1];
        *((u32_a_t*)w) = *((u32_a_t*)U1[w[0]]) ^ *((u32_a_t*)U2[w[1]])
                       ^ *((u32_a_t*)U3[w[2]]) ^ *((u32_a_t*)U4[w[3]]);

        w = (ctx->keySched2)[r][2];
        *((u32_a_t*)w) = *((u32_a_t*)U1[w[0]]) ^ *((u32_a_t*)U2[w[1]])
                       ^ *((u32_a_t*)U3[w[2]]) ^ *((u32_a_t*)U4[w[3]]);

        w = (ctx->keySched2)[r][3];
        *((u32_a_t*)w) = *((u32_a_t*)U1[w[0]]) ^ *((u32_a_t*)U2[w[1]])
                       ^ *((u32_a_t*)U3[w[2]]) ^ *((u32_a_t*)U4[w[3]]);
}

}





static void
do_encrypt_aligned (const RIJNDAEL_context *ctx,
                    unsigned char *b, const unsigned char *a)
{

  int ROUNDS = ctx->ROUNDS;
  int r;
  union
  {
    u32_a_t tempu32[4];
    byte temp[4][4];
  } u;

  *((u32_a_t*)u.temp[0]) = *((u32_a_t*)(a )) ^ *((u32_a_t*)(ctx->keySched)[0][0]);
  *((u32_a_t*)u.temp[1]) = *((u32_a_t*)(a+ 4)) ^ *((u32_a_t*)(ctx->keySched)[0][1]);
  *((u32_a_t*)u.temp[2]) = *((u32_a_t*)(a+ 8)) ^ *((u32_a_t*)(ctx->keySched)[0][2]);
  *((u32_a_t*)u.temp[3]) = *((u32_a_t*)(a+12)) ^ *((u32_a_t*)(ctx->keySched)[0][3]);
  *((u32_a_t*)(b )) = (*((u32_a_t*)T1[u.temp[0][0]])
                            ^ *((u32_a_t*)T2[u.temp[1][1]])
                            ^ *((u32_a_t*)T3[u.temp[2][2]])
                            ^ *((u32_a_t*)T4[u.temp[3][3]]));
  *((u32_a_t*)(b + 4)) = (*((u32_a_t*)T1[u.temp[1][0]])
                            ^ *((u32_a_t*)T2[u.temp[2][1]])
                            ^ *((u32_a_t*)T3[u.temp[3][2]])
                            ^ *((u32_a_t*)T4[u.temp[0][3]]));
  *((u32_a_t*)(b + 8)) = (*((u32_a_t*)T1[u.temp[2][0]])
                            ^ *((u32_a_t*)T2[u.temp[3][1]])
                            ^ *((u32_a_t*)T3[u.temp[0][2]])
                            ^ *((u32_a_t*)T4[u.temp[1][3]]));
  *((u32_a_t*)(b +12)) = (*((u32_a_t*)T1[u.temp[3][0]])
                            ^ *((u32_a_t*)T2[u.temp[0][1]])
                            ^ *((u32_a_t*)T3[u.temp[1][2]])
                            ^ *((u32_a_t*)T4[u.temp[2][3]]));

  for (r = 1; r < ROUNDS-1; r++)
    {
      *((u32_a_t*)u.temp[0]) = *((u32_a_t*)(b )) ^ *((u32_a_t*)(ctx->keySched)[r][0]);
      *((u32_a_t*)u.temp[1]) = *((u32_a_t*)(b+ 4)) ^ *((u32_a_t*)(ctx->keySched)[r][1]);
      *((u32_a_t*)u.temp[2]) = *((u32_a_t*)(b+ 8)) ^ *((u32_a_t*)(ctx->keySched)[r][2]);
      *((u32_a_t*)u.temp[3]) = *((u32_a_t*)(b+12)) ^ *((u32_a_t*)(ctx->keySched)[r][3]);

      *((u32_a_t*)(b )) = (*((u32_a_t*)T1[u.temp[0][0]])
                                ^ *((u32_a_t*)T2[u.temp[1][1]])
                                ^ *((u32_a_t*)T3[u.temp[2][2]])
                                ^ *((u32_a_t*)T4[u.temp[3][3]]));
      *((u32_a_t*)(b + 4)) = (*((u32_a_t*)T1[u.temp[1][0]])
                                ^ *((u32_a_t*)T2[u.temp[2][1]])
                                ^ *((u32_a_t*)T3[u.temp[3][2]])
                                ^ *((u32_a_t*)T4[u.temp[0][3]]));
      *((u32_a_t*)(b + 8)) = (*((u32_a_t*)T1[u.temp[2][0]])
                                ^ *((u32_a_t*)T2[u.temp[3][1]])
                                ^ *((u32_a_t*)T3[u.temp[0][2]])
                                ^ *((u32_a_t*)T4[u.temp[1][3]]));
      *((u32_a_t*)(b +12)) = (*((u32_a_t*)T1[u.temp[3][0]])
                                ^ *((u32_a_t*)T2[u.temp[0][1]])
                                ^ *((u32_a_t*)T3[u.temp[1][2]])
                                ^ *((u32_a_t*)T4[u.temp[2][3]]));
    }


  *((u32_a_t*)u.temp[0]) = *((u32_a_t*)(b )) ^ *((u32_a_t*)(ctx->keySched)[ROUNDS-1][0]);
  *((u32_a_t*)u.temp[1]) = *((u32_a_t*)(b+ 4)) ^ *((u32_a_t*)(ctx->keySched)[ROUNDS-1][1]);
  *((u32_a_t*)u.temp[2]) = *((u32_a_t*)(b+ 8)) ^ *((u32_a_t*)(ctx->keySched)[ROUNDS-1][2]);
  *((u32_a_t*)u.temp[3]) = *((u32_a_t*)(b+12)) ^ *((u32_a_t*)(ctx->keySched)[ROUNDS-1][3]);
  b[ 0] = T1[u.temp[0][0]][1];
  b[ 1] = T1[u.temp[1][1]][1];
  b[ 2] = T1[u.temp[2][2]][1];
  b[ 3] = T1[u.temp[3][3]][1];
  b[ 4] = T1[u.temp[1][0]][1];
  b[ 5] = T1[u.temp[2][1]][1];
  b[ 6] = T1[u.temp[3][2]][1];
  b[ 7] = T1[u.temp[0][3]][1];
  b[ 8] = T1[u.temp[2][0]][1];
  b[ 9] = T1[u.temp[3][1]][1];
  b[10] = T1[u.temp[0][2]][1];
  b[11] = T1[u.temp[1][3]][1];
  b[12] = T1[u.temp[3][0]][1];
  b[13] = T1[u.temp[0][1]][1];
  b[14] = T1[u.temp[1][2]][1];
  b[15] = T1[u.temp[2][3]][1];
  *((u32_a_t*)(b )) ^= *((u32_a_t*)(ctx->keySched)[ROUNDS][0]);
  *((u32_a_t*)(b+ 4)) ^= *((u32_a_t*)(ctx->keySched)[ROUNDS][1]);
  *((u32_a_t*)(b+ 8)) ^= *((u32_a_t*)(ctx->keySched)[ROUNDS][2]);
  *((u32_a_t*)(b+12)) ^= *((u32_a_t*)(ctx->keySched)[ROUNDS][3]);

}


static void
do_encrypt (const RIJNDAEL_context *ctx,
            unsigned char *bx, const unsigned char *ax)
{


  union
  {
    u32 dummy[4];
    byte a[16];
  } a;
  union
  {
    u32 dummy[4];
    byte b[16];
  } b;

  memcpy (a.a, ax, 16);
  do_encrypt_aligned (ctx, b.b, a.a);
  memcpy (bx, b.b, 16);
}


static void
rijndael_encrypt (void *ctx, byte *b, const byte *a)
{
    do_encrypt (ctx, b, a);
    burn_stack (16 + 2*sizeof(int));
}




static void
do_decrypt (RIJNDAEL_context *ctx, byte *b, const byte *a)
{

    int ROUNDS = ctx->ROUNDS;
    int r;
    byte temp[4][4];

    if ( !ctx->decryption_prepared ) {
        prepare_decryption ( ctx );
        burn_stack (64);
        ctx->decryption_prepared = 1;
    }

    *((u32_a_t*)temp[0]) = *((u32_a_t*)(a )) ^ *((u32_a_t*)(ctx->keySched2)[ROUNDS][0]);
    *((u32_a_t*)temp[1]) = *((u32_a_t*)(a+ 4)) ^ *((u32_a_t*)(ctx->keySched2)[ROUNDS][1]);
    *((u32_a_t*)temp[2]) = *((u32_a_t*)(a+ 8)) ^ *((u32_a_t*)(ctx->keySched2)[ROUNDS][2]);
    *((u32_a_t*)temp[3]) = *((u32_a_t*)(a+12)) ^ *((u32_a_t*)(ctx->keySched2)[ROUNDS][3]);

    *((u32_a_t*)(b )) = *((u32_a_t*)T5[temp[0][0]])
        ^ *((u32_a_t*)T6[temp[3][1]])
        ^ *((u32_a_t*)T7[temp[2][2]])
        ^ *((u32_a_t*)T8[temp[1][3]]);
    *((u32_a_t*)(b+ 4)) = *((u32_a_t*)T5[temp[1][0]])
        ^ *((u32_a_t*)T6[temp[0][1]])
        ^ *((u32_a_t*)T7[temp[3][2]])
        ^ *((u32_a_t*)T8[temp[2][3]]);
    *((u32_a_t*)(b+ 8)) = *((u32_a_t*)T5[temp[2][0]])
        ^ *((u32_a_t*)T6[temp[1][1]])
        ^ *((u32_a_t*)T7[temp[0][2]])
        ^ *((u32_a_t*)T8[temp[3][3]]);
    *((u32_a_t*)(b+12)) = *((u32_a_t*)T5[temp[3][0]])
        ^ *((u32_a_t*)T6[temp[2][1]])
        ^ *((u32_a_t*)T7[temp[1][2]])
        ^ *((u32_a_t*)T8[temp[0][3]]);
    for (r = ROUNDS-1; r > 1; r--) {
      *((u32_a_t*)temp[0]) = *((u32_a_t*)(b )) ^ *((u32_a_t*)(ctx->keySched2)[r][0]);
      *((u32_a_t*)temp[1]) = *((u32_a_t*)(b+ 4)) ^ *((u32_a_t*)(ctx->keySched2)[r][1]);
      *((u32_a_t*)temp[2]) = *((u32_a_t*)(b+ 8)) ^ *((u32_a_t*)(ctx->keySched2)[r][2]);
      *((u32_a_t*)temp[3]) = *((u32_a_t*)(b+12)) ^ *((u32_a_t*)(ctx->keySched2)[r][3]);
      *((u32_a_t*)(b )) = *((u32_a_t*)T5[temp[0][0]])
                            ^ *((u32_a_t*)T6[temp[3][1]])
                            ^ *((u32_a_t*)T7[temp[2][2]])
                            ^ *((u32_a_t*)T8[temp[1][3]]);
      *((u32_a_t*)(b+ 4)) = *((u32_a_t*)T5[temp[1][0]])
                            ^ *((u32_a_t*)T6[temp[0][1]])
                            ^ *((u32_a_t*)T7[temp[3][2]])
                            ^ *((u32_a_t*)T8[temp[2][3]]);
      *((u32_a_t*)(b+ 8)) = *((u32_a_t*)T5[temp[2][0]])
                            ^ *((u32_a_t*)T6[temp[1][1]])
                            ^ *((u32_a_t*)T7[temp[0][2]])
                            ^ *((u32_a_t*)T8[temp[3][3]]);
      *((u32_a_t*)(b+12)) = *((u32_a_t*)T5[temp[3][0]])
                            ^ *((u32_a_t*)T6[temp[2][1]])
                            ^ *((u32_a_t*)T7[temp[1][2]])
                            ^ *((u32_a_t*)T8[temp[0][3]]);
    }


    *((u32_a_t*)temp[0]) = *((u32_a_t*)(b )) ^ *((u32_a_t*)(ctx->keySched2)[1][0]);
    *((u32_a_t*)temp[1]) = *((u32_a_t*)(b+ 4)) ^ *((u32_a_t*)(ctx->keySched2)[1][1]);
    *((u32_a_t*)temp[2]) = *((u32_a_t*)(b+ 8)) ^ *((u32_a_t*)(ctx->keySched2)[1][2]);
    *((u32_a_t*)temp[3]) = *((u32_a_t*)(b+12)) ^ *((u32_a_t*)(ctx->keySched2)[1][3]);
    b[ 0] = S5[temp[0][0]];
    b[ 1] = S5[temp[3][1]];
    b[ 2] = S5[temp[2][2]];
    b[ 3] = S5[temp[1][3]];
    b[ 4] = S5[temp[1][0]];
    b[ 5] = S5[temp[0][1]];
    b[ 6] = S5[temp[3][2]];
    b[ 7] = S5[temp[2][3]];
    b[ 8] = S5[temp[2][0]];
    b[ 9] = S5[temp[1][1]];
    b[10] = S5[temp[0][2]];
    b[11] = S5[temp[3][3]];
    b[12] = S5[temp[3][0]];
    b[13] = S5[temp[2][1]];
    b[14] = S5[temp[1][2]];
    b[15] = S5[temp[0][3]];
    *((u32_a_t*)(b )) ^= *((u32_a_t*)(ctx->keySched2)[0][0]);
    *((u32_a_t*)(b+ 4)) ^= *((u32_a_t*)(ctx->keySched2)[0][1]);
    *((u32_a_t*)(b+ 8)) ^= *((u32_a_t*)(ctx->keySched2)[0][2]);
    *((u32_a_t*)(b+12)) ^= *((u32_a_t*)(ctx->keySched2)[0][3]);

}

static void
rijndael_decrypt (void *ctx, byte *b, const byte *a)
{
    do_decrypt (ctx, b, a);
    burn_stack (16+2*sizeof(int));
}







void
rijndael_cfb_enc (void *context, unsigned char *iv,
                  void *outbuf_arg, const void *inbuf_arg,
                  unsigned int nblocks)
{
  RIJNDAEL_context *ctx = context;
  unsigned char *outbuf = outbuf_arg;
  const unsigned char *inbuf = inbuf_arg;
  unsigned char *ivp;
  int i;

  for ( ;nblocks; nblocks-- )
    {

      do_encrypt_aligned (ctx, iv, iv);

      for (ivp=iv,i=0; i < 16; i++ )
        *outbuf++ = (*ivp++ ^= *inbuf++);
    }

  burn_stack (16 + 2*sizeof(int));
}





void
rijndael_cfb_dec (void *context, unsigned char *iv,
                  void *outbuf_arg, const void *inbuf_arg,
                  unsigned int nblocks)
{
  RIJNDAEL_context *ctx = context;
  unsigned char *outbuf = outbuf_arg;
  const unsigned char *inbuf = inbuf_arg;
  unsigned char *ivp;
  unsigned char temp;
  int i;

  for ( ;nblocks; nblocks-- )
    {
      do_encrypt_aligned (ctx, iv, iv);
      for (ivp=iv,i=0; i < 16; i++ )
        {
          temp = *inbuf++;
          *outbuf++ = *ivp ^ temp;
          *ivp++ = temp;
        }
    }

  burn_stack (16 + 2*sizeof(int));
}





static const char*
selftest (void)
{
    RIJNDAEL_context ctx;
    byte scratch[16];




    static const byte plaintext[16] = {
       0x01,0x4B,0xAF,0x22,0x78,0xA6,0x9D,0x33,
       0x1D,0x51,0x80,0x10,0x36,0x43,0xE9,0x9A
    };
    static const byte key[16] = {
        0xE8,0xE9,0xEA,0xEB,0xED,0xEE,0xEF,0xF0,
        0xF2,0xF3,0xF4,0xF5,0xF7,0xF8,0xF9,0xFA
    };
    static const byte ciphertext[16] = {
        0x67,0x43,0xC3,0xD1,0x51,0x9A,0xB4,0xF2,
        0xCD,0x9A,0x78,0xAB,0x09,0xA5,0x11,0xBD
    };

    static const byte plaintext_192[16] = {
        0x76,0x77,0x74,0x75,0xF1,0xF2,0xF3,0xF4,
        0xF8,0xF9,0xE6,0xE7,0x77,0x70,0x71,0x72
    };
    static const byte key_192[24] = {
        0x04,0x05,0x06,0x07,0x09,0x0A,0x0B,0x0C,
        0x0E,0x0F,0x10,0x11,0x13,0x14,0x15,0x16,
        0x18,0x19,0x1A,0x1B,0x1D,0x1E,0x1F,0x20
    };
    static const byte ciphertext_192[16] = {
        0x5D,0x1E,0xF2,0x0D,0xCE,0xD6,0xBC,0xBC,
        0x12,0x13,0x1A,0xC7,0xC5,0x47,0x88,0xAA
    };

    static const byte plaintext_256[16] = {
        0x06,0x9A,0x00,0x7F,0xC7,0x6A,0x45,0x9F,
        0x98,0xBA,0xF9,0x17,0xFE,0xDF,0x95,0x21
    };
    static const byte key_256[32] = {
        0x08,0x09,0x0A,0x0B,0x0D,0x0E,0x0F,0x10,
        0x12,0x13,0x14,0x15,0x17,0x18,0x19,0x1A,
        0x1C,0x1D,0x1E,0x1F,0x21,0x22,0x23,0x24,
        0x26,0x27,0x28,0x29,0x2B,0x2C,0x2D,0x2E
    };
    static const byte ciphertext_256[16] = {
        0x08,0x0E,0x95,0x17,0xEB,0x16,0x77,0x71,
        0x9A,0xCF,0x72,0x80,0x86,0x04,0x0A,0xE3
    };

    rijndael_setkey (&ctx, key, sizeof(key));
    rijndael_encrypt (&ctx, scratch, plaintext);
    if (memcmp (scratch, ciphertext, sizeof (ciphertext)))
        return "Rijndael-128 test encryption failed.";
    rijndael_decrypt (&ctx, scratch, scratch);
    if (memcmp (scratch, plaintext, sizeof (plaintext)))
        return "Rijndael-128 test decryption failed.";

    rijndael_setkey (&ctx, key_192, sizeof(key_192));
    rijndael_encrypt (&ctx, scratch, plaintext_192);
    if (memcmp (scratch, ciphertext_192, sizeof (ciphertext_192)))
        return "Rijndael-192 test encryption failed.";
    rijndael_decrypt (&ctx, scratch, scratch);
    if (memcmp (scratch, plaintext_192, sizeof (plaintext_192)))
        return "Rijndael-192 test decryption failed.";

    rijndael_setkey (&ctx, key_256, sizeof(key_256));
    rijndael_encrypt (&ctx, scratch, plaintext_256);
    if (memcmp (scratch, ciphertext_256, sizeof (ciphertext_256)))
        return "Rijndael-256 test encryption failed.";
    rijndael_decrypt (&ctx, scratch, scratch);
    if (memcmp (scratch, plaintext_256, sizeof (plaintext_256)))
        return "Rijndael-256 test decryption failed.";

    return ((void*)0);
}

const char *
rijndael_get_info(int algo, size_t *keylen,
    size_t *blocksize, size_t *contextsize,
    int (**r_setkey)(void *c, const byte *key, unsigned keylen),
    void (**r_encrypt)(void *c, byte *outbuf, const byte *inbuf),
    void (**r_decrypt)(void *c, byte *outbuf, const byte *inbuf)
    )
{
    *keylen = algo==7? 128 : algo==8? 192 : 256;
    *blocksize = 16;
    *contextsize = sizeof (RIJNDAEL_context);

    *r_setkey = rijndael_setkey;
    *r_encrypt = rijndael_encrypt;
    *r_decrypt = rijndael_decrypt;

    if( algo == 7 )
 return "AES";
    if (algo == 8)
        return "AES192";
    if (algo == 9)
        return "AES256";
    return ((void*)0);
}
